/*
 Navicat Premium Data Transfer

 Source Server         : hey-prod
 Source Server Type    : MySQL
 Source Server Version : 80040
 Source Host           : 74.121.151.221:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 80040
 File Encoding         : 65001

 Date: 09/12/2024 11:27:43
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for t_about
-- ----------------------------
DROP TABLE IF EXISTS `t_about`;
CREATE TABLE `t_about`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL COMMENT '内容',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_about
-- ----------------------------
INSERT INTO `t_about` VALUES (1, '{\"content\":\"这是【何以晴】的个人博客平台，如有什么建议可在评论区留言，感谢您的支持\"}', '2024-12-03 10:37:33', '2024-12-03 18:23:13');

-- ----------------------------
-- Table structure for t_article
-- ----------------------------
DROP TABLE IF EXISTS `t_article`;
CREATE TABLE `t_article`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL COMMENT '作者',
  `category_id` int NULL DEFAULT NULL COMMENT '文章分类',
  `article_cover` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '文章缩略图',
  `article_title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '标题',
  `article_abstract` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '文章摘要，如果该字段为空，默认取文章的前500个字符作为摘要',
  `article_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '内容',
  `is_top` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否置顶 0否 1是',
  `is_featured` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否推荐 0否 1是',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除  0否 1是',
  `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '状态值 1公开 2私密 3草稿',
  `type` tinyint(1) NOT NULL DEFAULT 1 COMMENT '文章类型 1原创 2转载 3翻译',
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '访问密码',
  `original_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '原文链接',
  `create_time` datetime NOT NULL COMMENT '发表时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 151 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_article
-- ----------------------------
INSERT INTO `t_article` VALUES (136, 1024, 218, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/b1b4c64178b490f5ca843315c86e4e5b.jpg', '如何使用vpn', '想要上网时隐身如影像，偷偷看海外视频，或者不被监视地畅游网络？VPN来帮你！它就像一张虚拟隐形斗篷，让你在互联网世界中安全飞行。数据加密保护隐私，翻墙功能打破地域限制，你想看什么、做什么，VPN帮你悄无声息地搞定！赶快试试，让网络世界更自由，更安全，别让虚拟的“围墙”阻挡了你的脚步！', '## 什么是vpn\n\nVPN（虚拟私人网络，Virtual Private Network）是一种通过公用网络（如互联网）建立安全连接的技术。它通过加密通信和隐藏用户的IP地址，保护用户的隐私和安全，使得用户能够像在私人网络中一样安全地访问远程资源。\n\n主要功能包括：\n\n1. **数据加密**：VPN可以加密用户的网络流量，防止黑客或第三方监听或篡改数据。\n2. **隐藏IP地址**：通过VPN，用户可以隐藏真实IP地址，增强匿名性。\n3. **绕过地理限制**：使用VPN可以让用户伪装成其他国家或地区的用户，从而绕过一些区域限制，访问特定内容。\n4. **增强安全性**：尤其在公共Wi-Fi环境中，VPN可以防止数据被窃取或被恶意软件攻击。\n\n## 如何获取vpn\n\n- 购买代理商的\n- 自建vpn代理机\n\n这篇文章主要讲解购买代理商的\n\n出售vpn的代理商有很多，这里我以 **阿伟云** 为例，【顶级机场也不错】\n\n[阿伟云](https://www.awyydsgroup.xyz/register) | [顶级机场](https://xn--mes358a9urctx.com/)\n\n```\nhttps://www.awyydsgroup.xyz/register\nhttps://xn--mes358a9urctx.com/ #直接搜：顶级机场.com 也可以\n```\n\n注册登录成功后点击侧边栏的【购买订阅】可根据你的需求进行购买，普通用户$9.99$套餐就够用了\n\n购买成功后还需要进行本机注册代理就可以进行使用了,阿伟云也提供了教学步骤，点击侧边栏的【使用文档】即可\n\n工具下载：[Clash Windows 端](https://hollywood.lanzouj.com/win64dadwdqwd)\n\n下载完成并配置完试访问 [YouTobe](https://www.youtube.com/)能打开就是好了\n\n如有问题留言哦~', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-02 22:41:05', NULL);
INSERT INTO `t_article` VALUES (137, 1024, 218, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cf5de98941120246c3330fd89bdd5cf3.jpg', 'Ngrok实现内网穿透（Windows）', '内网穿透（NAT traversal）是一种技术手段，使得位于内网或防火墙后面的设备能够通过外网访问。例如，如果你的计算机、服务器等设备处于公司或家庭的路由器后面，通常只有同一内网中的设备能够直接访问它，外网用户无法直接连接。内网穿透通过创建外部访问通道，使得外网用户能够与这些内网资源交互。', '## 什么是内网穿透，内网穿透有什么用\n\n**内网穿透**（NAT traversal）是一种技术手段，使得位于内网或防火墙后面的设备能够通过外网访问。例如，如果你的计算机、服务器等设备处于公司或家庭的路由器后面，通常只有同一内网中的设备能够直接访问它，外网用户无法直接连接。内网穿透通过创建外部访问通道，使得外网用户能够与这些内网资源交互。\n\n**内网穿透的用途**\n\n1. **远程访问内网服务**：在外网环境中，用户可以远程访问自己家里或公司内网中的电脑、服务器、摄像头等设备，进行文件传输、桌面控制等操作。\n2. **服务器部署**：个人或企业可以将某些服务部署在内网中，通过内网穿透将这些服务发布到互联网上，使得它们无需复杂的公网 IP 配置即可被外界访问。\n3. **内网开发调试**：开发者在本地搭建服务后，可以通过内网穿透提供给外网的同事或客户测试访问，便于调试和演示，尤其在展示网站或应用时十分便捷。\n\n## 下载并注册\n\n[ngork官网](https://ngrok.com/)\n\n```\nhttps://ngrok.com/\n```\n\n打不开网址可前往 [科学上网]()\n\n点击右上角 【sign up】注册可使用（Google 或 Github 账号登录）\n\n![1.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/424f6c0410a2b943a4a7db496e46d6e3.png)\n\n账号注册登录成功后，点击【Windows】来到下载界面 [下载界面](https://download.ngrok.com/windows)\n\n![2.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ff4622c79a3d04297b5bb112ca681f12.png)\n发现下载有两种方法\n\n一种是使用命令行\n\n```dos\nchoco install ngrok\n```\n\n安装，但我不建议这样，点击【Download】\n\n![3.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/1908d285ab72d077bbbd3893005c8138.png)\n\n下载好后解压，来到【ngork.exe】级目录，打开【cmd】或【PowerShell】，然后到官网找到【Authtoken】，复制粘贴你的Authtoken，到本机执行\n\n![4.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/285034254a19bcfcc498edd990f4b830.png)\n\n我这【ngork】放在D盘了\n\n![5.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/c5e6ba099bb2e54b49cf0ca86e02caaa.png)\n\n配置完成后就可以使用了\n\n还是在刚刚的命令框输入命令\n\n```dos\nngork http 你本机端口号\n```\n\n输入回车后，出现一下界面即成功\n\n![6.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3b9037ec8bc1f8f56f75114e6123d4e9.png)\n【Forwarding】即公网可访问域名\n\n', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 11:09:13', '2024-12-03 12:02:54');
INSERT INTO `t_article` VALUES (138, 1024, 220, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/aaf89d6d9dca487db3ccaf31cc03592a.png', 'Windows 下载部署 Ollama', 'Ollama，就像你的私人AI魔法师，懂你、陪你，还不用担心它偷听八卦！它把强大的语言模型请回家，在本地悄悄运行，数据全掌控在你手里。没网？没事，它依然在线侃大山！不像那些云端AI，天天在“云”里雾里晃悠，它实打实地为你服务。想用？一声召唤，它乖乖上线；不想用？直接关机，毫无怨言。总之，有了 Ollama，你能安全、自在又优雅地玩转AI世界，像个技术时代的生活艺术家！', '# Windows 下载部署 Ollama\n\n## 什么是Ollama\n\n**Ollama** 是一个轻量级的本地推理工具，主要用于运行 AI 模型。它允许用户在本地设备上运行和交互基于大语言模型（LLM）的应用，而无需依赖云服务。这种工具的主要优势是隐私保护和低延迟，尤其适合那些需要处理敏感数据或希望脱离互联网的场景。\n\n以下是一些 Ollama 的关键特点：  \n\n1. **离线运行**：不需要连接云端，完全本地推理。  \n2. **支持多种模型**：可加载不同的 LLM，例如一些开源的语言模型。  \n3. **跨平台支持**：通常支持在 macOS、Windows 和 Linux 等系统上运行。  \n4. **用户友好**：提供简洁的接口和配置，适合开发者和非技术用户。  \n\n[Ollama官网](https://ollama.com/)\n\n```\nhttps://ollama.com/\n```\n\n[Ollama Github地址](https://github.com/ollama/ollama)\n\n```\nhttps://github.com/ollama/ollama\n```\n\n这里我以Windows为例，在本地部署一台AI模型平台\n\n## Windows 下载部署Ollama\n\n### 1.下载 Ollama应用程序\n\n[Ollama下载地址](https://ollama.com/download)\n\n```\nhttps://ollama.com/download\n```\n\n下载后会得到一个【OllamaSetup.exe】文件，双击运行安装【Install】即可，安装完成会提示`Ollama running`,你电脑右下角的状态栏里会有一个羊驼的logo\n\nOllama默认开机启动（几乎不会影响开机速度）\n\n### 2.修改Ollama配置（可跳过）\n\n【Ollama】大模型下载地址默认在`C:\\Users\\用户名\\.ollama\\models`\n\n大模型的地址最好还是更改地址（毕竟真的很大,当然不改也可以）\n\n#### **修改Ollama模型下载地址**\n\n右击我的电脑点击【属性】或在设置中搜索【查看高级系统设置】点击，打开【系统属性】，然后点击【环境变量】，在下面的【系统变量】中点击【新建】添加下面这段话\n\n变量名：`OLLAMA_MODELS`\n\n变量值：`H:\\app\\ollama\\.ollama\\models`\n\n变量名**不能变**，变量值为你想要存放ollama 模型的地址\n\n![1.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/30cd1f0cf4bc0878c32788bb42a413fe.jpg)\n\n配置完成可打开【cmd】命令行窗口查看，输入\n\n```\necho %ollama_models%\n```\n\n出现刚刚配置的路径就是正确情况\n\n#### 修改Ollama默认端口号\n\nOllama默认在`11434`端口运行\n\n在【环境变量】的【用户变量】中添加\n\n变量名：`OLLAMA_HOST`\n\n变量值：`:114344`\n\n设置成功后访问`http:\\\\127.0.0.1:114344`屏幕上会出现【Ollama is running】字样\n\n### 3.下载Docker\n\n问什么要下载Docker,不下载docker也是可以使用Ollama的是不过大多是在【PowerShell】这样的命令行窗口内（像这样的可以直接看下面下载Ollama大模型），下载Docker后可以使用其的**WebUI**，官方也是推荐这样，下面我们开始安装Docker。\n\n#### 下载docker桌面端\n\n- 打开windows子系统\n\n点击键盘【win】键，搜索打开【控制面板】，点击【程序】，然后再点击【启用或关闭Windows功能】，下拉到底下找到【适用于Linux的Windows子系统】，点击选上后点【确定】。功能启动需要重启后启用\n\n> 重启前先点赞收藏下呗，万一找不到该咋办 `^_^`\n\n- 先确保wsl2更新至最新\n\n查看wsl2版本\n\n```bash\nwsl --version\n```\n\n如果不是可使用`wsl --update`进行更新\n\n```bash\nwsl --update\n```\n\n也可手动安装前往[WSL](https://aka.ms/wsl2kernel)下载\n\n- 下载docker\n\n前往[docker 官网](https://www.docker.com/products/docker-desktop/)下载Windows桌面版\n\n```\nhttps://www.docker.com/products/docker-desktop/\n```\n\n下载好后会提醒重启电脑\n\n> 还是那就话：重启前先点赞收藏下呗，万一找不到该咋办 `^_^`\n\n- 配置docker resources（可选）\n\n配置resources地址会改变images下载的位置\n\n打开Docker桌面版（一般会提醒你登录，其实不登录也可以使用），点击右上角的【设置】图标，再点击【Resources】就会看到当前images下载位置，你可点击【Browse】进行更改\n\n> Docker 默认是双击就启动，启动后在屏幕右下角状态栏可看到\n\n- 拉取并运行Ollama镜像\n\n拉取并运行只需要这一段程序即可\n\n打开【cmd】输入\n\n```bash\ndocker run -d -p 9876:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main\n```\n\n使用`9876`端口作为WebUI入口，可修改；`-v`为日志输出路径，可修改；`--name`后为镜像名字，可修改；`--restart`为开启自启动\n\n启动成功后访问`http:\\\\127.0.0.1:9876`可以看见\n\n![2.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/58cbbe3d2d1602bfab7cd873c3e713c0.jpg)\n默认为登录页面我这是注册登录过后的\n\n### 4.下载Ollama大模型并使用\n\n前往 [Ollama Lib 下载](https://ollama.com/library)\n\n```\nhttps://ollama.com/library\n\n```\n\n点击你想下载的大模型，我这里以`llama3.2`为例\n\n#### PowerShell下载（不推荐）\n\n![3.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/55488bd06f39556b34a3da93c64aae6e.jpg)\n复制`ollama run llama3.2`在powershell中运行即可，下载成功就可以访问了\n\n#### Docker下载\n\n打开上述的`http://127.0.0.1:9876`页面\n\n![4.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/bba8fea909f7dd9c03cbf072af5663ff.jpg)\n\n![5.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/84dc6e8f6cfa75b3da0927a2eac56946.jpg)\n\n下载完成后,回到主页【点击新对话】就可以使用了', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 11:19:14', NULL);
INSERT INTO `t_article` VALUES (139, 1024, 220, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ccd58fcbcb8e6532b67fa26a8d8ed430.jpg', '人脸识别-DeepFace', '人脸识别是一项通过分析人脸特征来确认个体身份的技术。它通过捕捉面部的独特标志，如眼睛间距、鼻梁形状和面部轮廓等，来实现快速且精准的识别。如今，这项技术被广泛应用于手机解锁、安防监控以及金融支付等领域，提升了生活的便利性和安全性。虽然它在准确性上不断进步，但有时也会遇到光线、角度或表情变化等因素的挑战。总的来说，人脸识别正在悄然改变我们的日常生活，让安全变得更加智能和高效。', '# Deepface\n\ndeepface是【Github】上的一个开源人脸识别（Face Recognition）项目，项目包含了人脸识别、人脸属性分析等多个功能\n\n代码地址为：[DeepFace](https://github.com/serengil/deepface)\n\n```\nhttps://github.com/serengil/deepface\n```\n\n模型下载地址：[Releases](https://github.com/serengil/deepface/releases)\n\n```\nhttps://github.com/serengil/deepface/releases\n```\n\npython安装方式(对python版本有限制，最好使用3.8 < version < 3.13的，使用3.11就可以) [python 3.11 下载](https://www.python.org/ftp/python/3.11.8/python-3.11.8-amd64.exe)\n\n```bash\npip install deepface -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n## 基础功能接口\n\n- `DeepFace.verify`:人脸验证\n- `DeepFace.find`:人脸识别\n- `DeepFace.analyze`:人脸属性分析\n- `DeepFace.extract_faces`:人脸检测和对齐\n- `DeepFace.represent`:人脸特征提取\n- `DeepFace.stream`:人脸实时分析\n\n当然这个项目的功能很多，很抱歉我不能全都提到，下面会对这几个接口进行一一讲解，在此之前你需要准备一些基础数据 => 人物照片，视频等【我的放文章最后】\n\n当然还需这几个python库作为辅助，如果你还未安装可使用下面命令进行安装\n\n**matplotlib**：数据可视化库，用于创建静态、动态、交互式的图形和可视化。\n\n```bash\npip install matplotlib\n```\n\n**PIL **:Python Imaging Library，图像处理的库，如图像剪裁、缩放、旋转、转换颜色空间、过滤等。\n\n```bash\npip install Pillow\n```\n\n**cv2**:Open Source Computer Vision Library,开源计算机视觉库,主要用于图像处理、视频分析、机器视觉以及图像识别等.。\n\n```bash\npip install opencv-python\n```\n\n如果你还需要一些额外的功能，如视频 I/O 或 OpenCV 的扩展功能，可以安装 `opencv-python-headless`：\n\n```bash\npip install opencv-python-headless\n```\n\n**numpy **:Numerical Python,用于科学计算的 Python 库,提供了高效的数组对象,以及用于处理数组的各种功能和数学运算等。\n\n```bash\npip install numpy\n```\n\n## 人脸验证\n\n> 原文\n>\n> **Face Verification** - [`Demo`](https://youtu.be/KRCvkNCOphE)\n>\n> This function verifies face pairs as same person or different persons. It expects exact image paths as inputs. Passing numpy or base64 encoded images is also welcome. Then, it is going to return a dictionary and you should check just its verified key.\n>\n> 翻译过来就是\n>\n> 此功能可验证人脸对是同一个人还是不同人。它期望精确的图像路径作为输入。也欢迎传递 numpy 或 base64 编码图像。然后，它将返回一个字典，您应该仅检查其经过验证的密钥。\n\n意思就是给两张图，判断这两张图是不是同一个人\n\n这里是简单的代码示例\n\n```python\n# 人脸识别模型 - 人脸验证 - Face Verification\n# img1 = 1-1.jpg , img2 = 1-2.jpg\ndef deepface_model_verify(img1: str, img2: str, model_name: str = \'VGG-Face\'):\n    \"\"\"\n    给出两张图片比较两张图片是否为同一个人\n    :param img1:\n    :param img2:\n    :param model_name:\n    :return:\n    \"\"\"\n    result = DeepFace.verify(img1_path=img1,\n                             img2_path=img2,\n                             model_name=model_name)\n    return result\n\n```\n\n将运行结果result，打印得到：\n\n```json\n{\n    \'verified\': True, \n    \'distance\': 0.23718864776725845, \n    \'threshold\': 0.4,\n    \'model\': \'Facenet\', \n    \'detector_backend\': \'opencv\',\n    \'similarity_metric\': \'cosine\', \n    \'facial_areas\': \n    {\n        \'img1\': \n            {\n                \'x\': 339, \n                \'y\': 218,\n                \'w\': 768,\n                \'h\': 768,\n                \'left_eye\': (850, 524),\n                \'right_eye\': (571, 517)\n            },\n    	\'img2\': \n            {\n                \'x\': 524,\n                \'y\': 201,\n                \'w\': 491,\n                \'h\': 491,\n                \'left_eye\': (858, 388),\n                \'right_eye\': (663, 390)\n            }\n    },\n    \'time\': 5.01\n}\n\n```\n\nverified为True说明两张图片为同一个人，事实也是如此\n\n> **针对模型之间的比较在下面的 - 人脸识别模型比较 - 提及**\n\n**请求参数说明**\n\n- `img1_path (str 或 np.ndarray 或 List[float])`:第一幅图像的路径。\n- `img2_path (str 或 np.ndarray 或 List[float])`:第二幅图像的路径。(图像接受字符串形式的精确图像路径、numpy 数组 (BGR)、base64 编码图像或预先计算的嵌入)\n- `model_name (str)`：人脸识别模型。\n  - 选项：VGG-Face、Facenet、Facenet512、OpenFace、DeepFace、DeepID、Dlib、ArcFace、SFace 和 GhostFaceNet（默认为 VGG-Face）。\n  - 模型加载需要h5文件，默认GitHub下载，若下载不下可点击 [.h5文件下载](https://pan.quark.cn/s/28e3ef150cde)\n  - 下载后放在`C:\\Users\\你的用户文件夹\\.deepface\\weights`中\n  - 也可自定义文件路径：修改 `folder_utils.py` 的 `get_deepface_home` 函数\n- `detector_backend (str)`:人脸检测器。\n  - 选项：\'opencv\'、\'retinaface\'、\'mtcnn\'、\'ssd\'、\'dlib\'、\'mediapipe\'、\'yolov8\'、\'centerface\' 或 \'skip\'（默认为 opencv）。\n- `distance_metric (str)`:用于测量相似度的度量。\n  - 选项：\'cosine\'、\'euclidean\'、\'euclidean_l2\'（默认为‘cosine’）。\n- `force_detection (bool)`:如果在图像中未检测到面部，则引发异常。\n  - 设置为 False 以避免低分辨率图像的异常（默认为 True）。\n- `align(bool)`:用于启用面部对齐的标志（默认为 True）。\n- `expand_percentage（int）`:以百分比扩大检测到的面部区域（默认为 0）。\n- `normalization (str)`:在将输入图像输入模型之前对其进行规范化。\n  - 选项：base、raw、Facenet、Facenet2018、VGGFace、VGGFace2、ArcFace（默认为 base）\n- `silent (bool)`:抑制或允许某些日志消息，以实现更安静的分析过程（默认为 False）。\n- `Threshold (float)`:指定阈值以确定一对代表同一个人还是不同的人。\n  - 此阈值用于比较距离。如果未设置，将根据指定的模型名称和距离度量应用默认的预调整阈值（默认为 None）。\n- `anti_spoofing (bool)`:启用反欺骗的标志（默认为 False）。\n\n**返回参数说明**\n\n字典类型，包含\n\n- `verified:bool`:表示图像代表同一个人 (True)还是不同的人 (False)。\n- `distance:float`:面部向量之间的距离测量值。距离越小，相似度越高。\n- `threshold:float`:用于验证的最大阈值。如果距离低于此阈值，则认为图像匹配。\n- `model:str`:所选的面部识别模型。\n- `distance_metric:str`:所选的用于测量距离的相似度度量。\n- `facial_areas:dict`:两幅图像中面部的矩形感兴趣区域。\n  - `img1:{x：int，y：int，w：int，h：int}`:第一幅图像的感兴趣区域。\n  - `img2:{x：int，y：int，w：int，h：int}`:第二幅图像的感兴趣区域。\n- `time:float`:验证过程所用时间（以秒为单位）。\n\n## 人脸识别\n\n> [Face recognition](https://sefiks.com/2020/05/25/large-scale-face-recognition-for-deep-learning/) requires applying face verification many times. Herein, deepface has an out-of-the-box find function to handle this action. It\'s going to look for the identity of input image in the database path and it will return list of pandas data frame as output. Meanwhile, facial embeddings of the facial database are stored in a pickle file to be searched faster in next time. Result is going to be the size of faces appearing in the source image. Besides, target images in the database can have many faces as well.\n>\n> 人脸识别需要多次进行人脸验证。在这里，deepface 有一个开箱即用的查找功能来处理此操作。它将在数据库路径中查找输入图像的标识，并将返回 pandas 数据帧列表作为输出。同时，面部数据库的面部嵌入存储在pickle文件中，以便下次更快地搜索。结果将是源图像中出现的面部尺寸。此外，数据库中的目标图像也可以有多个面孔。\n\n即给定一个人脸和一个数据集，接口将会在这个数据集中找到与目标人脸相似的数据\n\n简单的代码示例\n\n```python\n# 人脸识别模型 - 人脸识别 - Face recognition\n# img = 1-1.jpg , db = ./img/ \ndef deepface_model_find(img: str, db: str, model_name=\'VGG-Face\'):\n    \"\"\"\n    给一张图片以及一个文件夹，会在这个文件夹中找到和图片一样的人\n    :param img:\n    :param db:\n    :param model_name:\n    :return:\n    \"\"\"\n    dfs = DeepFace.find(\n        img_path=img,\n        db_path=db\n    )\n    return dfs\n\n```\n\n将返回的dfs打印得到：\n\n```\n[      identity                                      hash  ...  threshold  distance\n0  img\\1-1.jpg  7281f3c678041b24471ba0baea4f57e0bac7e5cf  ...       0.68  0.000000\n1  img\\1-2.jpg  4d8cdc50d15e6c56060ecb57ebbe01bc23dc7d90  ...       0.68  0.412802\n2  img\\1-3.jpg  d6e080b2bda60541cf19e1d5abdf5be464421031  ...       0.68  0.434774\n\n[3 rows x 12 columns]]\n\n```\n\n结果显示1-1.jpg,1-2.jpg,1-3.jpg三张与目标文件（1-1.jpg）中的人物相似，事实却是如此\n\n**请求参数说明**\n\n- `img_path (str 或 np.ndarray)`:图像的准确路径、BGR 格式的 numpy 数组或 base64 编码图像。如果源图像包含多个人脸，结果将包含每个检测到的人脸的信息。\n- `db_path (str)`:包含图像文件的文件夹的路径。\n- `model_name (str)`:人脸识别模型。,选项不变\n- `distance_metric (str)`:用于测量相似度的指标。不变\n- `force_detection (bool)`:如果图像中未检测到人脸，则引发异常。设置为 False 以避免低分辨率图像的异常（默认为 True）。\n- `detector_backend (str)`:人脸检测器后端。不变\n- `align (bool)`:根据眼睛位置执行对齐（默认为 True）。\n- `expand_percentage (int)`:以百分比扩大检测到的面部区域（默认为 0）。\n- `threshold (float)`:指定阈值以确定一对代表同一个人还是不同的人。不变\n- `normalization (str)`:在将输入图像输入模型之前对其进行规范化。\n- `silent (bool)`:抑制或允许某些日志消息，以实现更安静的分析过程（默认为 False）。\n- ` refresh_database(bool)`:将图像表示（pkl）文件与目录/db 文件同步，如果设置为 false，它将忽略 db_path 内的任何文件更改（默认为 True）。\n- `anti_spoofing (bool)`:启用反欺骗的标志（默认为 False）。\n\n**返回结果说明**\n\n返回类型为 list (List[pd.DataFrame])，DataFrame 列包括\n\n- `identity`:检测到的个人的身份标签。\n- `target_x ,target_y ,target_w ,target_h`:数据库中目标人脸的边界框坐标。\n- `source_x ,source_y ,source_w ,source_h`:源图像中检测到的人脸的边界框坐标。\n- `threshold`:确定一对人脸是同一个人还是不同人的阈值。\n- `distance`:基于指定模型和距离度量的人脸之间的相似度得分\n\n## 人脸属性分析\n\n> **Facial Attribute Analysis** - [`Demo`](https://youtu.be/GT2UeN85BdA)\n>\n> DeepFace also comes with a strong facial attribute analysis module including [`age`](https://sefiks.com/2019/02/13/apparent-age-and-gender-prediction-in-keras/), [`gender`](https://sefiks.com/2019/02/13/apparent-age-and-gender-prediction-in-keras/), [`facial expression`](https://sefiks.com/2018/01/01/facial-expression-recognition-with-keras/) (including angry, fear, neutral, sad, disgust, happy and surprise) and [`race`](https://sefiks.com/2019/11/11/race-and-ethnicity-prediction-in-keras/) (including asian, white, middle eastern, indian, latino and black) predictions. Result is going to be the size of faces appearing in the source image.\n>\n> 面部属性分析 - 演示 DeepFace还配备了强大的面部属性分析模块，包括年龄、性别、面部表情（包括愤怒、恐惧、中性、悲伤、厌恶、快乐和惊讶）和种族（包括亚洲人、白人、中东人、印度人、拉丁裔和黑人）预测。结果将是源图像中出现的面部尺寸。\n\n代码演示\n\n```python\n# 人脸识别模型 - 人脸属性分析 - Face analyze\n# img = 3-3.jpg\ndef deepface_model_analyze(img: str):\n    \"\"\"\n    给定一张图片分析，年龄、性别、面部表情、种族\n    :param img:\n    :return:\n    \"\"\"\n    result = DeepFace.analyze(img_path=img)\n    return result\n\n```\n\n打印运行结果得到\n\n```\n[\n{\n    \'emotion\': \n    	{\n            \'angry\': np.float32(0.3104471),\n            \'disgust\': np.float32(1.3859168e-09), \n            \'fear\': np.float32(0.037615385),\n            \'happy\': np.float32(0.0009396329), \n            \'sad\': np.float32(0.49794665),\n            \'surprise\': np.float32(2.9795643e-05),\n            \'neutral\': np.float32(99.153015)\n        },\n    \'dominant_emotion\': \'neutral\', \n    \'region\': \n    	{\n            \'x\': 79,\n            \'y\': 280,\n            \'w\': 879, \n            \'h\': 879, \n            \'left_eye\': (661, 642), \n            \'right_eye\': (341, 612)\n        },\n    \'face_confidence\': np.float64(0.9),\n    \'age\': 32, \n    \'gender\':\n    	{\n            \'Woman\': np.float32(0.0053363745),\n            \'Man\': np.float32(99.99466)\n        },\n    \'dominant_gender\': \'Man\', \n    \'race\': \n    	{\n            \'asian\': np.float32(0.0038025668),\n            \'indian\': np.float32(0.008881129), \n            \'black\': np.float32(0.00014986782), \n            \'white\': np.float32(97.29132), \n            \'middle eastern\': np.float32(0.94727564), \n            \'latino hispanic\': np.float32(1.748561)\n        },\n    \'dominant_race\': \'white\'\n}\n]\n\n```\n\n结果显示图片上为白种人、男性、32岁、面部无表情，结果与图片一致\n\n**请求参数说明**\n\n- `img_path (str or np.ndarray)`：图像路径\n- `actions (tuple)`:要分析的属性。默认值为（\'age\'、\'gender\'、\'emotion\'、\'race\'）。如果需要，您可以从分析中排除其中一些属性。\n- ` enforce_detection (bool)`:如果在图像中未检测到人脸，则引发异常。\n- `detector_backend`,`distance_metric`,`align`,`expand_percentage`,`silent`,`anti_spoofing`：不变\n\n**返回结果说明**\n\n返回类型为字典列表 (List[Dict[str, Any]])，每个字典包含以下键：\n\n- `region (dict)`:表示图像中检测到的人脸的矩形区域。\n  - `x`:人脸左上角的 x 坐标。\n  - `y`:人脸左上角的 y 坐标。\n  - `w`:检测到的人脸区域的宽度。\n  - `h`:检测到的人脸区域的高度。\n- `age (float)`:检测到的人脸的估计年龄。\n- `face_confidence (float)`:检测到的人脸的置信度得分。表示人脸检测的可靠性。\n- `dominant_gender (str)`:检测到的人脸中的主导性别。“男人”或“女人”。\n- `gender (dict)`:每个性别类别的置信度得分。\n  - `Man`:男性性别的置信度得分。\n  - `Woman`:女性性别的置信度得分。\n- `dominant_emotion (str)`:检测到的面部中的主要情绪。可能的值包括“悲伤”、“愤怒”、“惊讶”、“恐惧”、“高兴”、“厌恶”和“中性”\n- `emotion (dict)`:每个情绪类别的置信度得分。\n  - `sad`:悲伤的置信度得分。\n  - `angry`:愤怒的置信度得分。\n  - `surprise`:惊讶的置信度得分。\n  - `fear`:恐惧的置信度得分。\n  - `happy`:高兴的置信度得分。\n  - `disgust`:厌恶的置信度得分。\n  - `neutral`:中立性的置信度得分。\n- `dominant_race (str)`:检测到的脸部中的主要种族。可能的值包括“印度人”、“亚洲人”、“拉丁裔西班牙人”、“黑人”、“中东人”和“白人”。\n- `race (dict)`:每个种族类别的置信度得分。\n  - `indian`:印度族裔的置信度得分。\n  - `asian`:亚洲族裔的置信度得分。\n  - `latino hispanic`:拉丁裔/西班牙裔族裔的置信度得分。\n  - `black`:黑人族裔的置信度得分。\n  - `middle eastern`:中东族裔的置信度得分。\n  - `white`:白人族裔的置信度得分。\n\n## 人脸检测和对齐\n\n> **Face Detection and Alignment** - [`Demo`](https://youtu.be/GZ2p2hj2H5k)\n>\n> Face detection and alignment are important early stages of a modern face recognition pipeline. [Experiments](https://github.com/serengil/deepface/tree/master/benchmarks) show that detection increases the face recognition accuracy up to 42%, while alignment increases it up to 6%. [`OpenCV`](https://sefiks.com/2020/02/23/face-alignment-for-face-recognition-in-python-within-opencv/), [`Ssd`](https://sefiks.com/2020/08/25/deep-face-detection-with-opencv-in-python/), [`Dlib`](https://sefiks.com/2020/07/11/face-recognition-with-dlib-in-python/), [`MtCnn`](https://sefiks.com/2020/09/09/deep-face-detection-with-mtcnn-in-python/), `Faster MtCnn`, [`RetinaFace`](https://sefiks.com/2021/04/27/deep-face-detection-with-retinaface-in-python/), [`MediaPipe`](https://sefiks.com/2022/01/14/deep-face-detection-with-mediapipe/), `Yolo`, `YuNet` and `CenterFace` detectors are wrapped in deepface.\n>\n> 人脸检测和对齐 - 演示 人脸检测和对齐是现代人脸识别流程的重要早期阶段。实验表明，检测将人脸识别准确率提高了 42%，而对齐则将其提高了 6%。 OpenCV、Ssd、Dlib、MtCnn、Faster MtCnn、RetinaFace、MediaPipe、Yolo、YuNet 和 CenterFace 检测器都封装在 Deepface 中。\n\n代码示例\n\n```python\n# 人脸识别模型 - 人脸检测 - Face extract\n# img = 2-2.jpg\ndef deepface_model_extract(img: str):\n    \"\"\"\n    给定一张图检测图中任务\n    :param img:\n    :return:\n    \"\"\"\n    face_objs = DeepFace.extract_faces(\n        img_path=img,\n        detector_backend=\'opencv\',\n        align=True,\n    )\n    return face_objs\n\n```\n\n返回结果为：\n\n```\n[\n{\n    \'face\': array([[[0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 0.99607843, 0.99607843],\n        ...,\n        [0.99215686, 0.99215686, 1.        ],\n        [0.99215686, 0.99215686, 0.99215686],\n        [0.99607843, 0.99607843, 0.99607843]],\n\n       [[0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 0.99607843, 0.99607843],\n        ...,\n        [0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 0.99607843, 0.99607843],\n        [1.        , 1.        , 1.        ]],\n\n       [[0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 0.99607843, 0.99607843],\n        ...,\n        [0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 0.99607843, 0.99607843]],\n\n       ...,\n\n       [[1.        , 1.        , 1.        ],\n        [1.        , 1.        , 1.        ],\n        [1.        , 1.        , 1.        ],\n        ...,\n        [1.        , 1.        , 1.        ],\n        [0.99607843, 0.99607843, 0.99607843],\n        [1.        , 1.        , 1.        ]],\n\n       [[1.        , 1.        , 1.        ],\n        [1.        , 1.        , 1.        ],\n        [1.        , 1.        , 1.        ],\n        ...,\n        [0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 0.99607843, 0.99607843],\n        [0.99607843, 1.        , 1.        ]],\n\n       [[1.        , 1.        , 1.        ],\n        [1.        , 1.        , 1.        ],\n        [1.        , 1.        , 1.        ],\n        ...,\n        [0.99607843, 1.        , 1.        ],\n        [1.        , 1.        , 1.        ],\n        [0.99607843, 0.99607843, 0.99607843]]]),\n	\'facial_area\': \n		{\n            \'x\': 321,\n            \'y\': 77,\n            \'w\': 197,\n            \'h\': 197,\n            \'left_eye\': (452, 153),\n            \'right_eye\': (384, 153)\n        },\n	\'confidence\': np.float64(0.91)\n}\n]\n\n```\n\n\n\n**请求参数说明**\n\n- `img_path (str or np.ndarray)`：第一幅图像的路径\n- ` force_detection(bool)`:如果在图像中未检测到人脸，则引发异常。\n- `color_face (str)`:返回人脸图像输出的颜色。选项：\'rgb\'、\'bgr\' 或 \'gray\'（默认为 \'rgb\'）。\n- `normalize_face (bool)`:用于启用输出人脸图像标准化（除以 255）的标志人脸图像输出人脸图像标准化（默认为 True）。\n- `detector_backend`,`distance_metric`,`align`,`expand_percentage`,`silent`,`anti_spoofing`：不变\n\n**返回结果说明**\n\n返回结果类型为字典列表 (List[Dict[str, Any]])，每个字典包含：\n\n- `face (np.ndarray)`:检测到的脸部作为 NumPy 数组。\n- `facial_area (Dict[str, Any]) `:检测到的脸部区域作为字典，\n  - `x,y,w,h (int)`\n  - `left_eye,right_eye (int,int)`:左眼和右眼,分别是相对于人本身而不是观察者的左侧和右侧的眼睛。\n- `confidence (float)`:与检测到的脸部相关的置信度分数。\n- `is_real (bool)`:反欺骗分析结果。仅当输入参数中的 anti_spoofing 设置为 True 时，此键才在结果中可用。\n- `antispoof_score (float)`:反欺骗分析结果的分数。仅当输入参数中的 anti_spoofing 设置为 True 时，此键才在结果中可用。\n\n## 人脸特征提取\n\n> **Embeddings** - [`Demo`](https://youtu.be/OYialFo7Qo4)\n>\n> Face recognition models basically represent facial images as multi-dimensional vectors. Sometimes, you need those embedding vectors directly. DeepFace comes with a dedicated representation function. Represent function returns a list of embeddings. Result is going to be the size of faces appearing in the image path.\n>\n> …\n>\n> 嵌入 - 演示 人脸识别模型基本上将面部图像表示为多维向量。有时，您直接需要这些嵌入向量。 DeepFace 带有专用的表示功能。表示函数返回嵌入列表。结果将是图像路径中出现的面部尺寸。\n>\n> 。。。\n\n代码演示：\n\n```python\n# 人脸识别模型 - 人脸特征提取 - Face represent\ndef deepface_model_represent(img: str):\n    embedding_objs = DeepFace.represent(\n        img_path=img\n    )\n    return embedding_objs\n\n```\n\n返回结果\n\n```\n[\n{\n    \'embedding\': [0.0, 0.0, 0.013042318041708077, ... , 0.05823250615542309, 0.0],\n    \'facial_area\': \n    	{\n            \'x\': 576, \n            \'y\': 254,\n            \'w\': 347,\n            \'h\': 347,\n            \'left_eye\': (810, 388), \n            \'right_eye\': (681, 389)\n        },\n    \'face_confidence\': 0.9\n}\n]\n\n```\n\n**请求参数**没有大的变化\n\n**返回结果说明**\n\n返回类型为 字典列表 (List[Dict[str, Any]])，每个字典包含以下字段：\n\n- `embedding (List[float])`:表示面部特征的多维向量。维度数根据参考模型而不同（例如，FaceNet 返回 128 个维度，VGG-Face 返回 4096 个维度）。\n- `facial_area (dict)`:字典格式的面部检测检测到的面部区域。\n  - `x,y,w,h,left_eye,right_eye`\n- `face_confidence (float)`:面部检测的置信度得分。如果 `detector_backend` 设置为“skip”，则置信度将为 0 并且没有意义。\n\n## 人脸实时分析\n\n> **Real Time Analysis** - [`Demo`](https://youtu.be/-c9sSJcx6wI)\n>\n> You can run deepface for real time videos as well. Stream function will access your webcam and apply both face recognition and facial attribute analysis. The function starts to analyze a frame if it can focus a face sequentially 5 frames. Then, it shows results 5 seconds.\n>\n> 实时分析 - 演示 您也可以运行 deepface 来播放实时视频。流功能将访问您的网络摄像头并应用面部识别和面部属性分析。如果该函数可以连续对焦一张脸 5 帧，则该函数开始分析一帧。然后，它会显示结果 5 秒。\n\n代码说明\n\n```python\n# 人脸识别模型 - 人脸实时分析 - Face stream\n# db = img , video = 3.mp4 \ndef deepface_model_stream(db: str, video: str):\n    DeepFace.stream(db_path=db,\n                    source=video)\n\n```\n\n运行结果\n\n视频中有数据集中的人，视频中的32岁左右（32）、男性（M）、与img中的3-1.jpg相似，心情为happy\n\n![](./res/stream_res_3.jpg)\n\n**请求参数说明**\n\n- `db_path (str)`:包含图像文件的文件夹路径。数据库中所有检测到的人脸都将在决策过程中考虑。\n- `enable_face_analysis (bool)` :启用人脸分析的标志（默认为 True）。\n- `source (Any)`:视频流的来源（默认为 0，代表默认摄像头）。\n- `time_threshold (int)`:人脸识别的时间阈值（以秒为单位）（默认为 5）。\n- `frame_threshold (int)`:人脸识别的帧阈值（默认为 5）。\n- 其余不变\n\n**返回结果**：无\n\n## 人脸识别模型比较\n\n> 原文\n>\n> FaceNet, VGG-Face, ArcFace and Dlib are overperforming ones based on experiments - see [`BENCHMARKS`](https://github.com/serengil/deepface/tree/master/benchmarks) for more details. You can find the measured scores of various models in DeepFace and the reported scores from their original studies in the following table.\n>\n> 翻译过来就是\n> 根据实验，FaceNet、VGG-Face、ArcFace 和 Dlib 均表现出色 - 有关更多详细信息，请参阅基准测试。您可以在下表中找到 DeepFace 中各种模型的测量分数以及原始研究报告的分数。\n\n| Model(模型)  | Measured Score(实测分数) | Declared Score(公布分数) |\n| :----------: | :----------------------: | :----------------------: |\n|  Facenet512  |          98.4%           |          99.6%           |\n| Human-beings |          97.5%           |          97.5%           |\n|   Facenet    |          97.4%           |          99.2%           |\n|     Dlib     |          96.8%           |          99.3 %          |\n|   VGG-Face   |          96.7%           |          98.9%           |\n|   ArcFace    |          96.7%           |          99.5%           |\n| GhostFaceNet |          93.3%           |          99.7%           |\n|    SFace     |          93.0%           |          99.5%           |\n|   OpenFace   |          78.7%           |          92.9%           |\n|   DeepFace   |          69.0%           |          97.3%           |\n|    DeepID    |          66.5%           |          97.4%           |\n\n## docker部署\n\n> **Dockerized Service** - [`Demo`](https://youtu.be/9Tk9lRQareA)\n>\n> [![Docker Pulls](https://camo.githubusercontent.com/9825c1e9faee50fba7085e39510d9427287f1c6d46f44238ba5eeb478e34075d/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f736572656e67696c2f64656570666163653f6c6f676f3d646f636b6572)](https://hub.docker.com/r/serengil/deepface)\n>\n> The following command set will serve deepface on `localhost:5005` via docker. Then, you will be able to consume deepface services such as verify, analyze and represent. Also, if you want to build the image by your own instead of pre-built image from docker hub, [Dockerfile](https://github.com/serengil/deepface/blob/master/Dockerfile) is available in the root folder of the project.\n\n```bash\n# docker build -t serengil/deepface . # build docker image from Dockerfile\ndocker pull serengil/deepface # use pre-built docker image from docker hub\ndocker run -p 5005:5000 serengil/deepface\n\n```\n\n命令行演示\n\n```bash\n#face verification\n$ deepface verify -img1_path tests/dataset/img1.jpg -img2_path tests/dataset/img2.jpg\n\n#facial analysis\n$ deepface analyze -img_path tests/dataset/img1.jpg\n\n```\n\ndocker运行相关的shell命令 - [地址](https://github.com/serengil/deepface/blob/master/scripts/dockerize.sh#L17)\n\n```\nhttps://github.com/serengil/deepface/blob/master/scripts/dockerize.sh#L17\n\n```\n\n## 辅助函数\n\n- 显示图片\n\n```python\n# 展示图片\ndef show_img(img):\n    if isinstance(img, Image.Image):\n        img.show()\n    else:\n        img = Image.open(img)\n        img.show()\n\n```\n\n- 给人脸加框\n\n```python\n# 给人脸添加画框 - 分析面部属性使用\ndef picture_frame(src: str, res):\n    _img = Image.open(src)  # 这里 src 是图像路径，正常加载\n    # 访问 res 列表中的第一个字典\n    x, y, w, h = res[0][\'region\'][\'x\'], res[0][\'region\'][\'y\'], res[0][\'region\'][\'w\'], res[0][\'region\'][\'h\']\n    draw = ImageDraw.Draw(_img)\n    draw.rectangle((x, y, x + w, y + h), outline=\"blue\", width=3)\n    print(\"emo:{}\".format(res[0][\"emotion\"]))\n    show_img(_img)\n\n```\n\n\n\n', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 11:24:54', NULL);
INSERT INTO `t_article` VALUES (140, 1024, 221, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/e91387aad4cd7c347379ecdcc5946dd5.jpeg', '用户追踪技术揭秘：如何追踪你的每个点击和行为', '用户追踪技术，就像是一个看不见的助手，悄悄记录你在网上的每一步——你点了什么，逛了多久，甚至是不是在想买那个鞋子。这项技术帮助商家“读懂”你的心思，推送你最想要的内容和广告，简直比你自己还懂你！虽然它让你体验更个性化，但也可能让你感觉“隐形的眼睛”随时在盯着你。别担心，虽然它记录了一切，但它也在帮助你避免浪费时间，快速找到最感兴趣的东西。总之，它是一把双刃剑，既有便利，也有隐私的考量。', '# **用户跟踪**（User Tracking）\n\n在计算机中，用户追踪通常称为 **用户跟踪**（User Tracking）或 **用户行为追踪**（User Behavior Tracking）。它是指通过各种技术手段收集和分析用户在网络应用或软件上的行为和活动。\n\n> 可以在用户不登录的情况下进行用户追踪，因为是不登录的所以用户追踪肯定做不到一对一的，只可能尽可能的保证精确、准确性\n\n## 浏览器指纹\n\nBrowser Fingerprinting：通过收集用户浏览器的属性（如屏幕分辨率、操作系统、插件、语言设置等）生成一个独特标识，以便识别用户。\n\n这里以Github上的 [fingerprintjs](https://github.com/fingerprintjs/fingerprintjs)（拥有$23.2K$的star数） 项目为例\n\n项目介绍了项目的局限性和简单使用方法\n\n局限性：\n\n> 准确性 由于 FingerprintJS 在浏览器本身内部处理和生成指纹，因此准确性有限 (40% - 60%)。例如，当两个不同的用户使用相同的（即相同版本、相同供应商、相同平台）浏览器发送请求时，FingerprintJS 将无法区分这两个浏览器，主要是因为这些浏览器的属性是相同的。 安全 由于指纹是在浏览器本身内部处理和生成的，因此它们很容易受到欺骗和逆向工程的攻击。\n>\n> **但是**\n>\n> 指纹识别准确率高达 99.5% FingerprintJS 和指纹识别之间的主要区别在于从浏览器收集的属性数量、处理方式以及识别访问者的准确性。 指纹识别是一个闭源商业设备智能平台，旨在防止欺诈并改善用户体验。它是 FingerprintJS 的增强版本，经过全面重新设计，可以解决最具挑战性的识别用例。它的源代码在此或任何其他公共存储库中均不可用。 与 FingerprintJS 不同，指纹识别能够达到 99.5% 的准确率，因为它在服务器上处理浏览器属性，并分析大量辅助数据（例如 IP 地址、访问时间模式、URL 更改等）。由于这些先进的匹配技术，指纹识别能够可靠地消除具有相同特征的不同访问者的重复数据。\n\n你可以直接点击 [fingerprintjs 官方](https://fingerprintjs.github.io/fingerprintjs/) 直接查看。\n\n这是点击后的页面，`Visitor identifier`显示就是你的浏览器指纹，具有唯一性\n\n![1.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/1bad65275eac84255c352a71525e8fdd.jpg)\n\n当然人家也提供了代码使用教程，以下为简单示例\n\n```js\n<script>\n  // Initialize the agent at application startup.\n  // If you\'re using an ad blocker or Brave/Firefox, this import will not work.\n  // Please use the NPM package instead: https://t.ly/ORyXk\n  const fpPromise = import(\'https://openfpcdn.io/fingerprintjs/v4\')\n    .then(FingerprintJS => FingerprintJS.load())\n\n  // Get the visitor identifier when you need it.\n  fpPromise\n    .then(fp => fp.get())\n    .then(result => {\n      // This is the visitor identifier:\n      const visitorId = result.visitorId\n      console.log(visitorId)\n    })\n</script>\n```\n\n只需复制粘贴即可获得你的浏览器指纹，这里是我的实例\n\n```vue\n<script setup lang=\"ts\">\nimport { visitorId } from \'./components/fingerprintjs\' \n// 我只是将https://openfpcdn.io/fingerprintjs/v4 代码下载到本地\n</script>\n<template>\n  <div>\n    <div class=\"finger\">\n      <h2>浏览器指纹 : {{ visitorId }}</h2>\n    </div>\n  </div>\n</template>\n<style scoped>\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n\n.logo.vue:hover {\n  filter: drop-shadow(0 0 2em #42b883aa);\n}\n</style>\n\n```\n\n这是运行结果\n![2.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/09fb39d629a5e572f040debb92d1f588.jpg)\n当然你也可以将源码拉倒本地，阅读源码\n\n```bash\ngit clone https://github.com/fingerprintjs/fingerprintjs.git\n```\n\n`clone`下来后先`npm install` 再 `npm run playground:start`即可运行项目，运行成功后访问`http://localhost:8080/`就可以看见你的浏览器指纹\n\n![3.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/297d78da1ec37b668dafbb69903d831e.jpg)\n这里再说明下`npm`运行运行命令\n\n![4.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3f283b73d39953d174a303594fc8d40a.jpg)\n**build**：使用 `rimraf` 清空 `dist` 目录，然后使用 `rollup` 根据 `rollup.config.ts` 构建项目。`--configPlugin` 参数指定使用 `@rollup/plugin-typescript` 插件，并指定了 `tsconfig.rollupConfig.json` 作为 TypeScript 配置文件。\n\n**build:watch**：监视模式下执行 `build`，在文件更改时自动重新构建。\n\n**playground:start**：进入 `playground` 目录，启动 `webpack-dev-server` 开发服务器，以开发模式运行。\n\n**playground:build**：进入 `playground` 目录，使用 `webpack` 以生产模式构建项目。\n\n**lint**：使用 `eslint` 检查 JavaScript 和 TypeScript 文件的代码规范，忽略 `.gitignore` 中的文件并且不允许任何警告。\n\n**lint:fix**：自动修复代码中 ESLint 检测到的错误。\n\n**test:local**：使用 `karma` 在本地测试，适合在本地浏览器中运行单次测试。\n\n**test:browserstack** 和 **test:browserstack:beta**：分别在 `browserstack` 和 `browserstack-beta` 配置下运行 `karma` 测试，用于在 BrowserStack 上的不同配置中进行单次测试。\n\n**check:dts**：使用 `tsc` 编译 TypeScript 并检查 `dist/fp.d.ts` 文件，确保独立模块模式正确，并且没有输出。\n\n**check:ssr**：检查项目是否能在服务器端渲染（SSR）环境中运行。如果代码使用了浏览器 API，则会输出错误并终止构建.\n\n------\n\n可以看见三种方式得出最后的浏览器指纹都一样，这是因为我使用的同一个浏览器打开的并且没有修改浏览器参数也没有修改代码生成的参数，源代码中你可以修改需要添加的参数，从而控制最后生成的Visitor identifier\n\n注：我使用的时候碰到过\n\n```\nFirefox上：\nvite] connecting... client:495:8\n已拦截跨源请求：同源策略禁止读取位于 https://openfpcdn.io/fingerprintjs/v4 的远程资源。（原因：CORS 请求未能成功）。状态码：(null)。\n\n位于“https://openfpcdn.io/fingerprintjs/v4”的资源已被内容拦截功能拦截。\nlocalhost:5173\n此文档不允许使用模块来源的 URI：“https://openfpcdn.io/fingerprintjs/v4”。 localhost:5173\n[vite] connected. client:614:14\nUncaught (in promise) TypeError: error loading dynamically imported module: https://openfpcdn.io/fingerprintjs/v4 \n=============================================================================\nEdge上：\n现在报错App.vue:2         \nGET http://localhost:5173/utils/fingerprint.min.js net::ERR_BLOCKED_BY_CLIENT\nsetup @ App.vue:2\ncallWithErrorHandling @ runtime-core.esm-bundler.js:199\nsetupStatefulComponent @ runtime-core.esm-bundler.js:7870\nsetupComponent @ runtime-core.esm-bundler.js:7831\nmountComponent @ runtime-core.esm-bundler.js:5179\nprocessComponent @ runtime-core.esm-bundler.js:5145\npatch @ runtime-core.esm-bundler.js:4663\nrender2 @ runtime-core.esm-bundler.js:5942\nmount @ runtime-core.esm-bundler.js:3904\napp.mount @ runtime-dom.esm-bundler.js:1757\n(匿名) @ main.ts:5\n显示 9 更多框架\n显示简略信息\nlocalhost/:1  Uncaught (in promise) TypeError: Failed to fetch dynamically imported module: http://localhost:5173/utils/fingerprint.min.js\n```\n\n我查了查关闭电脑代理或在文件上添加上代理即可\n\n## Cookies 和会话存储\n\nCookies & Session Storage：通过设置在用户浏览器中的小文件或会话存储数据，追踪用户在网站上的访问情况。\n\n这是我写的简单示例，提前先说明一下\n\n**解释**\n\n1. Cookies：用于持久化存储用户的访问次数。每次用户访问页面时，`visitCount` 值会增加。这个值存储在浏览器的 Cookies 中，最多保存 7 天。\n2. 会话存储 (Session Storage)：用于存储用户的当前访问时间，只在当前会话中有效。每次刷新页面时，访问时间会更新并存储在会话存储中。\n3. 页面加载时：在 `window.onload` 事件中，JavaScript 会获取当前的访问次数和时间，并更新页面内容。\n\n**运行示例**\n\n1. 每次用户访问页面时，`visitCount` 会增加，且在页面中显示用户的访问次数和上次访问时间。\n2. 用户刷新页面时，会显示当前的访问时间（来自于会话存储），并且访问次数会保留在 Cookies 中。\n\n**结果**\n\n- 页面会显示用户的访问次数（通过 Cookie 跟踪）。\n- 会话存储会显示用户的上次访问时间。\n\n这是代码部分\n\n`finger.vue`\n\n```vue\n<template>\n  <div>\n    <h2>这是Cookies 和会话存储的例子</h2>\n    <p id=\"visitor-info\"></p>\n  </div>\n</template>\n<script setup lang=\"js\">\nimport \'./tracking.js\';  \n</script>\n<style scoped></style>\n```\n\n主要的js文件`tracking.js`\n\n```js\n// 获取当前日期时间作为用户访问时间\nfunction getCurrentTime() {\n  const now = new Date();\n  return now.toLocaleString();\n}\n\n// 获取或设置 Cookies\nfunction getCookie(name) {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) return parts.pop().split(\';\').shift();\n}\n\n// 设置 Cookies\nfunction setCookie(name, value, days) {\n  const d = new Date();\n  d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));\n  const expires = `expires=${d.toUTCString()}`;\n  document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\n// 设置会话存储\nfunction setSessionStorage(key, value) {\n  sessionStorage.setItem(key, value);\n}\n\n// 页面加载时追踪用户信息\nwindow.onload = function () {\n  let visitCount = parseInt(getCookie(\'visitCount\')) || 0;\n  visitCount += 1;\n  setCookie(\'visitCount\', visitCount, 7);  // Cookie保存7天\n\n  // 设置当前访问时间到会话存储\n  const visitTime = getCurrentTime();\n  setSessionStorage(\'lastVisitTime\', visitTime);\n\n  // 显示用户访问信息\n  const visitorInfo = document.getElementById(\'visitor-info\');\n  visitorInfo.innerHTML = `\n    <p>You have visited this site ${visitCount} time(s).</p>\n    <p>Your last visit was at: ${sessionStorage.getItem(\'lastVisitTime\')}</p>\n  `;\n};\n```\n\n运行结果\n第一次访问时，中间显示 `You have visited this site 1 time(s).`访问了1次\n\n![5.1.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0073154ca5b8dd2da34a6058c8d3f0bf.jpg)\n刷新页面有\n\n![5.2.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/4bc77c6a30a4d8c9a6d6a75f24c4dede.jpg)\n## IP 地址追踪\n\n利用用户的 IP 地址进行地理位置的定位，以识别用户的来源。\n\n你可使用 [ipinfo.io](https://ipinfo.io/). 代码为\n\n```js\n// 使用 ipinfo.io 获取用户的 IP 地址和位置信息\nfunction getGeoLocation() {\n  fetch(\'https://ipinfo.io/json?token=YOUR_ACCESS_TOKEN\') // 替换为你的 ipinfo.io API token\n    .then(response => response.json())\n    .then(data => {\n      const location = data.city + \', \' + data.region + \', \' + data.country;\n      const ip = data.ip;\n      document.getElementById(\'location-info\').innerHTML = `\n        您的 IP 地址是: ${ip}<br>\n        您的地理位置是: ${location}\n      `;\n    })\n    .catch(error => {\n      console.error(\'获取位置时出错:\', error);\n      document.getElementById(\'location-info\').innerHTML = \'无法获取位置信息。\';\n    });\n}\n\n// 页面加载时调用函数获取地理位置\nwindow.onload = getGeoLocation;\n```\n\n但是ipinfo.io有使用限制只能试用7天过后就要收费就很难受，所以我使用 **ip-api**  [ip-api 官网](http://ip-api.com)\n\nip-api也是有请求次数限制但是相比那个好的多\n\n> 免费版每天可以进行最多 **45,000 次** 请求，且每分钟最多进行 **150 次请求**。如果你超过这个限制，就需要等待重置，或者升级到付费版。\n\n`vue`文件\n\n```vue\n<template>\n  <div>\n    <h2>这是Ip例子</h2>\n    <p>IP 地址: {{ ip }}</p>\n    <p>地理位置: {{ location }}</p>\n  </div>\n</template>\n\n<script setup lang=\"js\">\nimport { ref } from \'vue\';\n\n// 定义响应式数据\nconst ip = ref(\'\');\nconst location = ref(\'\');\n\n// 导入 geo-location.js 文件\nimport \'./geo-location.js\';\n\n// 使用 `window` 来访问 geo-location.js 中的全局变量或函数\nwindow.updateGeoLocation = (newIp, newLocation) => {\n  ip.value = newIp;\n  location.value = newLocation;\n};\n</script>\n\n<style scoped></style>\n```\n\n重要的`js`文件，`geo-location.js`\n\n```js\n<template>\n  <div>\n    <h2>这是Ip例子</h2>\n    <p>IP 地址: {{ ip }}</p>\n    <p>地理位置: {{ location }}</p>\n  </div>\n</template>\n\n<script setup lang=\"js\">\nimport { ref } from \'vue\';\n\n// 定义响应式数据\nconst ip = ref(\'\');\nconst location = ref(\'\');\n\n// 导入 geo-location.js 文件\nimport \'./geo-location.js\';\n\n// 使用 `window` 来访问 geo-location.js 中的全局变量或函数\nwindow.updateGeoLocation = (newIp, newLocation) => {\n  ip.value = newIp;\n  location.value = newLocation;\n};\n</script>\n\n<style scoped></style>\n\n```\n\n运行结果\n\n![6.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/a1cdc5eaedda0f8bec3951d663d575d0.jpg)\n\n\n\n## 不登录进行用户追踪分析\n\n### 不登录进行用户追踪的好处\n\n1. **隐私保护**：不登录可以保护用户的个人信息不被收集和滥用，尤其是在用户不愿意提供个人信息的情况下。\n2. **匿名性**：用户可以在不透露个人身份的情况下浏览和使用网站或应用，这对于那些希望保持匿名的用户来说是非常重要的。\n3. **便捷性**：用户不需要创建账户或记住密码，只需点击即可开始使用，这大大简化了用户的操作流程。\n4. **减少摩擦**：对于一些用户来说，创建账户可能会感到繁琐，不登录可以减少这种摩擦，提高用户的满意度。\n\n### 不登录进行用户追踪的坏处\n\n1. **数据准确性**：由于无法获取用户的个人信息，追踪的数据可能不够准确，无法提供个性化的服务或内容。\n2. **缺乏个性化**：不登录的用户无法享受到个性化的服务或内容，这可能会影响用户的体验和满意度。\n3. **难以追踪用户行为**：不登录的用户行为难以追踪，这对于网站或应用的数据分析和优化来说是不利的。\n4. **缺乏用户参与度**：不登录的用户可能不太愿意参与到网站或应用的社区中，这可能会影响用户的参与度和忠诚度。', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 11:37:17', NULL);
INSERT INTO `t_article` VALUES (141, 1024, 222, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7ee679a6dea94655f7f20f4e2063bb4d.jpeg', 'Web3基础概念：走向去中心化的未来', 'Web3是互联网的未来，它的核心思想是去中心化——不再由少数大公司控制数据和内容，而是通过区块链等技术让每个用户都能掌握自己的数据、身份和资产。在Web3的世界里，你不仅是内容的消费者，还是内容的创造者和拥有者。通过智能合约、加密货币和去中心化应用（DApps），Web3为我们带来了更加自由、透明和安全的网络体验。不再依赖传统的中介机构，用户的隐私和控制权将得到前所未有的提升，开启全新的互联网时代。', '# Web 3.0\n\n## 简单介绍\n\nWeb3，也被称为去中心化网络，是一个基于区块链技术的新一代互联网。它的核心理念是将权力和数据控制从少数大型公司手中交还给用户，通过去中心化的应用程序（DApps）直接进行交互和交易，无需依赖于中介或第三方服务\n\n![web3_info.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7f49c2918a4212f57d81a1f2655b4d99.png)\nWeb3的实现依赖于几项关键技术，其中最重要的是区块链和智能合约。区块链是一种分布式账本技术，通过加密算法和共识机制确保数据的安全性和透明性。所有的交易和操作都被记录在链上，且无法被修改或删除，从而避免了数据造假或篡改的可能性。智能合约则是基于区块链自动执行的程序，能够根据预设条件执行任务，无需第三方干预\n\n![](./assets/sha256.jpg)![atlas.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/dc17d5db846acc82b6d2c1eef6886223.png)\n\nWeb3的应用场景涵盖了金融、社交、游戏等多个领域。例如，去中心化金融（DeFi）允许用户在没有银行或其他金融机构的情况下进行借贷、交易等操作；非同质化代币（NFT）则在数字艺术、游戏资产等领域提供了一种新的所有权和交易方式\n\n### 元宇宙\n\n#### 元宇宙概念比较\n\n- **数字孪生**：数字孪生是一种基于数字技术的概念，它是指对于现实世界中的物理实体或系统，通过数字化的方式建立一个虚拟的、与之相对应的数字化模型，从而实现对物理实体或系统的监测、仿真、预测和优化等操作。数字孪生通常包括两个部分：物理实体和数字化模型。物理实体可以是任何实际存在的事物，例如机器、设备、建筑、城市、生态系统等等。数字化模型则是基于物理实体的数据和信息进行建模，包括几何形状、结构、材料、运行状态、环境参数等等，可以对物理实体进行仿真、预测、优化等操作\n\n  ![digital_twin.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6f4e61db4887f24fc46630d9aa55cba7.jpg)\n\n- **元宇宙**：元宇宙是一个基于区块链、数字身份认证和智能合约等技术的虚拟空间，目的是在数字世界构建一个具有经济、社交和文化价值的生态系统。元宇宙不仅仅是一个虚拟环境，更是一个包含了现实世界和虚拟世界相互交织的综合生态系统。元宇宙的交互方式更加丰富多样，通常使用游戏手柄、键盘、鼠标等传统设备，还支持语音、触摸和动作识别等方式，让用户可以更加灵活地自由互动，并且强调不同虚拟平台之间的互通和互操作，形成一个统一的生态系统。元宇宙的核心概念是用户可自由交换，这就意味着数据和资源的所有者是社区中的所有人，它的环境也可以由社区成员自己构建设计，成为一个更加开放和互动的环境。元宇宙鼓励用户生成内容，用户可以在元宇宙中创造和交易虚拟物品，甚至构建自己的虚拟空间\n\n![metaverse.jpeg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7ee679a6dea94655f7f20f4e2063bb4d.jpeg)\n- **web 3.0**：Web 3.0是下一代互联网的概念，它强调去中心化和用户控制，通过区块链、人工智能、物联网等技术，实现更加智能、安全和透明的网络环境。Web \n  3.0的目标是建立一个更加开放、公平和可持续的互联网生态系统，让用户拥有更多的数据控制权和经济利益。Web 3.0的应用场景包括去中心化金融（DeFi）、非同质化代币（NFTs）、分布式存储、智能合约等\n\n![web3.jpeg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7f85d434d1e04cea9b6c6025415e5d6d.jpeg)\n**数字孪生、元宇宙和Web 3.0**：都是基于数字化和网络化技术的概念，但它们的侧重点和应用场景有所不同。数字孪生主要关注物理实体的数字化建模和仿真，元宇宙则强调虚拟空间的构建和用户交互，而Web\n3.0则侧重于去中心化和用户控制的网络环境。这些概念的发展和应用，都将对未来的社会、经济和技术产生深远的影响。\n\n### NFT\n\n#### 什么是NFT\n\nNFT，全称为Non-Fungible Token，中文翻译为***非同质化代币***，是一种基于区块链技术的数字资产，具有***唯一性和不可替代性***。NFT可以代表任何形式的数字或实体资产，如艺术品、音乐、视频、游戏道具、域名等。\n\nNFT的核心特点是其唯一性和不可替代性。每个NFT都有一个唯一的标识符，这意味着它们不能被复制或替换。这使得NFT成为了一种独特的数字资产，可以用于证明数字资产的所有权和真实性。\n\nNFT的另一个重要特点是其可追溯性。由于NFT是基于区块链技术的，因此它们的交易记录可以被公开验证和追溯。这使得NFT成为了一种安全可靠的数字资产，可以用于证明数字资产的来源和历史。\n\nNFT的应用场景非常广泛，包括数字艺术品、音乐、视频、游戏道具、域名等。NFT的出现为数字资产的交易和管理提供了一种新的解决方案，同时也为数字资产的保护和传承提供了一种新的方式。\n\n![nft_art.jpeg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6d5e6f8ebf2708b6b9738648f48f00d7.jpeg)\n## 区块链\n\n### 了解区块链\n\n区块链是一种去中心化的分布式账本技术，它通过密码学方法保证数据传输和访问的安全，通过共识算法保证系统内数据的一致性，通过智能合约实现可编程的自动化交易和执行\n\n区块链的核心原理包括以下几个方面：\n\n1. **去中心化**：区块链没有中央控制点，所有节点都参与数据的验证和记录，确保数据的安全性和可靠性。\n2. **分布式账本**：区块链是一个分布式的数据库，所有节点都保存着完整的账本副本，确保数据的一致性和不可篡改性。\n3. **共识机制**：区块链通过共识算法，如工作量证明（PoW）、权益证明（PoS）等，确保所有节点对交易的一致性认可。\n4. **加密技术**：区块链使用加密技术，如哈希函数、公钥加密等，确保数据的安全性和隐私性。\n5. **智能合约**：区块链支持智能合约，可以自动执行预先设定的规则和条件，实现自动化的交易和执行。\n\n区块链的主要特征包括：\n\n1. **去中心化**：区块链没有中央控制点，所有节点都参与数据的验证和记录，确保数据的安全性和可靠性。\n2. **透明性**：区块链中的交易数据对所有节点都是公开的，这使得交易过程更加透明和公正。\n3. **不可篡改性**：一旦数据被记录在区块链上，就很难被篡改，因为每个区块都包含了前一个区块的哈希值，形成了一个不可篡改的链条。\n4. **匿名性**：区块链中的交易可以匿名进行，保护了用户的隐私权。\n5. **安全性**：区块链使用了密码学技术保证数据的安全性和完整性，使得数据难以被篡改或攻击。\n\n区块链的应用非常广泛，包括但不限于以下几个领域：\n\n1. **金融领域**：区块链可以用于实现去中心化的交易、清算和结算，提高了交易效率，降低了交易成本。\n2. **供应链管理**：区块链可以提供透明的供应链信息，使得供应商、制造商、物流公司等可以更好地协同工作，提高了供应链的效率和透明度。\n3. **医疗保健**：区块链可以保证医疗数据的不可篡改性和安全性，使得患者和医生可以更好地共享和利用医疗信息。\n4. **公共服务**：区块链可以提高公共服务的透明度和效率，如身份认证、学历认证等。\n5. **物联网**：区块链可以用于实现物联网设备的去中心化管理和安全通信。\n\n### 共识机制\n\nPOW(工作量证明机制)、POS(权益证明机制)、POA(权威证明机制)、POC(容量证明机制)、CPOC(有条件的容量证明机制)\n\n### 实例项目\n\n[github项目](https:\\\\github.com\\anders94\\blockchain-demo)\n\n区块：\n\n区块的组成\n\n1. **区块头**：包含了前一个区块的哈希值、本区块的时间戳以及其他元数据。\n2. **区块体**：包含了实际的交易数据。\n\n区块的作用\n\n1. **记录交易信息**：每个区块都记录了一段时间内的交易信息。\n2. **链接到前一个区块**：通过哈希值链接到前一个区块，形成了区块链的链式结构。\n3. **保证数据的不可篡改性**：这种结构保证了区块链数据的不可篡改性和安全性\n\n![bcd1.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5a6f794c6c500c405b8425bb75c01777.jpg)\n一个hash对应一个信息，当数据改变时区块的hash就不能对应原数据而爆红，可通过挖矿结局\n\n![bcd2.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0a365372a0424a2ee12b76c569feafdb.jpg)\n![bcd3.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/985df8cefccbdbf47d6a798e3acc93cf.jpg)\n区块链亦是如此，一个节点出问题就要一直挖\n\n![bcd4.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3b2bce2574a075174bf50a4f55d1c4cd.jpg)\n![bcd5.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/234b8edbf6600d09b269ea6404825efc.jpg)\n![bcd6.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/4a5f762d46b4f7671a3993055dbc7658.jpg)\n## 比特币\n\n比特币是一种去中心化的数字货币，它基于区块链技术，由中本聪在2008年提出，并于2009年开始运作。比特币的交易记录公开透明，通过点对点的传输实现去中心化的支付系统。比特币不依靠特定货币机构发行，而是通过特定算法，利用大量的计算产生。比特币经济使用整个P2P网络中众多节点构成的分布式数据库来确认并记录所有的交易行为，并使用密码学的设计来确保货币流通各个环节的安全性。比特币的总数量有限，最初设定为2100万个，之后的总数量将被永久限制在这个数量。\n\n[官网](https:\\\\bitcoin.org\\en\\)  [交易平台](https:\\\\blockchain.com\\en\\)\n\n## 以太坊\n\n以太坊是一个开源的区块链平台，由Vitalik Buterin等人于2015年推出。它不仅是一种加密货币，更是一个支持去中心化应用（dApps）和智能合约的平台。以太坊的核心组件包括以太币（Ether,ETH）、智能合约、去中心化应用（dApps）、以太坊虚拟机（EVM）\n\n相关网站：[OpenSea](https://opensea.io/) [Botto](https://botto.com/)\n\n## 钱包\n\n### 热钱包（HotWallet）\n\n热钱包是指与互联网直接连接的钱包。因为随时连接网络，所以它们可以即时进行交易，方便用户快速访问和管理资金。这种钱包通常用于日常的交易和支付，因为它们便于快速转账。常见的热钱包包括：\n\n- **Web 钱包**：例如 MetaMask、Coinbase Wallet，它们可以通过浏览器扩展或 Dapp 应用程序与区块链进行互动。\n- **移动和桌面钱包**：例如 Trust Wallet、Exodus，这类钱包可以直接在手机或电脑上使用，并随时可以连接到互联网。\n\n**优点**：\n\n- **便利性**：可以随时访问，适合频繁交易的用户。\n- **集成性**：通常支持与去中心化应用（Dapps）和其他区块链服务的集成。\n\n**缺点**：\n\n- **安全性较低**：因为始终连接网络，所以容易受到黑客攻击，存在更高的风险。\n\n### 冷钱包（ColdWallet）\n\n冷钱包指的是不直接连接互联网的钱包，用于长期和大额的加密货币存储。冷钱包一般是离线存储，可以是硬件设备，也可以是纸质钱包等离线形式。常见的冷钱包包括：\n\n- **硬件钱包**：例如 Ledger、Trezor，它们是一种USB设备，可以在交易时连接到电脑，平时离线保存。\n- **纸钱包**：将私钥或助记词写在纸上，作为物理备份，但管理不便。\n\n**优点**：\n\n- **安全性高**：因为离线存储，不易受到网络攻击，适合储存较大金额的加密资产。\n- **风险分散**：通过隔离网络连接，降低了被盗风险。\n\n**缺点**：\n\n- **不便于交易**：使用过程较复杂，不适合频繁交易。\n- **物理风险**：丢失或损坏纸质冷钱包或硬件设备可能导致资产永久丢失。\n\n## 智能合约\n\n智能合约是一种旨在以信息化方式传播、验证或执行合同的计算机协议。它允许在没有第三方的情况下进行可信交易，这些交易可追踪且不可逆转。智能合约的概念由尼克·萨博（Nick Szabo）在1994年首次提出\n\n## 附录\n\n### SHA256加密算法\n\n#### SHA256 哈希算法概述\n\nSHA256（Secure Hash Algorithm 256-bit）是一种广泛使用的密码学哈希函数，它能够将任意长度的输入数据转换为固定长度的输出，通常为256位的哈希值。这种哈希函数的设计旨在提供高度的安全性，特别是在数字签名、数据完整性验证和密码存储等领域。\n\n#### SHA256 哈希算法的特点\n\nSHA256算法具有以下几个关键特点：\n\n1. **抗碰撞性**：SHA256算法具有很强的抗碰撞性，即很难找到两个不同的输入数据，它们的哈希值相同。这意味着即使攻击者知道哈希值，也很难找到对应的原始数据。\n2. **不可逆性**：SHA256算法是单向的，即无法从哈希值反推出原始数据。这使得哈希值可以安全地用于验证数据的完整性，而不必担心数据被泄露。\n3. **固定长度输出**：SHA256算法总是输出固定长度的哈希值，这使得它易于在不同的应用场景中使用，并且可以方便地进行比较和验证。\n4. **高效性**：SHA256算法的计算速度快，适合处理大量数据。这使得它在需要快速验证数据完整性的场景中非常有用。\n\n#### SHA256 哈希算法的应用\n\nSHA256算法在多个领域都有广泛的应用，包括但不限于：\n\n- **数字签名**：SHA256算法常用于生成数字签名，以确保数据的来源和完整性。\n- **数据完整性验证**：在数据传输或存储过程中，SHA256算法可以用于验证数据是否被篡改。\n- **密码存储**：在存储用户密码时，通常不会直接存储明文密码，而是存储密码的SHA256哈希值。这样即使数据库被泄露，攻击者也无法直接获取用户的密码。\n- **区块链**：SHA256算法是比特币等加密货币中用于工作量证明（Proof-of-Work）机制的核心算法之一。\n\n#### SHA256 哈希算法的实现\n\nSHA256算法的实现通常涉及以下几个步骤：\n\n1. **预处理**：将输入数据填充到512位的块中，并添加一个64位的长度字段。\n\n2. **初始化哈希值**：定义一个256位的初始哈希值，称为“工作变量”。\n\n3. 处理每个块\n\n   ：将数据块分成512位的块，并对每个块进行以下步骤： \n\n   - 定义四个32位的初始值，称为“圆周率”。\n   - 消息扩展：将512位的数据块扩展为1600位的消息扩展。\n   - 压缩函数：使用压缩函数对消息扩展和初始值进行64轮迭代，生成新的哈希值。\n\n4. **输出**：将最终哈希值输出为256位的散列值。\n\n#### SHA256 哈希算法的安全性\n\nSHA256算法自2001年发布以来，一直被认为是安全的，并且没有已知的有效碰撞攻击。然而，随着计算能力的不断提升，未来可能会出现新的攻击方法。因此，定期评估和更新使用的哈希算法是非常重要的。\n![sha256.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/aff28e916b6b70e394974e346b190312.jpg)', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 11:44:17', NULL);
INSERT INTO `t_article` VALUES (142, 1024, 223, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/e660b25578cfd437c8d1db95a4521b90.png', 'Git版本控制', 'Git 是一种分布式版本控制系统，用于跟踪文件的变更并协作开发。它可以帮助开发者管理代码历史，记录每次修改的差异，并允许多个开发者并行工作而不冲突。与传统的版本控制系统不同，Git 允许每个开发者都拥有项目的完整本地副本，从而提高了工作效率和容错能力。通过 Git，开发者可以轻松地查看、比较和恢复代码的不同版本，进行分支操作以实现并行开发，最终通过合并（merge）将工作整合。它是现代软件开发中不可或缺的工具，尤其在开源项目和团队合作中发挥着重要作用。', ' \n\n# 1、认识git\n\n------\n\n​        Git是一个开源的分布式版本控制系统，用于高效地处理从小型到大型的项目版本管理。它最初由Linux操作系统内核的创造者Linus Torvalds在2005年开发。Git的设计注重性能、安全性和灵活性，允许开发者在本地提交更改，并通过克隆整个仓库来在本地机器上保持项目的完整历史记录。Git的核心优势在于其分布式架构，这意味着每个开发者的工作副本都是一个完整的存储库，包含了所有变更的完整历史记录.\n\n[Git官网](https://git-scm.com/)\n\n------\n\n# 2、git功能\n\n## 2.1、功能\n\n------\n\n1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。\n\n2、在自己的机器上根据不同的开发目的，创建分支，修改代码。\n\n3、在单机上自己创建的分支上提交代码。\n\n4、在单机上合并分支。\n\n5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。\n\n6、生成补丁（patch），把补丁发送给主开发者。\n\n7、看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。\n\n8、一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。\n\n从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能：\n\n1、查看邮件或者通过其它方式查看一般开发者的提交状态。\n\n2、打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是[开源项目](https://baike.baidu.com/item/开源项目/3406069?fromModule=lemma_inlink)，还要决定哪些补丁有用，哪些不用）。\n\n3、向公共服务器提交结果，然后通知所有开发人员。\n\n## 2.2、优缺点\n\n优点：\n\n适合[分布式开发](https://baike.baidu.com/item/分布式开发/4143301?fromModule=lemma_inlink)，强调个体。\n\n公共服务器压力和数据量都不会太大。\n\n速度快、灵活。\n\n任意两个开发者之间可以很容易的解决冲突。\n\n离线工作。\n\n缺点：\n\n资料少（起码中文资料很少）。\n\n学习周期相对而言比较长。\n\n不符合[常规思维](https://baike.baidu.com/item/常规思维/9532113?fromModule=lemma_inlink)。\n\n代码[保密性](https://baike.baidu.com/item/保密性/4928247?fromModule=lemma_inlink)差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。\n\n------\n\n# 3、基础操作\n\n## 3.1、配置git\n\n------\n\n​        在使用Git之前，通常需要进行一些基本配置。通常包括设置用户名和电子邮件地址：\n\n```bash\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your_email@example.com\"\n```\n\n\n## 3.2、创建git仓库\n\n> 下载并配置完成Git后会有相应的Bash\n>\n> [鼠标右击] => [显示更多选项] => [Git Bash Here]\n>\n\n### **3.2.1、初始化新仓库**\n\n------\n\n​        在项目目录下执行 `git init` 命令来初始化一个新的Git仓库。\n\n```bash\ngit init\n```\n\n\n​        使用init创建出仓库后文件夹会创建出.git文件夹【默认是隐藏的需打开文件夹的\n\n[查看]=>[显示]=>[隐藏的项目]】，并且默认分支为master。\n\n------\n\n### **3.2.2、克隆现有仓库**\n\n------\n\n​         使用 `git clone [repository URL]` 命令来克隆一个远程仓库到本地。\n\n```bash\ngit clone [repository URL]\n```\n\n 例如：\n\n```bash\ngit clone https://github.com/heyqing/git.git\n\n# 或者使用 SSH 地址：\ngit clone git@github.com:heyqing/git.git\n```\n\n## 3.3、文件操作\n\n### **3.3.1、查看文件状态**\n\n------\n\n​        使用 `git status` 命令来查看当前文件的状态，包括新增、修改、删除等。\n\n```bash\ngit status\n```\n\n### **3.3.2、跟踪新文件**\n\n------\n\n​        使用 `git add [filename]` 命令来跟踪新文件或已修改的文件。\n\n```bash\ngit add [filename]\n```\n\n### **3.3.3、提交更新**\n\n------\n\n​        使用 `git commit -m \"Commit message\"` 命令来提交已跟踪的文件到本地仓库。\n\n```bash\ngit commit -m \"Commit message\"\n```\n\n------\n\n>\n> ​         文件夹中想创建一个文本，直接查看状态为提示需要 add 的有README.md ，使用 add 添加过后再次查看提示可以提交的有README.md，commit 提交过后提示无可commit文件。\n\n## 3.4、查看提交历史\n\n------\n\n​        使用 `git log` 命令来查看提交历史记录。\n\n```bash\ngit log\n```\n\n\n​        显示commit的id，提交的分支，提交的作者信息，时间，提交的信息\n\n------\n\n## 3.5、远程仓库操作\n\n> ​        Git 远程仓库是指托管在因特网或其他网络中的你的项目的版本库。它允许你与其他开发者协作开发和共享代码，也可以作为你的代码的备份和发布的平台。你可以有多个远程仓库，有些是只读的，有些是可读写的。\n>\n> Git 远程仓库的主要作用包括：\n>\n> 1. **分享和协作**：你可以将你的代码推送到远程仓库，让其他人能够看到你的工作，或者邀请其他人参与你的项目。你也可以从远程仓库拉取或合并其他人的修改，实现代码的同步和协作。\n> 2. **备份和恢复**：你可以将你的代码存储在远程仓库，作为你本地仓库的一个备份。这样，即使你的本地仓库丢失或损坏，你也可以从远程仓库恢复你的代码。\n> 3. **分支和标签**：你可以在远程仓库创建和管理分支和标签，用来表示你的项目的不同阶段或功能。你可以在不同的分支上进行并行的开发，或者在不同的标签上进行版本的发布。\n> 4. **审查和质量**：你可以在远程仓库进行代码的审查和质量检查，用来保证你的代码的质量和风格。你可以使用远程仓库的一些功能，如pull request，code review，issue，merge request等，来进行代码的评审和反馈。\n>\n> 常见的远程仓库有：\n>\n> [Github](https://github.com/):被称为世界最大的代码托管平台\n>\n> [Gitee](https://gitee.com/):提供中国本土化的代码托管服务\n\n### **3.5.1、查看远程仓库**\n\n------\n\n​        使用 `git remote -v` 命令来查看已配置的远程仓库。\n\n```bash\ngit remote -v\n\n```\n\n### **3.5.2、添加远程仓库**\n\n------\n\n​        使用 `git remote add [remote name] [repository URL]` 命令来添加一个新的远程仓库。\n\n```bash\ngit remote add [remote name] [repository URL]\n\n```\n\n### 3.5.3、**从远程仓库获取数据**\n\n------\n\n​        使用 `git fetch [remote name]` 命令从远程仓库获取最新数据。\n\n```bash\ngit fetch [remote name]\n\n```\n\n### **3.5.4、推送数据到远程仓库**\n\n------\n\n​        使用 `git push [remote name] [branch name]` 命令推送本地分支到远程仓库。\n\n```bash\ngit push [remote name] [branch name]\n\n```\n\n------\n\n## 3.6、分支管理\n\n### **3.6.1、创建分支**\n\n------\n\n​        使用 `git branch [branch name]` 命令创建一个新分支。\n\n```bash\ngit branch [branch name]\n\n```\n\n### 3.6.2、 **切换分支**\n\n------\n\n​        使用 `git checkout [branch name]` 命令切换到指定分支。\n\n```bash\ngit checkout [branch name]\n\n```\n\n### 3.6.3、**合并分支**\n\n------\n\n​        使用 `git merge [branch name]` 命令合并指定分支到当前分支。\n\n```bash\ngit merge [branch name]\n\n```\n\n------\n\n>\n> ​        创建和切换可合并为:\n>\n> ```bash\n> git checkout -b [branch name]\n> \n> ```\n>\n>\n> ​        谁需要合并谁，在谁那使用，如这里 master 需要合并 br ，则需要在 master 下使用 merge\n\n## 3.7、标签管理\n\n> ​        Git标签（Tag）是Git版本库的一个标记，用来指向某个特定的提交（Commit）。它类似于书签，可以帮助你快速定位到项目的关键版本或里程碑。Git标签主要分为两种类型：轻量级标签（Lightweight Tag）和附注标签（Annotated Tag）。轻量级标签仅仅是一个引用，指向特定的提交，而附注标签则是一个完整的Git对象，包含作者信息、标签信息、日期等，并且可以被签名和验证。\n>\n> Git标签的用途主要包括：\n>\n> 1. **版本管理**：通过为每个发布的版本打上标签，可以清晰地追踪项目的历史版本。\n> 2. **快速定位**：使用标签可以快速检查或恢复到特定的版本，而无需查找复杂的提交哈希值。\n> 3. **发布管理**：在软件发布时，通常会创建一个新的标签，以便于识别和分发特定的版本。\n> 4. **协作沟通**：在团队合作中，标签可以作为讨论和参照的基准，帮助团队成员理解项目的状态和进展。\n\n### **3.7.1、创建标签**\n\n​        使用 `git tag [tag name]` 命令创建一个新的标签。\n\n```bash\ngit tag [tag name]\n\n```\n\n### **3.7.2、查看标签**\n\n​        使用 `git tag` 命令查看所有标签。\n\n```bash\ngit tag\n\n```\n\n\n## 3.8、撤销操作\n\n### **3.8.1、撤销提交**\n\n------\n\n​        使用 `git reset HEAD~` 命令撤销最近一次提交。\n\n```bash\ngit reset HEAD~\n\n```\n\n### **3.8.2、撤销对文件的修改**\n\n------\n\n​        使用 `git checkout -- [filename]` 命令撤销对文件的修改。\n\n```bash\ngit checkout -- [filename]\n\n```\n\n# 4、完！\n\n', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 11:51:25', NULL);
INSERT INTO `t_article` VALUES (143, 1024, 224, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/67f2c1aa268e1e99c907c0410b2d10a7.png', 'Docker入门指南：从安装到容器化应用的快速上手', 'Docker 是一个开源的应用容器化平台，它允许开发者将应用及其依赖项打包成一个可移植的容器，然后在任何支持 Docker 的环境中运行。通过 Docker，开发者可以轻松地在不同系统和环境中创建、部署和管理应用，而无需担心配置差异。Docker 的核心优势在于其轻量级、快速启动和一致的运行环境。通过 Docker 容器，应用可以在开发、测试、生产等环境中无缝迁移，减少了“在我电脑上能跑”的问题。本文将带你从 Docker 的安装开始，逐步掌握如何使用 Docker 容器化你的应用，提升开发与部署效率。', '# 1、Docker是什么？\n\n![1.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/67f2c1aa268e1e99c907c0410b2d10a7.png)\n\nDocker是一个开源的应用容器引擎，它允许开发者将他们的应用及其依赖包打包到一个可移植的容器中。这些容器可以在任何支持Docker的Linux或Windows机器上运行，无需担心环境差异。Docker容器是完全使用沙箱机制，相互之间不会有任何接口，从而保证了应用的独立性和安全性。\n\nDocker的主要组成部分包括：\n\n```\nDocker Client：用于与Docker守护进程通信的客户端。\n\nDocker Daemon：作为服务端接受客户端的命令，管理镜像、容器、容器网络、数据卷等。\n\nDocker Image：用于创建Docker容器的模板，通常通过Dockerfile文件定义。\n\nDocker Container：镜像运行的实例，即容器本身。\n\nDocker Registry：用于存储和管理镜像的仓库，可以是公共的也可以是私有的。\n```\n\nDocker的优势在于它提供了一种标准化的方式来打包、分发和运行应用，简化了软件的集成和交付过程，使得开发、测试和生产环境更加一致。此外，Docker容器相比传统虚拟机具有更轻量级、更快启动和更高效资源利用率的特点\n\n\n\n# 2、安装Docker\n\n清除原有的docker，如果你的操作系统没有安装过Docker , 就不需要执行卸载命令。\n\n```bash\nyum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine\n```\n\n安装依赖包\n\n```bash\nyum install -y yum-utils\n```\n\n建立Docker仓库 (映射仓库地址)\n\n```bash\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n安装Docker引擎\n\n```bash\nyum install docker-ce docker-ce-cli containerd.io\n```\n\n启动docker\n\n```bash\nsystemctl start docker\nsystemctl enable docker\n```\n\n查看版本-验证是否安装成功\n\n```bash\ndocker version\n```\n\n# 3、配置阿里云镜像加速\n\n阿里云官网地址: [www.aliyun.com](https://www.aliyun.com/)\n\n登录后点击：[控制台] => 搜索[容器镜像服务]\n![2.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/76958463afef76796d4ef612385f73fb.png)\n![3.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6fe3dadf31572b61334b9d6fc4c72ef5.png)\n\n如果镜像源无法使用（报错超时的可使用这些试试）\n```bash\n{\n  \"registry-mirrors\": [\n    \"https://docker.registry.cyou\",\n    \"https://docker-cf.registry.cyou\",\n    \"https://dockercf.jsdelivr.fyi\",\n    \"https://docker.jsdelivr.fyi\",\n    \"https://dockertest.jsdelivr.fyi\",\n    \"https://mirror.aliyuncs.com\",\n    \"https://dockerproxy.com\",\n    \"https://mirror.baidubce.com\",\n    \"https://docker.m.daocloud.io\",\n    \"https://docker.nju.edu.cn\",\n    \"https://docker.mirrors.sjtug.sjtu.edu.cn\",\n    \"https://docker.mirrors.ustc.edu.cn\",\n    \"https://mirror.iscas.ac.cn\",\n    \"https://docker.rainbond.cc\"\n  ]\n}\n\n````\n\n\n\n```bash\n#创建docker目录\nsudo mkdir -p /etc/docker\n#配置阿里云镜像加速\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\n{\n  \"registry-mirrors\": [\"https://XXXX.mirror.aliyuncs.com\"]\n}\nEOF\n#重启docker\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n检查\n\n```bash\n#1、\ncat  /etc/docker/daemon.json\n\n```\n\n结果出现：\n\n```bash\n[root@localhost ~]# cat  /etc/docker/daemon.json\n{\n  \"registry-mirrors\": [\"https://XXXX.mirror.aliyuncs.com\"]\n}\n\n```\n\n```bash\n#2、\ndocker info\n\n```\n\n结果出现：\n\n![4.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/106f1c00c17ac23099a5ccd001ec3498.png)\n# 4、主要组件\n\n- **Docker镜像（Image）**：镜像是一个只读模板，包含了应用程序及其运行环境的所有必要信息。它类似于虚拟机的磁盘映像，但更小且更高效。\n![5.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6ad7440070b074ad1b3d59c083731a40.png)\n\n- **Docker容器（Container）**：容器是镜像的运行实例。它们包含了应用程序及其运行环境，并且可以被启动、停止、重启、删除等。容器之间是相互隔离的，每个容器都有自己的文件系统、网络配置和资源分配。\n- **Docker宿主机（Host）**：安装了Docker引擎的机器，容器在宿主机上运行。\n- **Docker客户端（Client）**：用于与Docker守护进程通信的工具，可以通过命令行界面或API与Docker引擎交互。\n\n![6.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5075af5b78148066ebcb49c35f5bdb4a.png)\n- **Docker仓库（Registry）**：用于存储和分发Docker镜像的服务。Docker Hub是最常用的公共仓库，用户可以从中拉取（pull）或推送（push）镜像。\n\n# 5、常用命令\n\n```bash\nsystemctl start docker	#启动docker\nsystemctl stop docker	#关闭docker\nsystemctl restart docker	#重启docker\nsystemctl enable docker		#docker设置随服务启动而自启动\nsystemctl status docker		#查看docker 运行状态 active为运行\n#查看docker 版本号信息\ndocker version				\ndocker info	\n\ndocker --help				#docker 帮助命令\n#拉取镜像 不加tag(版本号) 即拉取docker仓库中 该镜像的最新版本latest 加:tag 则是拉取指定版本\ndocker pull 镜像名 \ndocker pull 镜像名:tag\n\ndocker images				#查看自己服务器中docker 镜像列表\n#搜索镜像\ndocker search 镜像名\ndocker search --filter=STARS=9000 mysql 搜索 STARS >9000的 mysql 镜像\n\n#运行镜像\ndocker run 镜像名\ndocker run 镜像名:Tag\n\n#删除一个\ndocker rmi -f 镜像名/镜像ID\n\n#删除多个 其镜像ID或镜像用用空格隔开即可 \ndocker rmi -f 镜像名/镜像ID 镜像名/镜像ID 镜像名/镜像ID\n\n#删除全部镜像  -a 意思为显示全部, -q 意思为只显示ID\ndocker rmi -f $(docker images -aq)\n\n#强制删除镜像\ndocker image rm 镜像名称/镜像ID\n\n#保存镜像\ndocker save 镜像名/镜像ID -o 镜像保存在哪个位置与名字\n\n#加载镜像\ndocker load -i 镜像保存文件位置\n\n#镜像标签\napp:1.0.0 基础镜像\n# 分离为开发环境\napp:develop-1.0.0   \n# 分离为alpha环境\napp:alpha-1.0.0   \n\ndocker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\n\ndocker tag 源镜像名:TAG 想要生成新的镜像名:新的TAG\n\n# 如果省略TAG 则会为镜像默认打上latest TAG\ndocker tag aaa bbb\n# 上方操作等于 docker tag aaa:latest bbb:test\n\ndocker ps				#查看正在运行容器列表\ndocker ps -a			#查看所有容器\n# -it 表示 与容器进行交互式启动  /bin/bash  交互路径\ndocker run -it -d --name 要取的别名 镜像名:Tag /bin/bash #运行一个容器\n\n# netstat是控制台命令,是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息\nnetstat -untlp\n\n#进入容器\ndocker exec -it 容器名/容器ID /bin/bash\ndocker attach 容器名/容器ID\n\n#退出容器\n#-----直接退出  未添加 -d(持久化运行容器) 时 执行此参数 容器会被关闭  \nexit\n# 优雅退出 --- 无论是否添加-d 参数 执行此命令容器都不会被关闭\nCtrl + p + q\n\ndocker stop 容器ID/容器名		#停止容器\ndocker restart 容器ID/容器名		#重启容器\ndocker start 容器ID/容器名		#启动容器\ndocker kill 容器ID/容器名		#删除容器\n\n#容器文件拷贝 —无论容器是否开启 都可以进行拷贝\n#docker cp 容器ID/名称:文件路径 要拷贝到外部的路径| 要拷贝到外部的路径 容器ID/名称:文件路径\n#从容器内 拷出\ndocker cp 容器ID/名称: 容器内路径  容器外路径\n#从外部 拷贝文件到容器内\ndocker  cp 容器外路径 容器ID/名称: 容器内路径\n\ndocker logs -f --tail=要查看末尾多少行 默认all 容器ID	#查看容器日志\n\n\n```\n\n`-d`:后台运行\n\n`--name`: 容器名\n\n`-p`: 端口映射\n\n`-e`: 环境变量 Key:Value\n\n`-v`: 数据卷参数 Volume:Contents\n\n# 6、Docker数据卷\n\nDocker 数据卷是一种轻量级的、持久化的存储方式，用于存储容器的数据。数据卷的生命周期独立于容器，即使容器被删除，数据卷中的数据也不会丢失。数据卷可以被多个容器挂载，实现数据的共享，也方便进行数据的备份、恢复和迁移。\n\n## 6.1、数据卷的类型\n\n1. **卷 (Volume)**：这是 Docker 管理的宿主机文件系统的一部分，通常位于 `/var/lib/docker/volumes` 目录下。卷是最常用的数据卷类型，它们是 Docker 管理的，并且可以跨容器共享。\n2. **绑定挂载 (Bind Mounts)**：这种方式允许将宿主机的任意目录或文件挂载到容器中。绑定挂载是非持久化的，因为它们依赖于宿主机的文件系统。\n3. **tmpfs 挂载 (Tmpfs Mounts)**：这种方式将数据挂载到宿主机的内存中，不会写入宿主机的文件系统。容器关闭后，数据会丢失。\n\n## 6.2、数据卷的使用\n\n### 6.2.1、 创建数据卷\n\n可以使用 `docker volume create` 命令来创建一个新的数据卷。例如：\n\n```bash\ndocker volume create my-volume\n\n```\n\n### 6.2.2、挂载数据卷到容器\n\n可以在运行容器时使用 `-v` 或 `--mount` 标志来挂载数据卷。例如：\n\n```bash\ndocker run -d -v my-volume:/path/to/container/dir my-image\n\n```\n\n或者\n\n```bash\ndocker run --mount type=bind,source=/host/path,target=/container/path,other-options my-image\n\n```\n\n### 6.2.3、查看数据卷\n\n可以使用 `docker volume ls` 命令来列出所有的数据卷，以及 `docker volume inspect` 命令来查看特定数据卷的详细信息。\n\n### 6.2.4、删除数据卷\n\n可以使用 `docker volume rm` 命令来删除不再需要的数据卷。\n\n# 7、Docker 网络设置\n\nDocker 网络是指 Docker 容器之间以及容器与宿主机之间的通信机制。Docker 提供了多种网络模式，以适应不同的应用场景和需求。\n\n## 7.1、Docker 网络模式\n\nDocker 的网络模式主要包括以下几种类型：\n\n- **Bridge (桥接)**：这是 Docker 的默认网络模式。在这种模式下，Docker 会创建一个虚拟的网桥 `docker0`，并将新创建的容器连接到这个网桥上。容器之间可以通过 IP 地址直接通信。\n- **Host (主机)**：在这种模式下，容器不会获得独立的 IP 地址，而是与宿主机共享网络堆栈。容器使用宿主机的 IP 地址和端口，适合需要高性能网络通信的场景。\n- **None (无)**：在这种模式下，容器没有网络接口，完全隔离，适合不需要网络的容器。\n- **Overlay (覆盖)**：这种网络模式用于 Docker Swarm 集群，可以跨多个主机创建虚拟网络，适合分布式应用和服务。\n- **Macvlan (MAC 虚拟化)**：为每个容器分配一个 MAC 地址，使其像宿主机上的物理设备一样工作，适合需要与物理网络直接交互的场景。\n\n## 7.2、Docker 网络操作\n\nDocker 提供了一系列命令来管理网络，包括：\n\n![7.jpeg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ef0b396c749c36e9b97124a8f16c2f2f.jpeg)\n`docker network ls`:列出所有可用的网络。\n\n`docker network create`：创建新的网络。\n\n`docker network connect`：将容器连接到网络。\n\n`docker network disconnect`：从网络断开会话。\n\n`docker network inspect`：查看网络的详细信息。\n\n`docker network rm`：删除网络。\n\n![7.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/9e78c3e9e31ebacb6b4a1f8213669fed.png)\n## 7.3、Docker 网络配置\n\n在配置 Docker 网络时，可以使用 `--network` 参数来指定容器应该连接到哪个网络。此外，还可以通过 `-p` 或 `--publish` 选项来设置端口映射，允许外部网络访问容器内部的服务。\n\n# 完！！！', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 12:01:26', NULL);
INSERT INTO `t_article` VALUES (144, 1024, 225, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/909127db9db1738430ac57c1044dee1b.jpg', 'SQL Server入门指南：从数据库管理到高效查询的全方位了解', 'SQL Server 是微软公司推出的关系型数据库管理系统（RDBMS），广泛应用于企业级应用和数据管理。它提供了强大的数据存储、查询和处理功能，支持多种数据类型和复杂的查询操作。SQL Server 使用结构化查询语言（SQL）来操作数据，具有高效的事务管理、数据安全性和备份恢复功能。它不仅适用于中小型应用，也能应对大规模企业级数据处理需求。SQL Server 提供了图形化界面的管理工具（如 SQL Server Management Studio）和强大的开发功能，帮助开发者和数据库管理员高效管理数据库系统。通过本文，你将了解 SQL Server 的基础功能、安装配置及常见使用场景，帮助你快速掌握这款强大的数据库管理工具。', '# 前言\n\n​		本篇主要讲述的是关系型数据库Sql Server，原因也很简单，因为大部分学校还在以sql server 为教学材料，不过没关系无论是sql server 、mysql 还是oracle,只要是关系型数据库，概念都是相通的，语句也大差不差。\n\n​		关系型数据库是一种采用关系模型来组织数据的数据库系统。它将数据存储在表格形式的结构中，通常称为表。这些表由行和列组成，每一行代表一条记录，每一列代表一个字段。关系型数据库的核心是表之间的关系，这些关系可以是一对一、一对多或多对多的形式。关系型数据库的设计允许用户通过查询语言（如SQL）来检索、更新和管理数据。\n\n​		关系型数据库主要用于存储、检索和管理结构化数据。它们在企业级应用中非常流行，因为它们提供了数据一致性、完整性和并发控制的保障。关系型数据库可以处理复杂的事务处理，支持多种数据类型，并且可以高效地查询数据。此外，它们还提供了安全可靠的数据访问机制。关系型数据库广泛应用于银行、零售、电信、互联网等领域，例如亚马逊的AWS和谷歌的GCP都是基于关系型数据库构建的。\n\n# 1、数据库系统概述\n\n## 1.1、数据库基础知识\n\n1. **信息与数据**\n\n- *数据（Data*）：数据是原始的、未经处理的数字、文字、图像或其他形式的输入，它们本身没有意义。例如，一个人的姓名、年龄、性别等信息单独存在时，只是数据。\n- *信息（Information）*：信息是经过处理、组织或分析后的数据，它具有一定的意义和目的。例如，将一个人的姓名、年龄、性别组合起来，形成了一个人的基本信息。\n\n2. **数据库（Database）**\n\n- *数据库*：数据库是一个有组织的、可共享的数据集合，这些数据按照特定的模式存储，以便于管理和检索。数据库可以是关系型的，也可以是非关系型的，如文档型、键值型、图形型等。\n\n3. **数据库管理系统（Database Management System, DBMS）**\n\n- *数据库管理系统*：DBMS 是一种软件系统，用于创建、维护和使用数据库。它允许用户定义、查询、更新和管理数据库中的数据。常见的 DBMS 包括 MySQL、Oracle、SQL Server、PostgreSQL 和 MongoDB 等。\n\n4. **数据库系统（Database System）**\n\n- *数据库系统*：数据库系统是指由数据库、数据库管理系统以及相关的软件、硬件和人员组成的整体。它不仅包括数据的存储和管理，还包括数据的处理、维护、安全和备份等功能。\n\n**联系**\n\n- **数据与信息**：数据是信息的原材料，信息是数据处理后的产物。在数据库系统中，原始数据被收集、存储，并通过各种操作转化为有用的信息。\n- **DB与DBMS**：数据库是数据的物理存储，而DBMS 是管理和操作这些数据的软件工具。DBMS 提供了用户与数据库之间的接口，使得用户可以方便地进行数据的增删改查等操作。\n- **DBMS与DBS**：DBMS 是数据库系统的核心组成部分，负责数据库的逻辑和物理层面的管理。数据库系统则包含了DBMS，同时还包括了支持DBMS运行的硬件、软件环境，以及管理和使用数据库的人员。DBS(DB + DBMS)。\n- **数据库系统与信息**：数据库系统通过对数据的组织和管理，使得数据能够有效地转化为信息，从而支持决策制定、业务流程和其他各种应用。\n\n## 1.2、数据库系统的结构\n\n### 1.2.1、相关概念\n\n1. **型**\n   - 数据的“型”指的是*数据的结构*，数据的结构指的是*数据的内部构成和对外联系*。\n   - 例如：图书的数据 = 图书编号 + 书名 + 作者 等属性组成\n2. **值**\n   - 数据的“值”指的是*数据的具体取值*\n   - 例如： “CSDN0001,数据库期末法典，heyqings” 就是图书的一个具体值\n3. **模式和实例**\n   - 模式（schema）指的是对一个事物的图解、框架之意，目的是进一步认识这个事物。\n   - 数据库的描述称之为数据库模式，模式是数据库中全体数据逻辑结构和特征的描述，不涉及具体的值\n   - 模式是静态的，反映数据的结构及其联系，数据库设计阶段确定，一般不会频繁修改\n   - 实例，模式的一个具体值，反映数据库在某一刻的状态，因此是动态的\n   - 同一模式可以有多个实例\n\n### 1.2.2、数据库系统的内部体系结构\n\n1. **数据抽象**\n\n   - 物理层抽象\n   - 逻辑层抽象\n   - 视图层抽象\n\n2. **数据库系统的三级模式结构**\n\n   ***应用程序 => 外模式(用户级) => 模式(概念级) => 内模式(物理级) => 数据库***\n\n   - *模式（Schema）*：也称为概念模式或逻辑模式，它是数据库中全体数据的逻辑结构和特征描述，是所有用户的公共数据视图。\n\n\n   - *外模式（External Schema）*：也称为子模式（Subschema）或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征描述，是与某一应用有关的数据的逻辑表示。\n\n\n   - *内模式（Internal Schema）*：也称为存储模式（Storage Schema），它是对数据库中数据物理结构和存储方式的描述。\n\n\n3. **两层映象与数据独立性**\n\n   - *外模式/模式映像*：定义了各个外模式与概念模式之间的映像关系，这些映像定义通常在各自的外模式中加以描述。\n     - 对于同一个模式可以有多个外模式\n     - 对于一个外模式，数据库都有一个外模式/模式映像\n   - *模式/内模式映像*：定义了数据库全局逻辑结构与物理存储之间的关系，这种模式定义通常在模式中加以描述。\n     - 模式/内模式映像是唯一的\n\n4. **三级模式结构与两层映像的优点**\n\n   - 保证数据的独立性\n   - 方便用户使用，简化用户接口\n   - 保证数据库安全性\n\n### 1.2.3、数据库系统的外部体系结构\n\n1. **三层架构**\n\n   界面表示层 => 业务处理层 => 数据访问层\n\n   - 界面表示层（用户界面层）\n   - 业务处理层（应用层）\n   - 数据访问层\n\n2. **结构类型**\n\n   - 单用户数据库系统：整个数据库系统（应用程序、DBMS、数据）装在一台计算机上，为一个用户独占，不同机器之间不能共享数据。\n   - 主从式数据库系统：也称为集中式结构，是一个主机带多个终端用户结构的数据库系统。所有处理任务都由主机来完成，用户通过主机的终端可同时或并发地存取数据库。\n   - 分布式数据库系统：数据库中的数据在逻辑上是一个整体，但物理地分布在计算机网络的不同结点上。网络中的每个结点都可以独立处理本地数据库中的数据，执行局部应用，同时也可以存取和处理多个异地数据库中的数据，执行全局应用。\n   - 客户机/服务器（C/S）结构的数据库系统：将数据库系统看作由两个非常简单的部分组成，一个服务器（后端）和一组客户（前端）。服务器指DBMS本身，客户指在DBMS上运行的各种应用程序。\n   - 浏览器/服务器（B/S）结构的数据库系统：用户通过浏览器来访问数据库，服务器负责处理数据库的请求并返回结果给用户。\n\n\n\n# 2、关系数据库基础理论\n\n## 2.1、关系的概念\n\n1. **域**：关系中每个属性的取值范围称为域。\n2. **笛卡尔积**：关系中的所有可能元组的集合称为笛卡尔积。\n3. **元组**：笛卡尔积中的每一个元素称为一个元组。\n4. **关系**：在某个域上的笛卡尔积的子集称为关系。\n\n相关的术语\n\n- 元组与属性\n  - 表中每一行对应关系的一个元组\n  - 表中每一列对应一个域，多列的域可以相同，为了加以区分将每一列称属性，即n元关系必须有n个属性\n- 候选码与主码\n  - 候选码：关系中某*属性或属性组* 可以唯一标识一个元组，而其子集不能\n  - 主码：候选码中最小属性组\n- 主属性与非主属性\n  - 主属性：候选码中属性\n  - 非主属性：不包含任何候选码中的属性\n\n## 2.2、关系数据模型\n\n1. **关系模型及其要素**\n   - 关系的描述称之为关系模式，关系模式即关系的框架或结构：***R(U,D,dom,F)***\n   - R:关系名，U:关系的属性集，D:属性组中属性所来的域，dom：属性向域的映射集合，F:属性间的依赖关系\n   - 完整性约束：域完整性，实体完整性，参照完整性（引用完整性），用户定义完整性\n2. **关系的性质和类型**\n   - 性质\n     - 同一列的数据具有同质性\n     - 关系中所有属性都是原子的\n     - 同一关系中每一列对应一个属性\n     - 关系中不允许有完全相同的元组\n     - 在一个关系中元组的次序是无关紧要的\n     - 在一个关系中属性的次序是无关紧要的\n   - 类型\n     - 基本表\n     - 查询表\n     - 视图表\n\n## 2.3、关系代数\n\n1. **关系操作集合**\n   - 关系操作集合包括一系列用于处理关系数据的操作，这些操作可以分为查询操作和更新操作。\n   - 查询操作包括选择、投影、连接、除、并、交、差、笛卡尔积等，其中***选择、投影、并、差、笛卡尔积***是五种基本操作。\n   - 更新操作包括插入、删除、修改等。\n2. **专门的关系运算**\n   - 选择（限制），符号：σ\n     - 单价大于45\n     - σ单价 > 45(图书)\n   - 投影，符号：Π\n     - 所有图书的书名和作者\n     - Π书名，作者（图书）\n   - 连接，符号：⋈\n   - 除法，符号：÷\n\n## 2.4、关系演算\n\n- R ⋃ S = { t | t∈R ∧ t ∈S}\n- R − S = { t | t ∈R ∧ ┐ t ∈ S}\n- R(A) × S(B) = { t | ∃ (u ∈R) ∃(s ∈S)(t[A] = u[A] ∧ t[B] = s[B])}\n- σcon(R）={ t | t ∈ R ∧ F(con) }\n- ∏A( R ) = { t[A] | t ∈ R }\n\n## 2.5、关系数据库的查询优化\n\n代数优化、物理优化\n\n# 3、数据库设计\n\n**基本步骤**\n\n需求分析 => 概念结构设计 => 逻辑结构设计 => 物理结构设计 => 数据库实施 => 数据库运行和维护\n\n## 3.1、需求分析\n\n### 3.1.1、需求分析任务\n\n1. 获取需求\n   - 功能性需求\n   - 非功能性需求\n2. 确定对象以及对象之间的关系\n\n### 3.1.2、用例建模\n\n- 确定系统参与者\n- 确定需求用例\n- 构造用例图\n- 用例规约\n\n### 3.1.3、对象模型\n\n- 识别对象和类\n- 确定属性\n- 确定对象之间的关系（1-1，1-n，m-n）\n- 确定服务\n\n## 3.2、概念结构设计\n\n### 3.2.1、概念数据模型\n\n- **E-R图**\n\n  ```mermaid\n  graph LR\n      A[实体] --- C\n      B((属性)) \n      C{关系} --- B\n  \n  ```\n\n  \n\n## 3.3、逻辑结构设计\n\n1. **概念模型设计**：首先，需要将用户需求抽象成信息结构，通常使用实体-关系（E-R）模型来描述。\n2. **逻辑模型转换**：将概念模型转换为适合特定数据库管理系统（DBMS）的逻辑模型，如关系模型、网状模型或层次模型。\n3. **规范化**：通过分解或合并关系模式，按照规范化理论的指导，至少达到第三范式（3NF），以消除部分函数依赖和传递依赖，减少数据冗余。\n4. **设计用户子模式**：根据局部应用需求，结合具体DBMS，设计用户的外模式，以便用户能够方便地访问和更新数据\n\n## 3.4、物理结构设计\n\n1. **确定数据的存储结构**：这包括选择合适的数据文件组织方式，如堆文件、排序文件或哈希文件，以及决定数据的存储布局，如行存储或列存储。\n2. **设计数据的存取路径**：主要是通过建立索引来实现，索引可以显著加快数据检索速度。需要决定哪些属性列应该被索引，以及是否创建单一索引或组合索引。\n3. **确定数据的存放位置**：为了提高系统性能，数据应该根据其访问频率和变化频率进行分区，以便于管理和优化。\n4. **确定系统配置**：包括选择合适的硬件资源，如磁盘、内存和处理器，以及配置数据库管理系统（DBMS）的存储分配参数。\n\n# 4、规范化理论\n\n## 4.1、函数依赖及关系范式\n\n### 4.1.1、函数依赖\n\n函数依赖是指在关系模式中，一个或一组属性（称为决定因素）能够决定另一个或一组属性（称为依赖因素）的关系。函数依赖通常用 X→Y来表示，其中X 是决定因素，Y 是依赖因素。\n\n- **平凡函数依赖**：如果 X包含了所有可能的值，那么X→Y 总是成立的，这种依赖被称为平凡函数依赖。\n- **非平凡函数依赖**：如果 X不包含所有可能的值，但仍然能够决定Y，这种依赖被称为非平凡函数依赖。\n- **完全函数依赖**：如果 X的任何真子集都不能决定Y，那么 X→ (f)Y 被称为完全函数依赖。\n- **部分函数依赖**：如果 X的某个真子集可以决定Y，那么 X→(p)Y 被称为部分函数依赖。\n- **传递函数依赖**：如果存在 X→Y和Y→Z，但 Y不能决定X，那么 X→(t )Z 被称为传递函数依赖。\n\n### 4.1.2、关系范式\n\n关系范式是用来衡量关系模式是否规范化的标准。常见的关系范式包括：\n\n- **第一范式（1NF）**：要求关系模式中的每个属性都是原子的，即不可再分。\n- **第二范式（2NF）**：要求关系模式中的每个非主属性完全函数依赖于主键。\n- **第三范式（3NF）**：要求关系模式中的每个非主属性既不部分依赖于主键，也不传递依赖于主键。\n- **博伊斯-科得范式（BCNF）**：要求关系模式中的每个决定因素都是超键。\n- **第四范式（4NF）**：要求关系模式中的每个非平凡多值依赖都包含码。\n\n## 4.2、函数依赖公理系统\n\n### 4.2.1、Armstrong公理系统\n\n- 逻辑蕴含:如果从给定的F能推导出X→Y，则称F逻辑蕴含X→Y\n- 函数依赖集的闭包：F逻辑蕴含的所有函数依赖集合，记作F+\n\nArmstrong公理系统的基本规则包括：\n\n1. **自反律**：如果属性集Y是属性集X的子集，并且X是U的子集，那么X→Y是R上成立的。\n2. **增广律**：如果X→Y在R上成立，并且Z是U的子集，那么XZ→YZ在R上成立。\n3. **传递律**：如果X→Y和Y→Z在R上成立，那么X→Z在R上成立。\n\nArmstrong公理系统还包括一些推论规则，例如：\n\n1. **合并规则**：如果X→Y和X→Z在R上成立，那么X→YZ在R上也成立。\n2. **伪传递律**：如果X→Y和WY→Z在R上成立，那么XW→Z在R上也成立。\n3. **分解规则**：如果X→Y在R上成立，并且Z是Y的子集，那么X→Z在R上也成立。\n\n### 4.2.2、函数依赖集的等价和最小化\n\n1. 函数依赖集的等价\n   - F+ = G+的充分必要条件是G+包含F,F+包含G\n   - 两个函数依赖集等价的定义是：如果它们的闭包相等，即一个函数依赖集能够推导出另一个函数依赖集中的所有函数依赖，反之亦然。这种等价关系允许我们在不同的函数依赖集中进行转换，而不会改变关系模式的本质特征。\n2. 函数依赖集的最小化\n   - 函数依赖集的最小化是指找到一个包含最少函数依赖的集合，同时保持与原集合等价。最小化的函数依赖集有助于简化关系模式，减少存储空间和提高查询效率。最小化通常通过逐步移除不必要的函数依赖来实现，这些依赖要么是冗余的，要么可以通过其他依赖间接推导出来。\n\n# 5、sql语句（T-SQL为例）\n\n## 5.1、基础知识\n\n### 5.1.1、语法格式约定\n\nT-SQL（Transact-SQL）是Microsoft SQL  Server中使用的扩展版本的SQL语言。在T-SQL中，命令和语句的书写通常不区分大小写，但是为了提高代码的可读性，建议使用统一的命名规范，例如使用大写字母表示关键字，小写字母表示变量和列名。\n\n### 5.1.2、运算符\n\nT-SQL中的运算符分为几类：\n\n1. **算术运算符**：包括加（+）、减（-）、乘（*）、除（/）和取模（%）。\n2. **比较运算符**：用于比较两个值是否相等或不等，包括等于（=）、不等（<> 或 !=）、大于（>）、小于（<）、大于等于（>=）和小于等于（<=）。\n3. **逻辑运算符**：用于组合多个条件判断，包括AND、OR、NOT、IN、BETWEEN、EXISTS、ANY、ALL、SOME、LIKE等。\n4. **字符串连接运算符**：用于连接两个字符串，通常使用加号（+）。\n5. **位运算符**：包括按位与（&）、按位或（|）、按位异或（^）和按位取反（~）。\n\n### 5.1.3、批处理和脚本\n\n- 批处理\n  - 批处理是T-SQL语句集合的逻辑单元。在批处理中，所有的语句要么被放在一起通过解析，要么没有一句能够执行。批处理内部的语句被整合成一个执行计划，这意味着批处理中的语句是一起提交给服务器的，可以节省系统开销。如果批处理中的任何一条语句存在语法错误，整个批处理都无法通过编译，也不会执行。\n- 脚本\n  - 脚本则是由一系列的SQL命令组成的文本文件，它可以包含多个批处理。脚本中的每个批处理都是独立执行的，一个批处理的错误不会阻止其他批处理的运行。脚本中常用的控制语句包括变量声明、分支、循环等，这些控制语句使得脚本能够实现一些复杂的任务。\n\n## 5.2、数据操作语言（DDL）\n\n### 5.2.1、定义语言\n\n- 数据库定义\n\n  ```sql\n  -- 通常情况下只需要以下语句\n  CREATE DATABASE MyDataBase;\n  ```\n\n- 基本表定义\n\n  ```sql\n  -- 定义语法\n  CREATE TABLE table_name (\n      column1 datatype constraint1,\n      column2 datatype constraint2,\n      column3 datatype constraint3,\n      ...\n      columnN datatype constraintN\n  );\n  -- 例如\n  CREATE TABLE Students (\n      StudentID INT PRIMARY KEY,\n      Name VARCHAR(50) NOT NULL,\n      Age INT,\n      Gender CHAR(1),\n      Major VARCHAR(100)\n  );\n  ```\n\n  1. 数据属性约束\n\n  - **主键约束（PRIMARY KEY）**：确保主键列唯一且不允许为空。\n  - **唯一约束(UNIQUE)**：确保列或列组合中的数据唯一，允许为空，但每个空值只能出现一次。\n  - **检查约束(CHECK(?))**：限制列可接受的值范围或格式，通常通过逻辑表达式来定义。\n  - **默认约束(DEFAULT)**：为列设置默认值，当插入新记录时，如果未指定该列的值，则会使用默认值。\n  - **外键约束(FOREIGN KEY)**：在两个表之间建立关系，确保参照完整性，即一个表中的外键值必须在另一个表的主键中存在。\n\n  2. 数据的基本类型有：\n\n  **数值数据类型**\n\n  - `INT`：可以存储4个字节的整数值，范围从-2,147,483,648到2,147,483,647。\n  - `SMALLINT`：可以存储2个字节的整数值，范围从-32,768到32,767。\n  - `TINYINT`：可以存储1个字节的整数值，范围从0到255。\n  - `BIGINT`：可以存储8个字节的整数值，范围从-263到263-1。\n  - `DECIMAL` 和 `NUMERIC`：用于存储精确的小数值，可以指定精度和小数位数。\n  - `FLOAT`：用于存储浮点数值，可以指定精度。\n  - `MONEY` 和 `SMALLMONEY`：用于存储货币值，通常有四位小数。\n\n  **字符数据类型**\n\n  - `CHAR`：存储固定长度的字符串，不足部分会用空格填充。\n  - `VARCHAR`：存储可变长度的字符串，不需要额外的空格填充。\n  - `NCHAR` 和 `NVARCHAR`：类似于 `CHAR` 和 `VARCHAR`，但用于存储Unicode字符数据，`NCHAR` 是固定长度，`NVARCHAR` 是可变长度。\n\n  **日期和时间数据类型**\n\n  - `DATETIME`：用于存储日期和时间值，范围从1753年1月1日到9999年12月31日。\n\n  **其他数据类型**\n\n  - `TEXT`、`NTEXT`、`IMAGE`、`VARBINARY(MAX)` 和 `XML`：用于存储大量文本或二进制数据。\n\n- 修改基本表\n\n  ```sql\n  -- 新增新列\n  ALTER TABLE <表名>\n  ADD <列名> <数据类型> [<列级完整性约束>]\n  -- 修改原列\n  ALTER TABLE <表名>\n  ALTER COLUMN <列名> <新数据类型> [<列级别完整性约束>]\n  -- 删除列\n  ALTER TABLE <表名>\n  DROP COLUMN <列名>\n  -- 添加或删除完整性约束\n  ALTER TABLE <表名>\n  ADD CONSTRAINT <约束名> <约束定义>\n  \n  ALTER TABLE <表名>\n  DROP CONSTRAINT <约束名>\n  ```\n\n  \n\n- 索引定义\n\n  ```sql\n  -- 创建\n  CREATE [UNIQUE][CLUSTERED | NONCLUSTERED] INDEX index_name\n  ON {table_name | view_name} [WITH [index_property [,....n]]]\n  ```\n\n  - `UNIQUE`：表示创建的是唯一索引，不允许有重复的键值。\n  - `CLUSTERED`：表示创建的是聚集索引。\n  - `NONCLUSTERED`：表示创建的是非聚集索引。\n  - `index_name`：索引的名称。\n  - `table_name | view_name`：要在其上创建索引的表或视图的名称。\n  - `index_property`：索引属性，用于定义索引的额外特性，如填充因子等。\n\n  ```sql\n  -- 删除\n  DROP INDEX table_name.index_name[,table_name.index_name]\n  ```\n\n  ```sql\n  -- 显示\n  EXEC sp_helpindex table_name\n  ```\n\n- 索引修改\n\n  ```sql\n  -- 添加或删除索引列\n  -- 假设已经存在一个名为IX_WorkOrder_ProductID的非聚集索引\n  -- 现在想要添加一个新列Column3到索引中\n  \n  CREATE NONCLUSTERED INDEX IX_WorkOrder_ProductID ON Production.WorkOrder(ProductID)\n  WITH (DROP_EXISTING = ON, FILLFACTOR = 80, PAD_INDEX = ON)\n  INCLUDE (Column3);\n  ```\n\n  ```sql\n  -- 修改索引属性\n  -- 修改名为AK_SalesOrderHeader_SalesOrderNumber的唯一索引的属性\n  \n  ALTER INDEX AK_SalesOrderHeader_SalesOrderNumber ON Sales.SalesOrderHeader\n  SET (STATISTICS_NORECOMPUTE = ON, IGNORE_DUP_KEY = ON, ALLOW_PAGE_LOCKS = ON);\n  \n  ```\n\n  ```sql\n  -- 重建或重组索引\n  -- 重建名为IX_WorkOrder_ProductID的非聚集索引\n  \n  ALTER INDEX IX_WorkOrder_ProductID ON Production.WorkOrder REBUILD;\n  \n  -- 重组名为IX_WorkOrder_ProductID的非聚集索引\n  \n  ALTER INDEX IX_WorkOrder_ProductID ON Production.WorkOrder REORGANIZE;\n  \n  ```\n\n  \n\n- 视图定义\n\n  ```sql\n  -- 创建\n  CREATE [OR ALTER] VIEW [schema_name.]view_name [(column [,...n])]\n  AS\n  SELECT_statement\n  [WITH <view_attribute> [,...n]]\n  \n  ```\n\n  其中 `<view_attribute>` 可以是以下选项之一：\n\n  - `ENCRYPTION`：加密视图定义，防止未授权的用户查看。\n  - `SCHEMABINDING`：绑定视图，阻止对基表进行某些更改，除非先删除视图。\n  - `VIEW_METADATA`：返回视图的元数据，而不是基表的元数据。\n\n- 修改视图\n\n  ```sql\n  -- 假设我们有一个名为MyView的视图，我们想要修改它\n  ALTER VIEW MyView\n  AS\n  SELECT Column1, Column2\n  FROM MyTable\n  WHERE SomeCondition = True;\n  \n  ```\n\n### 5.2.2、操作语言\n\n- 增\n\n  ```sql\n  INSERT INTO 表名 (列名 [, 列名...])\n  VALUES (值 [, 值...])\n  \n  ```\n\n- 删\n\n  ```sql\n  DELETE FROM 表名\n  WHERE 条件\n  \n  ```\n\n- 改\n\n  ```sql\n  UPDATE 表名\n  SET 列名 = 新值 [, 列名 = 新值...]\n  WHERE 条件\n  \n  ```\n\n- 查\n\n  ```sql\n  SELECT [ALL | DISTINCT] 列名 [AS 别名]\n  FROM 表名\n  [WHERE 条件]\n  [GROUP BY 列名]\n  [HAVING 条件]\n  [ORDER BY 列 [ASC | DESC]]\n  \n  ```\n\n  - 简单查询\n\n    ```sql\n    -- 查询所有列\n    SELECT * FROM TableName;\n    -- 查询特定列\n    SELECT Column1, Column2 FROM TableName;\n    -- 条件查询\n    SELECT * FROM TableName WHERE Condition;\n    -- 模糊查询\n    SELECT * FROM TableName WHERE Column LIKE Pattern;\n    	-- 使用 % 作为通配符来匹配任意数量的字符\n    	SELECT * FROM TableName WHERE Column LIKE \'Pattern%\';\n    -- 排序查询\n    SELECT * FROM TableName ORDER BY Column ASC/DESC;\n    -- 统计查询\n    SELECT COUNT(*), SUM(Column), AVG(Column), MIN(Column), MAX(Column) FROM TableName;\n    -- 分组查询\n    SELECT Column, COUNT(*) FROM TableName GROUP BY Column HAVING Condition;\n    \n    ```\n\n  - 连接查询\n\n    ```sql\n    -- 内连接\n    SELECT column_list\n    FROM table1\n    INNER JOIN table2\n    ON table1.column_name = table2.column_name;\n    -- 外连接(OUTER JOIN)\n    -- 左外(LEFT OUTER JOIN)，右外(RIGHT OUTER JOIN)\n    SELECT column_list\n    FROM table1\n    LEFT OUTER JOIN table2\n    ON table1.column_name = table2.column_name;\n    -- 全连接\n    SELECT column_list\n    FROM table1\n    FULL OUTER JOIN table2\n    ON table1.column_name = table2.column_name;\n    -- 交叉连接\n    SELECT column_list\n    FROM table1\n    CROSS JOIN table2;\n    -- 自连接\n    SELECT column_list\n    FROM table1\n    SELF JOIN table2;\n    \n    ```\n\n  - 嵌套查询\n\n    ```sql\n    SELECT column_list\n    FROM outer_table\n    WHERE condition\n        AND (SELECT column_list\n             FROM inner_table\n             WHERE another_condition);\n    \n    ```\n\n    *常见的嵌套查询类型*\n\n    1. **IN子查询**：用于检查某个值是否存在于子查询返回的结果集中。\n    2. **EXISTS子查询**：用于检查子查询是否返回至少一行数据。\n    3. **NOT IN和NOT EXISTS**：用于排除某个值或数据集。\n    4. **比较运算符**：如 `>`, `<`, `=` 等，用于比较子查询返回的值。\n\n  - 组合查询\n\n    ```sql\n    -- 获取所有员工及其所在部门的信息\n    SELECT Employees.EmployeeID, Employees.Name, Departments.DepartmentName\n    FROM Employees\n    INNER JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;\n    \n    ```\n\n### 5.2.3、权限控制语言\n\n权限控制通常涉及以下几个关键概念：\n\n- **用户**：指在数据库中拥有账户的个体或实体。\n- **角色**：一组权限的集合，可以被分配给一个或多个用户。\n- **权限**：允许用户执行特定操作的许可，如SELECT（选择）、INSERT（插入）、UPDATE（更新）、DELETE（删除）等。\n- **对象**：数据库中的实体，如表、视图、存储过程等。\n\n1. 授予权限\n\n   ```sql\n   GRANT SELECT, INSERT ON ObjectName TO UserOrRoleName;\n   \n   ```\n\n2. 撤销权限\n\n   ```sql\n   REVOKE SELECT ON ObjectName FROM UserOrRoleName;\n   \n   ```\n\n3. 查看权限\n\n   使用 `EXEC sp_helprotect` 或 `EXEC sp_helprolemember` 等系统存储过程来查看对象的权限信息或用户或角色的权限信息。\n\n# 6、数据库编程\n\n## 6.1、常用语言元素\n\n### 6.1.1、变量\n\n- 声明\n\n  ```sql\n  DECLARE @局部变量名|@@全局变量 数据类型[ = 初值];\n  DECLARE @id INT;\n  \n  ```\n\n- 赋值和查询\n\n  ```sql\n  -- 赋值\n  -- 单值\n  SET @id = 1;\n  -- 多值\n  SELECT @name = name FROM students WHERE id = @id;\n  \n  ```\n\n- 输出\n\n  ```sql\n  PRINT @id; -- 打印输出\n  \n  ```\n\n### 6.1.2、流程控制语句\n\n- 语句块\n\n  ```sql\n  BEGIN\n  	语句\n  	...\n  END;\n  \n  ```\n\n- IF…ELSE条件语句\n\n  ```sql\n  IF 条件表达式\n  	语句\n  ELSE\n  	语句\n  \n  ```\n\n- WHILE循环语句\n\n  ```sql\n  WHILE 条件表达式\n  	语句 | BREAK | CONTINUE\n  \n  ```\n\n- CASE多条件函数\n\n  ```sql\n  CASE 输入表达式\n  	WHEN 比较表达式 THEN 结果	\n  	WHEN 比较表达式 THEN 结果\n  	WHEN 比较表达式 THEN 结果	\n  	ElSE\n  		语句\n  	END\n  \n  ```\n\n- WAITFOR语句\n\n  ```sql\n  WAITFOR {DELAY | TIME}\n  \n  ```\n\n- GOTO语句\n\n  ```sql\n  标签名称\n  	语句组\n  GOTO 标签名称\n  \n  ```\n\n- RETURN语句\n\n  ```sql\n  RETURN [<整数表达式>]\n  \n  ```\n\n- 注释语句\n\n  ```sql\n  /*多行注释*/\n  -- 单行注释\n  \n  ```\n\n## 6.2、创建和执行存储过程\n\n### 6.2.1、创建\n\n```sql\nCREATE PROCEDURE MyProcedure\nAS\nBEGIN\n    -- 这里放置您的SQL语句\n    SELECT * FROM MyTable WHERE MyColumn = \'SomeValue\';\nEND\nGO\n\n```\n\n```sql\n-- 创建带有参数的存储过程\nCREATE PROCEDURE MyProcedureWithParam @MyParam INT\nAS\nBEGIN\n    -- 这里放置您的SQL语句，使用@MyParam作为参数\n    SELECT * FROM MyTable WHERE MyColumn = @MyParam;\nEND\nGO\n\n```\n\n\n\n### 6.2.2、执行\n\n```sql\nEXEC MyProcedure;\n-- 或者\nEXECUTE MyProcedure;\n\n```\n\n```sql\n-- 执行带有参数的存储过程\nEXEC MyProcedureWithParam @MyParam = 10;\n-- 或者\nEXECUTE MyProcedureWithParam 10;\n\n```\n\n## 6.3、触发器\n\n### 6.3.1、DML触发器\n\nDML 触发器是在执行 DML 操作（如 INSERT、UPDATE 或 DELETE）时自动触发的存储过程。它们用于在数据更改之前或之后执行某些操作，例如记录更改、强制业务规则或同步多个表之间的数据。\n\n```sql\n-- 创建 DML 触发器的示例\nCREATE TRIGGER trg_AfterInsert ON YourTable\nAFTER INSERT\nAS\nBEGIN\n    -- 在这里编写触发器逻辑\n    -- 例如，记录插入的数据到另一个表\n    INSERT INTO AuditLogTable (ColumnName, OperationType)\n    SELECT ColumnName, \'INSERT\' FROM inserted\nEND;\n\n```\n\n### 6.3.2、DDL触发器\n\nDDL 触发器与 DML 触发器类似，但它们响应的是 DDL 事件，如 CREATE、ALTER 或 DROP 语句。DDL 触发器通常用于审计数据库架构的变化，或者防止对某些对象的修改或删除。\n\n```sql\n-- 创建 DDL 触发器的示例\nCREATE TRIGGER trg_PreventTableDrop ON DATABASE\nFOR DROP_TABLE\nAS\nBEGIN\n    -- 阻止 DROP TABLE 操作\n    RAISERROR (\'不允许删除表。\', 16, 1)\n    ROLLBACK\nEND;\n\n```\n\n## 6.4、函数\n\n```sql\n-- 创建函数\nCREATE FUNCTION [schema_name].function_name ([{ @parameter_name [ AS ] [ type_schema_name. ] parameter_data_type [ NULL ] [ = default ] [ READONLY ] } [ , ...n ] ])\nRETURNS return_data_type [ WITH <function_option> [ , ...n ] ]\n[ AS ]\nBEGIN\n    function_body\n    RETURN scalar_expression\nEND;\n\n```\n\n\n\n### 6.4.1、标量函数\n\n标量函数返回单个确定类型的值。它们可以接受零个或多个参数，并执行计算后返回结果。标量函数通常用于执行简单的数学运算、字符串处理或日期时间处理等操作。\n\n```sql\n-- 标量函数示例，它计算两个数的平均值\nCREATE FUNCTION dbo.AverageNumbers (@num1 INT, @num2 INT)\nRETURNS FLOAT\nAS\nBEGIN\n    DECLARE @result FLOAT\n    SET @result = (@num1 + @num2) / 2.0\n    RETURN @result\nEND\n\n```\n\n```sql\n-- 使用这个函数的SQL语句如下\nSELECT dbo.AverageNumbers(10, 20) AS AverageResult\n\n```\n\n\n\n### 6.4.2、表值函数\n\n表值函数则返回一个表格数据结构，即一组行和列。它们可以接受参数，并根据这些参数执行查询或计算，最终返回一个结果集。表值函数通常用于处理复杂的数据检索或聚合操作。\n\n```sql\n-- 表值函数，以下是一个简单的例子，它返回一个部门的所有员工信息\nCREATE FUNCTION dbo.GetEmployeesByDepartment (@deptID INT)\nRETURNS TABLE\nAS\nRETURN (\n    SELECT EmployeeID, Name, BirthDate\n    FROM Employees\n    WHERE DepartmentID = @deptID\n)\n\n```\n\n```sql\n-- 使用这个函数的SQL语句如下\nSELECT * FROM dbo.GetEmployeesByDepartment(1)\n\n```\n\n## 6.5、游标\n\n游标是一种数据访问机制，它允许您在SQL Server数据库中逐行访问结果集。游标的实质是一种能从包括多条数据记录的结果集中每次取出一条记录的缓冲区。游标通常用于处理那些不适合用单一SQL语句一次性处理完毕的复杂逻辑。\n\n在T-SQL中，使用游标通常涉及以下几个步骤：\n\n1. **声明游标**：使用`DECLARE CURSOR`语句定义游标，并指定其属性，如方向（正向、反向、静态等）、类型（只读、可更新等）以及作用域（局部或全局）。\n2. **打开游标**：使用`OPEN`语句激活游标，此时游标会准备好开始遍历结果集。\n3. **获取数据**：使用`FETCH`语句从游标中检索数据。可以选择`FETCH NEXT`来获取下一条记录，或者使用其他选项如`FIRST`、`LAST`、`PRIOR`等来获取特定位置的记录。\n4. **处理数据**：在`FETCH`之后，可以执行各种SQL语句来处理检索到的数据，例如更新、插入或删除操作。\n5. **关闭游标**：使用`CLOSE`语句关闭游标，释放与之相关的资源。\n6. **释放游标**：使用`DEALLOCATE`语句彻底移除游标，释放内存空间。\n\n```sql\n/*\n我们首先声明了一个名为myCursor的游标，它用于检索employees表中属于Sales部门的员工记录。然后我们打开游标，并使用FETCH NEXT来获取第一条记录。接着，我们进入一个WHILE循环，直到@@FETCH_STATUS指示没有更多的记录可以获取为止。在循环体内，我们打印出每条记录的ID和姓名，并可以根据需要添加其他业务逻辑。最后，我们关闭并释放游标。\n*/\nDECLARE myCursor CURSOR FOR\n    SELECT id, name FROM employees\n    WHERE department = \'Sales\';\n\nOPEN myCursor;\n\nFETCH NEXT FROM myCursor INTO @id, @name;\n\nWHILE @@FETCH_STATUS = 0\nBEGIN\n    -- 处理每条记录\n    PRINT \'ID: \' + CAST(@id AS VARCHAR) + \', Name: \' + @name;\n    \n    -- 可以在这里添加更多的业务逻辑\n\n    FETCH NEXT FROM myCursor INTO @id, @name;\nEND;\n\nCLOSE myCursor;\nDEALLOCATE myCursor;\n\n```\n\n# 7、安全性和完整性控制\n\n## 7.1、安全性控制\n\n- **数据库安全性控制的方法**\n\n1. 用户标识和鉴别\n2. 存取控制\n3. 视图\n4. 跟踪审计\n5. 数据加密\n\n```sql\n-- 创建新的服务器角色\nCREATE SERVER ROLE server_role_name;\n-- 向服务器角色添加成员\nEXEC sp_addrolerolemember \'server_role_name\', \'member_name\';\n-- 授予权限\nGRANT permission_name TO server_role_name;\n-- 撤销权限\nREVOKE permission_name FROM server_role_name;\n\n```\n\n## 7.2、完整性控制\n\n完整性控制类型，主要包括以下几种：\n\n1. **实体完整性**：确保每个表中的记录都是唯一的，通常通过主键约束来实现。\n2. **域完整性**：限制列中可以接受的值的类型和范围，例如通过NOT NULL约束、CHECK约束、数据类型约束等。\n3. **参照完整性**：维护表之间的关系，确保一个表中的外键值在另一个表中有对应的主键值。\n4. **用户定义完整性**：允许用户根据特定业务规则定义额外的约束条件。\n\n实现完整性控制的方法包括：\n\n1. **约束**：在表定义中直接指定约束条件，如PRIMARY KEY、FOREIGN KEY、UNIQUE、CHECK等。\n2. **规则**：定义一组规则，然后将这些规则应用到表或列上。\n3. **默认值**：为列指定默认值，当插入新记录时，如果未指定该列的值，则会使用默认值。\n4. **存储过程**：编写存储过程来执行复杂的数据校验逻辑。\n5. **触发器**：创建触发器来自动执行某些操作，如在插入、更新或删除数据时检查完整性约束。\n\n# 8、事务管理与并发控制\n\n## 8.1、事务（transaction）控制\n\n数据库事务管理是数据库管理系统中的一个重要组成部分，它确保了数据库操作的一致性和可靠性。事务是一系列对数据库的操作，这些操作要么全部执行，要么全部不执行，是一个不可分割的工作单位。事务管理必须满足以下四个基本特性，通常称为ACID属性：\n\n- **原子性（Atomicity）**：事务中的所有操作要么全部完成，要么全部不执行，不允许部分执行。\n- **一致性（Consistency）**：事务必须使数据库从一个一致的状态转变到另一个一致的状态。\n- **隔离性（Isolation）**：并发执行的事务之间互不干扰，每个事务都认为自己独占了数据库资源。\n- **持久性（Durability）**：一旦事务提交，其对数据库的更改就永久保存在数据库中，即使系统发生故障也不会丢失。\n\n```sql\n-- 开始一个新的事务。在事务开始后，所有后续的数据库操作都会包含在这个事务中，直到事务被提交或回滚。\nBEGIN TRANSACTION;\n-- 这里放置一系列的数据库操作\nCOMMIT TRANSACTION;\n\n-- 提交当前事务，使所有自事务开始以来所做的更改永久保存到数据库中。\nBEGIN TRANSACTION;\n-- 这里放置一系列的数据库操作\nCOMMIT TRANSACTION;\n\n-- 撤销当前事务中所做的所有更改，将数据库恢复到事务开始前的状态。\nBEGIN TRANSACTION;\n-- 这里放置一系列的数据库操作\nROLLBACK TRANSACTION;\n\n-- 创建一个保存点，允许在事务中回滚到该特定点，而不是整个事务。\nBEGIN TRANSACTION;\n-- 这里放置一系列的数据库操作\nSAVE TRANSACTION savepoint_name;\n-- 如果发生错误，可以回滚到savepoint_name\nROLLBACK TRANSACTION savepoint_name;\n\n-- 回滚到指定的保存点，撤销该保存点之后的所有更改。\nBEGIN TRANSACTION;\n-- 这里放置一系列的数据库操作\nSAVE TRANSACTION savepoint_name;\n-- 如果发生错误，可以回滚到savepoint_name\nROLLBACK TRANSACTION TO savepoint_name;\n\n```\n\n## 8.2、并发控制\n\n并发控制是指在多个用户或进程同时访问和修改数据库时，确保数据的一致性和完整性。并发操作可能导致以下几种问题：\n\n1. **丢失修改**：当两个事务尝试修改同一个数据项时，如果第一个事务尚未提交，第二个事务的修改可能会覆盖第一个事务的修改，导致第一个事务的修改丢失。\n2. **不可重复读**：如果一个事务在读取数据后，另一个事务修改了这些数据，然后第一个事务再次读取这些数据，它可能会得到不同的结果，因为数据已经被改变。\n3. **读脏数据**：如果一个事务读取了正在被另一个事务修改的数据，然后第一个事务提交或回滚，导致读取的数据变得无效，这种现象称为读脏数据。\n\n### 8.2.1、锁\n\n***锁类型***\n\n1. **共享锁 (S)**：允许多个事务同时读取同一资源，但不允许修改。一旦所有读取操作完成，共享锁会被释放。\n2. **排他锁 (X)**：只允许一个事务对数据进行读写操作，阻止其他事务同时访问。\n3. **更新锁 (U)**：在修改操作的初始阶段用来锁定可能要被修改的资源，避免死锁。更新锁在数据修改时升级为排他锁。\n4. **意向锁**：包括意向共享锁 (IS)、意向排他锁 (IX)、意向更新锁 (IU) 等，它们表示事务对资源的意图，以便其他事务了解当前事务的锁定状态。\n5. **键范围锁**：在使用可序列化事务隔离级别时，锁定整个键范围，防止其他事务插入或更新该范围内的数据。\n\n# 完！\n\n有异议、意见等等欢迎评论区留言反馈！', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 12:07:25', NULL);
INSERT INTO `t_article` VALUES (145, 1024, 223, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/d8a7839b36f1c3ce4e1f5d4ccef58aeb.jpg', '使用Markdown绘制流程图：轻松可视化你的思路', 'Markdown 是一种轻量级的标记语言，广泛应用于文档编写和内容格式化。除了基本的文本格式化，Markdown 还支持插入图片、链接、代码块以及绘制流程图等。通过使用一些简单的语法和插件，用户可以在 Markdown 文档中轻松绘制流程图，帮助清晰地展示复杂的过程和逻辑关系。本文将介绍如何在 Markdown 中使用流程图插件，如 Mermaid，绘制各种常见的流程图，包括顺序图、流程图、类图等，让你的文档更具可读性和专业性。', '# 前言\n\n在Markdown中，可以使用特定的语法来绘制简单的流程图。这种语法通常是通过Mermaid插件实现的，它允许你在Markdown文档中创建图表，包括流程图、序列图和甘特图等。\n\n\n\n> **因版本或编辑器不同等等原因部分语法不普遍适用** \n\n\n\n# 1、基础讲解\n\n## 1.1、mermaid定义\n\n~~~markdown\n```mermaid\n	语句\n```\n~~~\n\n## 1.2、基础语法\n\n### 1.2.1、节点类型\n\n- 默认\n- 圆角矩形:`()`\n- 方角矩形:`[]`\n- 菱形:`{}`\n- 圆形:`(())`\n- 非对称:`>]`\n\n_节点名称（节点显示内容）_\n\n~~~markdown\n```mermaid\n	graph TB\n	默认\n	A(圆角矩形)\n	B[方角矩形]\n	C{菱形}\n	D((圆形))\n	E>非对称]\n```\n~~~\n\n```mermaid\ngraph TB\n	默认\n	A(圆角矩形)\n	B[方角矩形]\n	C{菱形}\n	D((圆形))\n	E>非对称]\n```\n\n### 1.2.2、流程方向\n\n|  符号  |                含义                 |\n| :----: | :---------------------------------: |\n| TB /TD | 从上到下（Top to Bottom）的流程方向 |\n|   BT   | 从下到上（Bottom to Top）的流程方向 |\n|   LR   | 从左到右（Left to Right）的流程方向 |\n|   RL   | 从右到左（Right to Left）的流程方向 |\n|   HZ   |  水平方向（Horizontal）的流程方向   |\n|   VT   |   垂直方向（Vertical）的流程方向    |\n\n### 1.2.3、连线方式\n\n- 线条\n  - 直线:`---`\n  - 虚线:`-.-`\n  - 粗线:`===`\n- 箭头\n  - 单向箭头:`-->`\n  - 单向圆点:`--o`\n  - 单向叉号:`--x`\n  - 双向箭头:`<-->`\n  - 双向圆点:`o--o`\n  - 双向叉号:`x--x`\n- 标签\n  - \n\n_节点名称 - - -节点名称_ \n\n~~~markdown\n``mermaid\n	graph TB\n	默认  --标签--- A\n	A(圆角矩形) -.- B\n	B[方角矩形] === C\n	C{菱形} --> D\n	D((圆形)) ==> E\n	E>非对称] -.->A\n```\n~~~\n\n\n\n```mermaid\n	graph TB\n	默认  --标签--- A\n	A(圆角矩形) -.- B\n	B[方角矩形] === C\n	C{菱形} --> D\n	D((圆形)) ==> E\n	E>非对称] -.->A\n```\n\n### 1.2.4、节点样式\n\n**节点类型**\n\n|           属性            |    类型    |\n| :-----------------------: | :--------: |\n|        开始：start        |   椭圆形   |\n|         结束：end         |   椭圆形   |\n|      操作：operation      |    矩形    |\n|   多输入操作：parallel    |    矩形    |\n|    条件判断：condition    |    菱形    |\n|   输入输出：in/out put    | 平行四边形 |\n| 预处理/子程序：subroutine |   圣旨型   |\n\n\n\n```\nstyle 节点 样式\n```\n\n~~~markdown\n````mermaid\n	graph TB\n	A(圆角矩形)\n	B[方角矩形]\n	style A fill:#f9f,stroke:#333,stroke-width:4px\n	style B fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n~~~\n\n\n\n```mermaid\n	graph TB\n	A(圆角矩形)\n	B[方角矩形]\n	style A fill:#f9f,stroke:#333,stroke-width:4px\n	style B fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n​	\n\n# 2、graph\n\n~~~markdown\n```mermaid\ngraph LR\nA[这是graph]\n​```\n\n~~~\n\n```mermaid\ngraph LR\nA[这是graph]\n```\n\n```markdown\n    graph TB\n        c1-->a2\n        subgraph one\n        a1-->a2\n        end\n        subgraph two\n        b1-->b2\n        end\n        subgraph three\n        c1-->c2\n        end\n        one --> two\n        three --> two\n        two --> c2\n\n```\n\n\n\n```mermaid\ngraph TB\n	c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n    one --> two\n    three --> two\n    two --> c2\n```\n\n# 3、flowchart\n\n~~~markdown\n```mermaid\n	flowchart LR\n    s=>start: 开始\n    s->\n​```\n如果使用flowchart未成功：\n​```flow\n    s=>start: 开始\n    s->\n​```\n\n~~~\n\n```flow\n    s=>start: 开始\n    s->\n```\n\n```markdown\n	s=>start: 开始\n	e=>end: 结束\n	op1=>operation: 操作1 \n	op2=>operation: 操作2 \n	op3=>operation: 操作3 \n	pa=>parallel: 多输出操作4 \n	cond=>condition: 确认？\n	\n	s->op1->cond\n	cond(true)->op3\n	cond(no)->op2(right)->op1\n	op3->pa\n	pa(path3,right) ->e\n	s@>op1({\"stroke\":\"Pink\"})@>cond({\"stroke\":\"Blue\",\"stroke-width\":10})@>op3({\"stroke\":\"Green\"})@>pa({\"stroke\":\"yellow\"})@>e({\"stroke\":\"red\",\"arrow-end\":\"classic-wide-long\"})\n\n```\n\n\n\n```flow\n	s=>start: 开始\n	e=>end: 结束\n	op1=>operation: 操作1 \n	op2=>operation: 操作2 \n	op3=>operation: 操作3 \n	pa=>parallel: 多输出操作4 \n	cond=>condition: 确认？\n	\n	s->op1->cond\n	cond(true)->op3\n	cond(no)->op2(right)->op1\n	op3->pa\n	pa(path3,right) ->e\n	s@>op1({\"stroke\":\"Pink\"})@>cond({\"stroke\":\"Blue\",\"stroke-width\":10})@>op3({\"stroke\":\"Green\"})@>pa({\"stroke\":\"yellow\"})@>e({\"stroke\":\"red\",\"arrow-end\":\"classic-wide-long\"})\n```\n\n- 节点定义\n\n  ```\n  变量名=>节点标识: 节点显示名\n  \n  ```\n\n- 节点连线\n\n  ```\n  变量名1->变量名2->...->变量名n\n  \n  ```\n\n- 连线样式\n\n  ```\n  变量名m@>变量名n({\"key\":\"value\"})\n  \n  ```\n\n- 关键字\n\n  - yes/true：condition类型变量连接时，用于分别表示yes条件的流向\n  - no/false：同上，表示否定条件的流向\n  - left/right：表示连线出口在节点位置（默认下面是出口，如op3），可以跟condition变量一起用：cond(yes,right)\n  - path1/path2/path3：parallel变量的三个出口路径（默认下面是出口）', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 12:11:57', NULL);
INSERT INTO `t_article` VALUES (146, 1024, 223, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cda7fec6ac108820e6f7428176261fee.jpg', '生成二维码：把链接变成小方块，轻松分享一切！', '二维码生成器，简直是信息共享的秘密武器。只需轻松输入网址、文本或联系方式，几秒钟后，你的内容就能化身为一个小小的二维码，随时随地分享。想要快速让别人获取链接？扫一扫，一切搞定！想把活动信息、优惠券、社交资料直接传递？二维码轻松解决。它将繁琐的信息转化为一个简洁、便于存储的图形，让分享变得毫不费力。随着二维码的普及，我们的交流变得更加直接和高效。本文将带你快速了解如何生成二维码，提升信息传递的便捷性。', '[国标](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=452EB59E906021D3BEA11419CA96FA9A)\n\n> 简单示例\n>\n> [相关资源下载](https://github.com/heyqing/practice)\n\n## zxing 实现\n\n**生成**\n\n```java\n	/**\n     * 生成二维码\n     *\n     * @param width\n     * @param height\n     * @param name\n     * @param format\n     * @param content\n     */\n    public static String generateQRCodeByZxing(int width, int height, String name, String format, String content) {\n        /**\n         * 定义二维码参数\n         */\n        Map<EncodeHintType, Object> hints = new HashMap<>();\n        hints.put(EncodeHintType.CHARACTER_SET, \"utf-8\");\n        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);\n        hints.put(EncodeHintType.MARGIN, 2);\n\n        //生成二维码\n        try {\n            BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height);\n            String filename = name + \".\" + format;\n            Path filepath = Paths.get(\"QRCode\", \"src\", \"com\", \"heyqing\", \"generate\", filename);\n            MatrixToImageWriter.writeToPath(bitMatrix, format, filepath);\n            MatrixToImageWriter.writeToPath(bitMatrix, format, filepath);\n            System.out.println(\"二维码生成完成！！！ \\n请前往【\" + filepath.toString() + \"】查看\");\n            return filepath.toString();\n        } catch (WriterException e) {\n            throw new RuntimeException(e);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n```\n\n**解析**\n\n```java\n 	/**\n     * 解析二维码\n     *\n     * @param filepath\n     * @return\n     */\n    public static Result parserQRCodeByZxing(String filepath) {\n        MultiFormatReader formatReader = new MultiFormatReader();\n        File file = new File(filepath);\n        try {\n            BufferedImage image = ImageIO.read(file);\n            BinaryBitmap binaryBitmap = new BinaryBitmap(\n                    new HybridBinarizer(new BufferedImageLuminanceSource(image)));\n            /**\n             * 定义二维码参数\n             */\n            Map<DecodeHintType, Object> hints = new HashMap<>();\n            hints.put(DecodeHintType.CHARACTER_SET, \"utf-8\");\n\n            Result result = formatReader.decode(binaryBitmap, hints);\n            System.out.println(\"解析结果：\" + result.toString());\n            System.out.println(\"二维码格式：\" + result.getBarcodeFormat());\n            System.out.println(\"二维码文本内容：\" + result.getText());\n            image.flush();\n            return result;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } catch (NotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n```\n\n**测试**\n\n```java\n	/**\n     * zxing\n     */\n    private static void zxingTest() {\n        String filepath = QRCodeByZxing.generateQRCodeByZxing(300, 300,\n                \"github\", \"png\", \"https://github.com/heyqing\");\n        Result result = QRCodeByZxing.parserQRCodeByZxing(filepath);\n        System.out.println(result.toString());\n    }\n```\n\n![1.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5b90a9d64567b6336bfad71022e89de3.png)\n## QR code 实现\n\n**生成**\n\n```java\n	/**\n     * 生成二维码\n     *\n     * @param name\n     * @param format\n     * @param content\n     * @return\n     */\n    public static String generateQRCodeByQRCode(String name, String format, String content) {\n        Qrcode qrcode = new Qrcode();\n        /**\n         * 纠错等级，建议 M\n         */\n        qrcode.setQrcodeErrorCorrect(\'M\');\n        /**\n         * 字符类型，A：代表字母，N：代表数字，B:代表其他字符\n         */\n        qrcode.setQrcodeEncodeMode(\'B\');\n        /**\n         * 版本，建议 7\n         */\n        int version = 7;\n        qrcode.setQrcodeVersion(version);\n\n        int width = 67 + 12 * (version - 1);\n        int height = 67 + 12 * (version - 1);\n        /**\n         * 设置绘图基础面板\n         */\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        Graphics2D graphics = image.createGraphics();\n        graphics.setBackground(Color.WHITE);\n        graphics.setColor(Color.BLACK);\n        graphics.clearRect(0, 0, width, height);\n        /**\n         * 偏移量\n         */\n        int pixoff = 2;\n        byte[] contentBytes = content.getBytes();\n        /**\n         * 字节填充绘图\n         */\n        if (contentBytes.length > 0 && contentBytes.length < 120) {\n            boolean[][] s = qrcode.calQrcode(contentBytes);\n            for (int i = 0; i < s.length; i++) {\n                for (int j = 0; j < s.length; j++) {\n                    if (s[j][i]) {\n                        graphics.fillRect(j * 3 + pixoff, i * 3 + pixoff, 3, 3);\n                    }\n                }\n            }\n        }\n        graphics.dispose();\n        image.flush();\n        String filename = name + \".\" + format;\n        String path = Paths.get(\"QRCode\", \"src\", \"com\", \"heyqing\", \"generate\", filename).toString();\n        File filepath = new File(path);\n        try {\n            ImageIO.write(image, format, filepath);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        System.out.println(\"二维码生成完成！！！ \\n请前往【\" + filepath.toString() + \"】查看\");\n        return filepath.toString();\n    }\n\n```\n\n\n\n**解析**\n\n```java\n	/**\n     * 解析二维码\n     *\n     * @param filepath\n     * @return\n     */\n    public static String parserQRCodeByQRCode(String filepath) {\n        File file = new File(filepath);\n        try {\n            BufferedImage bufferedImage = ImageIO.read(file);\n            QRCodeDecoder qrCodeDecoder = new QRCodeDecoder();\n            String result = new String(qrCodeDecoder.decode(new MyQRCodeImage(bufferedImage)), \"gb2312\");\n            System.out.println(\"解析结果：\" + result);\n            bufferedImage.flush();\n            return result;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n```\n\n\n\n**测试**\n\n```java\n/**\n     * qrcode\n     */\n    private static void qrcodeTest() {\n        String filepath = QRCodeByQRCode.generateQRCodeByQRCode(\"gitee\", \"png\", \"https://gitee.com/heyqing\");\n        String res = QRCodeByQRCode.parserQRCodeByQRCode(filepath);\n        System.out.println(res);\n    }\n```\n\n![2.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/333d616d82bd18e8cdd8bdea324c3702.png)\n## jQuery 实现\n\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\" %>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>jQuery-generate-qrcode</title>\n    <script type=\"text/javascript\" src=\"<%=request.getContextPath() %> /js/jquery.min.js\"></script>\n    <script type=\"text/javascript\" src=\"<%=request.getContextPath() %> /js/jquery.qrcode.min.js\"></script>\n</head>\n<body>\n<h1>生成的二维码如下：</h1><br>\n<div id=\"qrcode\"></div>\n<script type=\"text/javascript\">\n    jQuery(\'#qrcode\').qrcode(\"https://blog.csdn.net/heyiqingsong\")\n</script>\n</body>\n</html>\n```\n\n![3.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3429f5965b08a5c497cf149166641085.png)\n## 更多\n\n二维的生成还有众多的样式可选择，敬请期待更多！！！', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 12:20:07', NULL);
INSERT INTO `t_article` VALUES (147, 1024, 226, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/d84f4206dbe76de6dc3d64794f860ee5.jpg', '经典排序算法大揭秘：从冒泡到快速，了解每种算法的独特魅力', '排序算法是计算机科学中的基础概念，用于将一组数据按照特定的顺序排列。经典的排序算法有很多，其中每一种都有其独特的特点和应用场景。从简单易懂的冒泡排序到高效快速的快速排序，这些算法在不同的数据量和需求下展现出不同的表现。尽管它们的时间复杂度各异，但每种排序方法都在算法学习和实际开发中占据重要地位。本文将为你介绍几种经典排序算法，包括冒泡排序、选择排序、插入排序、快速排序等，帮助你理解每种算法的原理、优缺点及其适用场景。', '# 十大经典排序\n\n## 简介\n\n  这里所说的十大经典排序指的分别为：冒泡排序（Bubble Sort）、选择排序（Selection Sort）、插入排序（Insertion Sort）、快速排序（Quick Sort）、归并排序（Merge Sort）、堆排序（Heap Sort）、希尔排序（Shell Sort）、计数排序（Counting Sort）、基数排序（Radix Sort）、桶排序（Bucket Sort）\n\n这些排序算法根据不同的特点可以被分为以下几类：\n\n- **比较排序**：通过比较元素之间的大小关系来进行排序。包括冒泡排序、选择排序、插入排序、快速排序、归并排序、堆排序、希尔排序。\n- **非比较排序**：不通过比较元素的大小关系来进行排序，而是通过其他方法确定元素的顺序。包括计数排序、基数排序、桶排序。\n\n下面我会对这十种算法依次进行说明\n\n> 文中提到代码具体见 :\n> [Code](https://github.com/heyqing/csdn/tree/master/Algorithm/sort)\n>\n\n\n\n## 冒泡排序（Bubble Sort）\n\n### 算法描述\n\n冒泡排序是一种简单的排序算法，它通过重复地遍历要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。遍历数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。\n\n### 算法步骤\n\n1. 比较相邻的元素。如果第一个比第二个大（升序排序），就交换它们两个。\n2. 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 重复步骤1~3，直到排序完成。\n\n### 时间复杂度\n\n- 最好情况（已排序）：$O(n)$，当输入的数组已经是正序时，冒泡排序只需遍历一次数组即可。\n- 最坏情况（逆序）：$O(n^2)$，当输入的数组是逆序时，需要进行最大次数的比较和交换。\n- 平均情况：$O(n^2)$，平均情况下，冒泡排序的时间复杂度也是$O(n^2)$。\n\n### 空间复杂度\n\n- 常数额外空间：$O(1)$，冒泡排序只需要一个用于交换的临时变量，所以它的空间复杂度是$O(1)$。\n\n### 动态解释\n\n![bubble.gif](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5d46b8df7ab2d1276af7d9871b36d353.gif)\n### 代码实现\n\n```java\npackage com.heyqing;\n\n/**\n * ClassName:BubbleSort\n * Package:com.heyqing\n * Description:\n * 冒泡排序\n *\n * @Date:2024/10/16\n * @Author:Heyqing\n */\npublic class BubbleSort {\n    /**\n     * 外部调用接口\n     *\n     * @param source\n     */\n    public static void sort(int[] source) {\n        bubble(source);\n    }\n\n    /**\n     * 排序具体实现\n     *\n     * @param nums\n     */\n    private static void bubble(int[] nums) {\n        boolean flag; // 内层是否有序标志\n        //第一层 不用判断最后一个数\n        for (int i = 0; i < nums.length - 1; i++) {\n            flag = false;\n            //第二层 不用判断最后i躺个数\n            for (int j = 0; j < nums.length - 1 - i; j++) {\n                //如果前一个数 大于 后一个数\n                if (nums[j] > nums[j + 1]) {\n                    //交换两个数\n                    swap(nums, j);\n                    flag = true;\n                }\n            }\n            // 如果内层循环没有进行交换，说明数组已经有序，可以提前结束排序\n            if (!flag) break;\n        }\n    }\n\n    /**\n     * 交换两个数\n     * <p>\n     * index 与 index + 1 进行交换\n     *\n     * @param nums\n     * @param index\n     */\n    private static void swap(int[] nums, int index) {\n        /*\n         若 a = nums[index] , b = nums[index + 1]\n         第一行： a = a ^ b 此时： a = a ^ b ,b = b\n         第二行： b = (a ^ b) ^ b = a 此时： a = a ^ b , b = a\n         第三行： a = (a ^ b) ^ a = b 此时： a = b , b = a 完成交换\n         此算法实现了不使用额外空间完成两数交换\n         注意：使用此算法时要保证 a , b 不同内存空间，错误用例见附录\n         */\n        nums[index] = nums[index] ^ nums[index + 1];\n        nums[index + 1] = nums[index] ^ nums[index + 1];\n        nums[index] = nums[index] ^ nums[index + 1];\n    }\n}\n```\n\n## 选择排序（Selection Sort）\n\n### 算法描述\n\n选择排序是一种简单直观的排序算法。该算法每次循环从未排序的部分找到最小（或最大）的元素，将其放到已排序部分的末尾。这个过程重复进行，直到整个数组排序完成。\n\n### 算法步骤\n\n1. 在未排序序列中找到最小（或最大）元素的索引。\n2. 将最小（或最大）元素与未排序序列的第一个元素交换位置。\n3. 在剩下的未排序元素中重复步骤1和2，直到所有元素均排序完毕。\n\n### 时间复杂度\n\n- 最好、最坏和平均情况的时间复杂度都是$ O(n^2)$，因为选择排序需要进行大约 $n/2$ 次的交换操作，并且每次交换操作都需要遍历剩余的未排序部分。\n\n### 空间复杂度\n\n- 空间复杂度是 $O(1)$，因为选择排序是在原地进行的，不需要额外的存储空间。\n\n### 动态解释\n\n数组：[64, 25, 12, 22, 11]\n\n1. 第一轮找到最小元素11，与第一个元素64交换位置，数组变为：[11, 25, 12, 22, 64]\n2. 第二轮找到除11之外的最小元素12，与第二个元素25交换位置，数组变为：[11, 12, 25, 22, 64]\n3. 第三轮找到除11和12之外的最小元素22，与第三个元素25交换位置，数组变为：[11, 12, 22, 25, 64]\n4. 最后一轮，25和64已经是有序的，不需要交换。\n\n### 代码实现\n\n```java\npackage com.heyqing;\n\n/**\n * ClassName:SelectionSort\n * Package:com.heyqing\n * Description:\n * 选择排序\n *\n * @Date:2024/10/16\n * @Author:Heyqing\n */\npublic class SelectionSort {\n\n    /**\n     * 外部调用接口\n     *\n     * @param source\n     */\n    public static void sort(int[] source) {\n        selection(source);\n    }\n\n    /**\n     * 排序具体实现\n     *\n     * @param nums\n     */\n    private static void selection(int[] nums) {\n        for (int i = 0; i < nums.length - 1; i++) {\n            int minTemp = i; // 找到从i开始到数组末尾的最小元素的索引\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] < nums[minTemp]) minTemp = j;\n            }\n            // 将找到的最小元素与第i个位置的元素交换\n            swap(nums, i, minTemp);\n        }\n    }\n\n    /**\n     * 交换两个数 常规做法\n     *\n     * @param nums\n     * @param i\n     * @param j\n     */\n    private static void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n```\n\n## 插入排序（Insertion Sort）\n\n### 算法描述\n\n插入排序是一种简单的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\n\n### 算法步骤\n\n1. 从第一个元素开始，该元素可以认为已经被排序。\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描。\n3. 如果该元素（已排序）大于新元素，将该元素移到下一位置。\n4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置。\n5. 将新元素插入到该位置后。\n6. 重复步骤2~5。\n\n### 时间复杂度\n\n- 最好情况（数组已经是有序的）：$O(n)$\n- 最坏情况（数组是完全逆序的）：$O(n^2)$\n- 平均情况：$O(n^2)$\n\n### 空间复杂度\n\n- 空间复杂度是 $O(1)$，因为插入排序是在原地进行的，不需要额外的存储空间。\n\n### 动态解释\n\n数组：[5, 2, 4, 6, 1, 3]\n\n1. 初始状态：[5]（5是第一个元素，已经有序）\n2. 插入2到5之前：[2, 5]\n3. 插入4到[2, 5]之前，需要将5向后移动：[2, 4, 5]\n4. 插入6到[2, 4, 5]之后，因为6比5大：[2, 4, 5, 6]\n5. 插入1到[2, 4, 5, 6]之前，需要将所有元素向后移动：[1, 2, 4, 5, 6]\n6. 插入3到[1, 2, 4, 5, 6]之前，需要将4和5向后移动：[1, 2, 3, 4, 5, 6]\n\n### 代码实现\n\n```java\npackage com.heyqing;\n\n/**\n * ClassName:InsertionSort\n * Package:com.heyqing\n * Description:\n * 插入排序\n *\n * @Date:2024/10/16\n * @Author:Heyqing\n */\npublic class InsertionSort {\n    /**\n     * 外部调用接口\n     *\n     * @param source\n     */\n    public static void sort(int[] source) {\n        insertion(source);\n    }\n\n    /**\n     * 排序具体实现\n     *\n     * @param nums\n     */\n    private static void insertion(int[] nums) {\n        for (int i = 1; i < nums.length; i++) {\n            int key = nums[i];\n            int j = i - 1;\n            //将大于key的元素向后移动\n            while (j >= 0 && nums[j] > key) {\n                nums[j + 1] = nums[j];\n                j -= 1;\n            }\n            //插入key到正确的位置\n            nums[j + 1] = key;\n        }\n    }\n}\n```\n\n## 快速排序（Quick Sort）\n\n### 算法描述\n\n快速排序是一种分而治之的排序算法。它通过选取一个“基准”元素，将数组分成两个子数组，一个包含小于基准的元素，另一个包含大于或等于基准的元素，然后递归地对这两个子数组进行快速排序。\n\n### V1.0\n\n#### 算法步骤\n\n使用最后一个数 n 作为划分值\n使得n前面的所有数以荷兰国旗式划分开\n划分完后使用大于区域的第一个数与 n 交换\n然后对 n 左右区域做递归处理\n\n#### 时间复杂度\n\n- 最好情况：$O(n log n)$，每次分区操作都能将数组分为两个大小相等的子数组。\n- 最坏情况：$O(n^2)$，当每次分区操作只减少一个元素时，例如数组已经是有序的。\n\n#### 空间复杂度\n\n- 空间复杂度是$ O(log n)$，这是因为快速排序的递归性质，需要使用递归栈空间。\n\n### V2.0\n\n#### 算法步骤\n\n使用最后一个数 n 作为划分值\n使得n前面的所有数以荷兰国旗式划分开\n划分完后使用大于区域的第一个数与 n 交换\n然后对 n 左右区域做递归处理\n与第一版不同的是将等于部分置于中间\n\n#### 时间复杂度\n\n- 最好情况：$O(n log n)$，每次分区操作都能将数组分为两个大小相等的子数组。\n- 最坏情况：$O(n^2)$，当每次分区操作只减少一个元素时，例如数组已经是有序的。\n\n#### 空间复杂度\n\n- 空间复杂度是$ O(log n)$，这是因为快速排序的递归性质，需要使用递归栈空间。\n\n### V3.0\n\n#### 算法步骤\n\n随机选择数组中的一个数作为分界数\n使得n前面的所有数以荷兰国旗式划分开\n划分完后使用大于区域的第一个数与 n 交换\n然后对 n 左右区域做递归处理\n与第二版不同的是随机选取数EX = n log n\n\n#### 时间复杂度\n\n- 最好情况：$O(n log n)$，每次分区操作都能将数组分为两个大小相等的子数组。\n- 最坏情况：$O(n log n)$，当每次分区操作只减少一个元素时，例如数组已经是有序的。\n\n#### 空间复杂度\n\n- 空间复杂度是$ O(log n)$，这是因为快速排序的递归性质，需要使用递归栈空间。\n\n### 代码实现\n\n```java\npackage com.heyqing;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\n/**\n * ClassName:QuickSort\n * Package:com.heyqing\n * Description:\n * 快速排序\n *\n * @Date:2024/10/16\n * @Author:Heyqing\n */\npublic class QuickSort {\n\n    /**\n     * 外部调用接口 - 第一版本\n     *\n     * @param source\n     */\n    public static void sortV1(int[] source) {\n        quickV1(source);\n    }\n\n    /**\n     * 外部调用接口 - 第二版本\n     *\n     * @param source\n     */\n    public static void sortV2(int[] source) {\n        quickV2(source);\n    }\n\n    /**\n     * 外部调用接口 - 第三版本\n     *\n     * @param source\n     */\n    public static void sortV3(int[] source) {\n        quickV3(source);\n    }\n\n    /**\n     * 外部调用接口 - Java库函数\n     *\n     * @param source\n     */\n    public static void sort(int[] source) {\n        quick(source);\n    }\n\n    /**\n     * 排序具体实现 - v1\n     *\n     * @param nums\n     */\n    private static void quickV1(int[] nums) {\n        /*\n         使用最后一个数 n 作为划分值\n         使得n前面的所有数以荷兰国旗式划分开\n         划分完后使用大于区域的第一个数与 n 交换\n         然后对 n 左右区域做递归处理\n         */\n        int start = 0, end = nums.length;\n        achieveFunctionQuickV1(nums, start, end);\n    }\n\n    /**\n     * 实现函数 - v1\n     *\n     * @param nums\n     * @param start\n     * @param end\n     */\n    private static void achieveFunctionQuickV1(int[] nums, int start, int end) {\n        if (start >= end) return;\n        int position = DutchFlagV1(nums, start, end);\n        swap(nums, position + 1, end - 1);\n        //左边\n        achieveFunctionQuickV1(nums, start, position + 1);\n        //右边\n        achieveFunctionQuickV1(nums, position + 2, end);\n    }\n\n\n    /**\n     * 排序具体实现 - v2\n     *\n     * @param nums\n     */\n    private static void quickV2(int[] nums) {\n        /*\n         使用最后一个数 n 作为划分值\n         使得n前面的所有数以荷兰国旗式划分开\n         划分完后使用大于区域的第一个数与 n 交换\n         然后对 n 左右区域做递归处理\n         与第一版不同的是将等于部分置于中间\n         */\n        int start = 0, end = nums.length;\n        achieveFunctionQuickV2(nums, start, end);\n    }\n\n    /**\n     * 实现函数 - v2\n     *\n     * @param nums\n     * @param start\n     * @param end\n     */\n    private static void achieveFunctionQuickV2(int[] nums, int start, int end) {\n        if (start >= end) return;\n        //一最后一个数为分界数，返回第一个大于和最后一个小于分界数的下标\n        int[] positions = DutchFlagV2(nums, start, end);\n        //左边\n        achieveFunctionQuickV2(nums, start, positions[0]);\n        //右边\n        achieveFunctionQuickV2(nums, positions[1], end);\n    }\n\n\n    /**\n     * 排序具体实现 - v3\n     *\n     * @param nums\n     */\n    private static void quickV3(int[] nums) {\n        /*\n         随机选择数组中的一个数作为分界数\n         使得n前面的所有数以荷兰国旗式划分开\n         划分完后使用大于区域的第一个数与 n 交换\n         然后对 n 左右区域做递归处理\n         与第二版不同的是随机选取数EX = n log n\n         */\n        int start = 0, end = nums.length;\n        achieveFunctionQuickV3(nums, start, end);\n    }\n\n    /**\n     * 实现函数 - v3\n     *\n     * @param nums\n     * @param start\n     * @param end\n     */\n    private static void achieveFunctionQuickV3(int[] nums, int start, int end) {\n        if (start >= end) return;\n        //随机选取\n        Random r = new Random();\n        int randomIndex = r.nextInt(end - start) + start;\n        swap(nums, randomIndex, end - 1);\n        int[] positions = DutchFlagV3(nums, start, end);\n        //左边\n        achieveFunctionQuickV3(nums, start, positions[0] + 1);\n        //右边\n        achieveFunctionQuickV3(nums, positions[1], end);\n    }\n\n\n    /**\n     * 排序具体实现 - java依赖库\n     * <p>\n     * 双轴快速排序（Dual-Pivot Quicksort）算法\n     *\n     * @param nums\n     */\n    private static void quick(int[] nums) {\n        /*\n         Java中的Arrays.sort方法底层使用的排序算法依赖于数组的类型和大小。对于基本数据类型数组（如int[], long[]等）\n         Arrays.sort使用的是双轴快速排序（Dual-Pivot Quicksort）算法，这是一种优化过的快速排序算法\n         由Vladimir Yaroslavskiy、Jon Bentley和Joshua Bloch提出\n         它在许多数据集上提供了接近O(n log n)的性能，通常比传统的单轴快速排序更快\n         */\n        Arrays.sort(nums);\n    }\n\n\n    /**\n     * 荷兰国旗算法 - v1\n     * <p>\n     * 给定一个数组 nums 数组中的最后一个数为 target\n     * <p>\n     * 要求将数组 nums 中所有小于等于 target 的数置于左侧，大于的数置于右侧\n     * <p>\n     * 返回分界值 position ：小于等于 position 的数值为 小于等于 target 的值\n     *\n     * @param nums\n     * @param start\n     * @param end\n     * @return\n     */\n    private static int DutchFlagV1(int[] nums, int start, int end) {\n        int len = end - start, position = start - 1, target = nums[end - 1];\n        for (int i = start; i < len - 1; i++) {\n            if (nums[i] <= target) {\n                swap(nums, i, position + 1);\n                position++;\n            }\n        }\n        return position;\n    }\n\n\n    /**\n     * 荷兰国旗算法 - v2\n     * <p>\n     * 给定一个数组 nums 数组中的最后一个数为 target\n     * <p>\n     * 要求将数组 nums 中所有小于 target 的数置于左侧，等于的数置于中间，大于的数置于右侧\n     * <p>\n     * 返回分界值 positions ：小于的边界，大于的边界\n     *\n     * @param nums\n     * @param start\n     * @param end\n     * @return\n     */\n    private static int[] DutchFlagV2(int[] nums, int start, int end) {\n        int target = nums[end - 1];\n        //初始化边界数组\n        int[] positions = new int[]{start - 1, end};\n        for (int i = start; i < positions[1]; i++) {\n            if (nums[i] < target) {\n                //小于\n                swap(nums, i, positions[0] + 1);\n                positions[0]++;\n            } else if (nums[i] > target) {\n                //大于\n                swap(nums, i, positions[1] - 1);\n                positions[1]--;\n                i--;\n            }\n        }\n        return positions;\n    }\n\n    /**\n     * 荷兰国旗算法 - v3\n     * <p>\n     * 给定一个数组 nums 数组中的随机一个数为 target\n     * <p>\n     * 要求将数组 nums 中所有小于 target 的数置于左侧，等于的数置于中间，大于的数置于右侧\n     * <p>\n     * 返回分界值 positions ：小于的边界，大于的边界\n     *\n     * @param nums\n     * @param start\n     * @param end\n     * @return\n     */\n    private static int[] DutchFlagV3(int[] nums, int start, int end) {\n        int target = nums[end - 1];\n        //初始化边界数组\n        int[] positions = new int[]{start - 1, end};\n        for (int i = start; i < positions[1]; i++) {\n            if (nums[i] < target) {\n                //小于\n                swap(nums, i, positions[0] + 1);\n                positions[0]++;\n            } else if (nums[i] > target) {\n                //大于\n                swap(nums, i, positions[1] - 1);\n                positions[1]--;\n                i--;\n            }\n        }\n        return positions;\n    }\n\n    /**\n     * 交换两个数\n     *\n     * @param nums\n     * @param i\n     * @param j\n     */\n    private static void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n\n```\n\n## 归并排序（Merge Sort）\n\n### 算法描述\n\n归并排序是一种经典的排序算法，它同样采用分而治之的策略。归并排序将数组分成若干个小组，然后对每个小组进行排序，最后将这些小组合并成一个有序的数组。\n\n### 算法步骤\n\n1. 将数组分成两半。\n2. 递归地将这两半分别排序。\n3. 合并两个已排序的半部分。\n\n### 时间复杂度\n\n- 最好、最坏和平均情况：$O(n log n)$，因为归并排序总是将数组分成两半，然后合并，合并操作的时间复杂度是线性的，而分治过程的时间复杂度是对数级的。\n\n### 空间复杂度\n\n- 空间复杂度是 $O(n)$，因为归并排序需要与原数组相同大小的额外空间来存储合并后的数组。\n\n### 代码实现\n\n```java\npackage com.heyqing;\n\n/**\n * ClassName:MergeSort\n * Package:com.heyqing\n * Description:\n * 归并排序\n *\n * @Date:2024/10/16\n * @Author:Heyqing\n */\npublic class MergeSort {\n\n    /**\n     * 外部调用接口\n     *\n     * @param source\n     */\n    public static void sort(int[] source) {\n        merge(source);\n    }\n\n    /**\n     * 排序具体实现\n     *\n     * @param nums\n     */\n    private static void merge(int[] nums) {\n        int start = 0, end = nums.length - 1;\n        achieveFuncMerge(nums, start, end);\n    }\n\n    /**\n     * 实现函数\n     *\n     * @param nums\n     * @param start\n     * @param end\n     */\n    private static void achieveFuncMerge(int[] nums, int start, int end) {\n        if (start >= end) return;\n        //找到中间索引 防止溢出\n        int mid = start + ((end - start) >> 1);\n        //分别对左右两部分进行归并排序\n        //左边\n        achieveFuncMerge(nums, start, mid);\n        //右边\n        achieveFuncMerge(nums, mid + 1, end);\n        //合并两个已排序的部分\n        mergeSortNums(nums, start, mid, end);\n    }\n\n    /**\n     * 合并两个已排序的部分\n     *\n     * @param nums\n     * @param start\n     * @param mid\n     * @param end\n     */\n    private static void mergeSortNums(int[] nums, int start, int mid, int end) {\n        //计算两个子数组的长度\n        int len1 = mid - start + 1;\n        int len2 = end - mid;\n        //创建临时数组\n        int[] L = new int[len1];\n        int[] R = new int[len2];\n        //将数据拷贝到临时数组中\n        System.arraycopy(nums, start, L, 0, len1);\n        System.arraycopy(nums, mid + 1, R, 0, len2);\n        //合并临时数组\n        int i = 0, j = 0;\n        int k = start;\n        while (i < len1 && j < len2) {\n            if (L[i] <= R[j]) {\n                nums[k] = L[i];\n                i++;\n            } else {\n                nums[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n        // 拷贝L中剩余的元素\n        while (i < len1) {\n            nums[k] = L[i];\n            i++;\n            k++;\n        }\n        // 拷贝R中剩余的元素\n        while (j < len2) {\n            nums[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n}\n```\n\n## 堆排序（Heap Sort）\n\n### 算法描述\n\n堆排序是一种基于比较的排序算法。它利用堆这种数据结构的特性来进行排序，堆是一种近似完全二叉树的结构，并同时满足堆积的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。\n\n### 算法步骤\n\n1. **建堆（Heapify）**：将无序的输入数据构造成一个最大堆（或最小堆），确保每个父节点的值都大于或等于其子节点的值（最大堆）。\n2. **交换和调整**：将堆顶元素（最大值或最小值）与堆的最后一个元素交换，然后减少堆的大小，对剩余的堆进行调整，使其满足堆的性质。\n3. **重复交换和调整**：重复上述交换和调整步骤，直到堆的大小为1，此时整个数组已经有序。\n\n### 时间复杂度\n\n- 最好、最坏和平均情况：$O(n log n)$，因为建堆的时间复杂度是$O(n)$，每次调整堆的时间复杂度是$O(log n)$，而需要调整$n-1$次。\n\n### 空间复杂度\n\n- 空间复杂度是$O(1)$，因为堆排序是在原地进行排序，不需要额外的存储空间。\n\n### 代码实现\n\n```java\npackage com.heyqing;\n\n/**\n * ClassName:HeapSort\n * Package:com.heyqing\n * Description:\n * 堆排序\n *\n * @Date:2024/10/16\n * @Author:Heyqing\n */\npublic class HeapSort {\n    /**\n     * 外部调用接口\n     *\n     * @param source\n     */\n    public static void sort(int[] source) {\n        heap(source);\n    }\n\n    /**\n     * 排序具体实现\n     *\n     * @param nums\n     */\n    private static void heap(int[] nums) {\n        int n = nums.length;\n        //构建堆\n        for (int i = n / 2 - 1; i >= 0; i--) {\n            heapify(nums, n, i);\n        }\n        //一个个从堆顶取出元素\n        for (int i = n - 1; i >= 0; i--) {\n            // 当前堆顶元素（最大值）与最后一个元素交换\n            swap(nums, i, 0);\n            //调整剩余堆\n            heapify(nums, i, 0);\n        }\n    }\n\n    /**\n     * 堆化\n     *\n     * @param nums\n     * @param n\n     * @param i\n     */\n    private static void heapify(int[] nums, int n, int i) {\n        int largest = i; // 初始化最大元素索引为根节点\n        int left = 2 * i + 1; // 左子节点\n        int right = 2 * i + 2; // 右子节点\n        // 如果左子节点大于根节点\n        if (left < n && nums[left] > nums[largest]) {\n            largest = left;\n        }\n        // 如果右子节点比最大元素还大\n        if (right < n && nums[right] > nums[largest]) {\n            largest = right;\n        }\n        // 如果最大元素不是根节点\n        if (largest != i) {\n            swap(nums, i, largest);\n            // 递归地调整受影响的子树\n            heapify(nums, n, largest);\n        }\n    }\n\n    /**\n     * 交换两个数\n     *\n     * @param nums\n     * @param i\n     * @param j\n     */\n    private static void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n```\n\n## 希尔排序（Shell Sort）\n\n### 算法描述\n\n希尔排序，也称为缩小增量排序，是一种插入排序的改进版本。它通过比较距离较远的元素来工作，其核心理念是使数组中任意间隔为h的元素都是有序的。这样的数组被称为h有序数组。希尔排序通过逐渐减小h的值，最终使用插入排序将数组完全排序。\n\n### 算法步骤\n\n1. 选择一个增量序列t1, t2, …, tk，其中ti > tj，tk = 1。\n2. 根据当前增量ti，将待排序序列分成若干个长度为m的子序列，所有距离为ti的元素被分为同一个子序列。\n3. 分别对各子序列进行直接插入排序。\n4. 然后缩小增量，重复上述子序列划分和排序工作。\n5. 当增量缩减至1时，整个文件恰被分成一组，算法便终止。\n\n### 时间复杂度\n\n- 最好情况：$O(n log^2 n)$\n- 最坏情况：$O(n(log n)^2)$\n- 平均情况：依赖于增量序列的选择，通常在$O(n^(1.3))$到$O(n^(2))$之间。\n\n### 空间复杂度\n\n- 空间复杂度是$O(1)$，因为希尔排序是在原地进行排序，不需要额外的存储空间。\n\n### 代码实现\n\n```java\npackage com.heyqing;\n\n/**\n * ClassName:ShellSort\n * Package:com.heyqing\n * Description:\n * 希尔排序\n *\n * @Date:2024/10/16\n * @Author:Heyqing\n */\npublic class ShellSort {\n    /**\n     * 外部调用接口\n     *\n     * @param source\n     */\n    public static void sort(int[] source) {\n        shell(source);\n    }\n\n    /**\n     * 排序具体实现\n     *\n     * @param nums\n     */\n    private static void shell(int[] nums) {\n        int n = nums.length;\n        //初始增量，一般取数组长度的一半\n        for (int i = n / 2; i > 0; i /= 2) {\n            //对每个子序列进行插入排序\n            for (int j = i; j < n; j++) {\n                int temp = nums[j];\n                int k;\n                for (k = j; k >= i && nums[k - i] > temp; k -= i) {\n                    nums[k] = nums[k - i];\n                }\n                nums[k] = temp;\n            }\n        }\n    }\n}\n```\n\n## 计数排序（Counting Sort）\n\n### 算法描述\n\n计数排序是一种非比较型的整数排序算法。它将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n\n### 算法步骤\n\n1. 找出待排序的数组中最大和最小的元素。\n2. 统计数组中每个值为i的元素出现的次数，存入数组C的第i项。\n3. 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）。\n4. 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。\n\n### 时间复杂度\n\n- 最好、最坏和平均情况的时间复杂度都是O(n+k)，其中n是数组中元素的个数，k是数组中最大值与最小值的差。\n\n### 空间复杂度\n\n- 空间复杂度为O(n+k)，需要额外的数组来存储计数和输出数组。\n\n### 代码实现\n\n```java\npackage com.heyqing;\n\n/**\n * ClassName:CountingSort\n * Package:com.heyqing\n * Description:\n * 计数排序\n *\n * @Date:2024/10/16\n * @Author:Heyqing\n */\npublic class CountingSort {\n    /**\n     * 外部调用接口\n     *\n     * @param source\n     */\n    public static void sort(int[] source) {\n        counting(source);\n    }\n\n    /**\n     * 排序具体实现\n     *\n     * @param nums\n     */\n    private static void counting(int[] nums) {\n        /*\n        找出最大值max，然后开辟 max + 1 大小的空间计数\n        该算法局限与待比较数的大小规模\n         */\n        //找出数组中的最大值\n        int max = findMax(nums);\n        //初始化计数数组\n        int[] count = new int[max + 1];\n        for (int i = 0; i < nums.length; i++) {\n            count[nums[i]]++;\n        }\n        //累加计数数组\n        for (int i = 1; i < count.length; i++) {\n            count[i] += count[i - 1];\n        }\n        //反向填充目标数组\n        int[] output = new int[nums.length];\n        for (int i = nums.length - 1; i >= 0; i--) {\n            output[count[nums[i]] - 1] = nums[i];\n            count[nums[i]]--;\n        }\n        //将排序后的数组复制回原数组\n        System.arraycopy(output, 0, nums, 0, nums.length);\n    }\n\n    /**\n     * 找出数组中的最大数\n     *\n     * @param nums\n     * @return\n     */\n    private static int findMax(int[] nums) {\n        int max = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] > max) max = nums[i];\n        }\n        return max;\n    }\n}\n```\n\n## 基数排序（Radix Sort）\n\n### 算法描述\n\n基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。\n\n### 算法步骤\n\n1. 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。\n2. 从最低位开始，依次进行一次排序。\n3. 从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。\n\n### 时间复杂度\n\n- 最好、最坏和平均情况的时间复杂度都是$O(n*k)$，其中n是数组中元素的个数，k是数组中最大值的位数。\n\n### 空间复杂度\n\n- 空间复杂度为$O(n+k)$，其中n是数组中元素的个数，k是基数（例如十进制中k为10，即0-9）。\n\n### 代码实现\n\n```java\npackage com.heyqing;\n\n/**\n * ClassName:RadixSort\n * Package:com.heyqing\n * Description:\n * 基数排序\n *\n * @Date:2024/10/16\n * @Author:Heyqing\n */\npublic class RadixSort {\n\n    /**\n     * 外部调用接口\n     *\n     * @param source\n     */\n    public static void sort(int[] source) {\n        radix(source);\n    }\n\n    /**\n     * 排序具体实现\n     *\n     * @param nums\n     */\n    private static void radix(int[] nums) {\n        int max = findMax(nums), n = nums.length;\n        for (int i = 1; max / i > 0; i *= 10) {\n            achieveFuncRadix(nums, n, i);\n        }\n    }\n\n    /**\n     * 实现函数\n     *\n     * @param nums\n     * @param n\n     * @param exp\n     */\n    private static void achieveFuncRadix(int[] nums, int n, int exp) {\n        int[] output = new int[n];\n        int i;\n        int[] count = new int[10];\n        for (i = 0; i < n; i++)\n            count[(nums[i] / exp) % 10]++;\n        for (i = 1; i < 10; i++)\n            count[i] += count[i - 1];\n        for (i = n - 1; i >= 0; i--) {\n            output[count[(nums[i] / exp) % 10] - 1] = nums[i];\n            count[(nums[i] / exp) % 10]--;\n        }\n        System.arraycopy(output, 0, nums, 0, nums.length);\n    }\n\n    /**\n     * 找出数组中的最大数\n     *\n     * @param nums\n     * @return\n     */\n    private static int findMax(int[] nums) {\n        int max = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] > max) max = nums[i];\n        }\n        return max;\n    }\n}\n\n```\n\n## 桶排序（Bucket Sort）\n\n### 算法描述\n\n桶排序是一种将待排序数据分到几个有序的桶里，每个桶里的数据再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序），最后将各桶的数据依次取出，组成的序列就是有序的了。\n\n### 算法步骤\n\n1. 设置一个定量的数组当作空桶。\n2. 遍历输入数据，并且把数据一个一个放到对应的桶里去。\n3. 对每个不是空的桶进行排序。\n4. 从不是空的桶里把排好序的数据拼接起来。\n\n### 时间复杂度\n\n- 最好情况：$O(n + k)$，其中n是数组中元素的个数，k是桶的数量。当输入数据均匀分布时，每个桶的元素数量接近平衡。\n- 最坏情况：$O(n^2$)，当输入数据极度不均匀分布时，大部分数据都集中在同一个桶中。\n- 平均情况：$O(n + k)$，在平均情况下，桶排序的时间复杂度是线性的。\n\n### 空间复杂度\n\n- 空间复杂度为$O(n + k)$，n是数组中元素的个数，k是桶的数量。\n\n### 代码实现\n\n```java\npackage com.heyqing;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * ClassName:BucketSort\n * Package:com.heyqing\n * Description:\n * 桶排序\n *\n * @Date:2024/10/16\n * @Author:Heyqing\n */\npublic class BucketSort {\n    /**\n     * 外部调用接口\n     *\n     * @param source\n     */\n    public static void sort(float[] source) {\n        bucket(source);\n        print(source);\n    }\n\n    /**\n     * 排序具体实现\n     *\n     * @param nums\n     */\n    private static void bucket(float[] nums) {\n        int n = nums.length;\n        List<Float>[] buckets = new ArrayList[n];\n        for (int i = 0; i < n; i++) {\n            buckets[i] = new ArrayList<Float>();\n        }\n        for (float num : nums) {\n            int idx = (int) num * n;\n            buckets[idx].add(num);\n        }\n        for (List<Float> bucket : buckets) {\n            Collections.sort(bucket);\n        }\n        int index = 0;\n        for (List<Float> bucket : buckets) {\n            for (float num : bucket) {\n                nums[index++] = num;\n            }\n        }\n    }\n\n    /**\n     * 桶排序-内置打印\n     *\n     * @param nums\n     */\n    private static void print(float[] nums) {\n        System.out.println(\"桶排序-内置打印\");\n        System.out.print(\"\\t\");\n        for (float num : nums) {\n            System.out.print(num + \" \");\n        }\n    }\n\n}\n\n```\n\n## 附录\n\n### swap交换错误示例\n\n#### 代码示例\n\n```c\n#include<stdio.h>\n\nvoid swap();\n\nint main() {\n	swap();\n	return 0;\n}\n\nvoid swap() {\n	int a = 42;		//定义变量 a\n	int* pa = &a;	//定义指针 pa 指向变量 a 的存储地址\n 	int* pb = pa;	//定义指针 pb 等于 pa 同变量 a 的存储地址\n	printf(\"before the swap a = %d ,b = %d \\n\", a, *pb);	//打印运行前 a ，b 的值\n	a = a ^ (*pb);			//由于a和b是相同的，这里实际上执行的是 a = a ^ a\n	(*pb) = a ^ (*pb);		//现在a是0即*pb也为0，所以 b = 0 ^ b = 0 ^ 0 = 0\n	a = a ^ (*pb);			//现在a是0,*pb也为0，所以 a = 0 ^ 0 = 0\n	printf(\"after the swap a = %d ,b = %d\", a, *pb);		//打印运行后 a ，b 的值\n}\n\n```\n\n#### 运行结果\n\n![swaperror.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cb0d3f51a90665db2a84ab4d67437059.jpg)', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 12:28:52', '2024-12-03 12:33:36');
INSERT INTO `t_article` VALUES (148, 1024, 226, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3dbc7381c6dcba70b53c4ff64bcf479b.jpg', '链表解析：灵活高效的数据结构背后的秘密', '链表是一种灵活且高效的线性数据结构，它由一系列节点组成，每个节点包含数据和指向下一个节点的指针。与数组不同，链表的元素不需要连续存储，因此在进行插入和删除操作时，链表具有更高的效率。根据节点之间的连接方式，链表可以分为单向链表、双向链表和循环链表。单向链表的节点只指向下一个节点，双向链表的节点则既指向前一个节点也指向后一个节点，而循环链表则将尾节点与头节点相连，形成一个闭环。链表在动态内存管理和实现复杂数据结构（如队列、栈等）时，发挥着重要作用。', '# 链表\n\n## 简介\n\n链表是一种基本的数据结构，它由一系列节点（或称为元素）组成，这些节点在内存中不一定是连续的。每个节点通常包含两部分：一部分是存储数据的数据域，另一部分是存储指向下一个节点地址的指针域。链表的特点是可以动态地添加和删除节点，而且不需要像数组那样在创建时就确定其大小。链表的头节点是指向链表第一个节点的指针，而头指针是链表的入口点，用于访问链表中的元素。\n\n链表有几种类型，包括：\n\n- **单向链表**：每个节点只有一个指针，指向链表中的下一个节点。\n- **双向链表**：每个节点有两个指针，一个指向下一个节点，另一个指向前一个节点，允许双向遍历。\n- **循环链表**：最后一个节点的指针指向链表的第一个节点，形成一个环状结构。\n- **静态链表**：使用数组来模拟链表，每个数组元素存储数据的同时，还存储指向下一个元素的索引。\n\n下面以几个简单的题目例子来说明\n\n> 本文主要说明单向链表\n>\n> 更多代码(含运行示例)可前往：[Code](https://github.com/heyqing/csdn/tree/master/Algorithm/link)\n\n**注：链表题目一般不会很难，边界条件一定要选对**\n\n## 反转链表\n\n给定一个链表，返回该链表的逆序\n\n### 尾插法\n\n即用一个数组存储正向顺序，再逆向输出并尾插法即可(这里就不代码展示了)\n\n### 头插法\n\n使用递归思想，每次创建的都是后一个\n\n代码展示：\n\n```java\n/**\n* 反转链表\n*\n* @param head\n* @return\n*/\npublic static ListNode reverseLinked(ListNode head) {\n    return achieveFuncReverse(head, null);\n}\n\n/**\n* 反转链表实现函数\n*\n* @param head\n* @param last\n* @return\n*/\nprivate static ListNode achieveFuncReverse(ListNode head, ListNode last) {\n    if (Objects.isNull(head)) return last; // 如果需反转链表为空返回\n    // 将当前head值放入新node，将上一步的node放入next\n    ListNode cur = new ListNode(head.val, last); \n    //递归调用创建上一个\n    return achieveFuncReverse(head.next, cur);\n}\n```\n\n## 回文链表\n\n给定一个链表判断当前链表是否为回文链表\n\n回文链表： 正向读等于反向读的链表，1-> 2 -> 3 -> 4 -> 3 -> 2 -> 1, 1 -> 2 -> 3 -> 3 -> 2 -> 1\n\n### 辅助空间 - 栈 - 全压栈\n\n使用栈将链表中的所有值压入栈中，再从头遍历链表，每遍历一个栈中弹出一个，若全部相等则为回文链表，反之则不然\n\n___代码后面统一展示___\n\n### 辅助空间 - 栈 - 压一半\n\n只将链表中的一半数据压入栈中，然后与另一半进行比较，相当于将链表进行对折\n\n如何只压一半，或者说压到哪里就说明已经压了一半了，这里就要介绍一种方法——**快慢指针**\n\n使用快慢指针找链表中点，即快指针一次走两步，慢指针一次走一步，当快指针走到最后时慢指针刚刚到达链表中间\n\n### 快慢指针 - 反转链表 - 不使用辅助空间\n\n第三种方法只使用有限的变量而不去借助栈等辅助空间\n\n使用快慢指针，当慢指针到达中点时，将当前慢指针指向空，慢指针后面的逆序，然后一边从头，一边从尾依次遍历比较\n\n举例说明一下，元链表为\n\n```mermaid\ngraph LR\na((1)) --> b((2))\nb --> c((3))\nc --> d((4))\nd --> e((3))\ne --> f((2))\nf --> g((1))\n```\n\n转换之后的为\n\n```mermaid\ngraph LR\na((1)) --> b((2))\nb --> c((3))\nc --> d((4))\nf --> e((3))\ng((1)) --> f((2))\ne --> d\nd --> h((null))\n```\n\n然后从两边同步遍历，过程中若有一步不同则不是回文，若遍历到最后有一处为null，则说明过程中处处相等，即回文\n\n### 所有代码展示\n\n```java\npackage com.heyqing;\n\nimport java.util.Objects;\nimport java.util.Stack;\n\nimport static com.heyqing.LinkTools.*;\n\n/**\n * ClassName:IsPalindrome\n * Package:com.heyqing\n * Description:\n * 回文链表\n *\n * @Date:2024/10/19\n * @Author:Heyqing\n */\npublic class IsPalindrome {\n\n    /**\n     * 栈 - 全压\n     *\n     * @param head\n     * @return\n     */\n    public static boolean isPalindromeV1(ListNode head) {\n        Stack<Integer> stack = new Stack<>();\n        ListNode p = head;\n        while (Objects.nonNull(p)) {\n            stack.push(p.val);\n            p = p.next;\n        }\n        while (Objects.nonNull(head)) {\n            if (stack.pop() - head.val != 0) return false;\n            head = head.next;\n        }\n        return true;\n    }\n\n\n    /**\n     * 栈 - 压一半\n     *\n     * @param head\n     * @return\n     */\n    public static boolean isPalindromeV2(ListNode head) {\n        Stack<Integer> stack = new Stack<>();\n        /*\n        快慢指针\n         */\n        if (Objects.isNull(head) || Objects.isNull(head.next) || Objects.isNull(head.next.next)) {\n            return judgeLinkedLengthLess3(head);\n        }\n        ListNode quick = head.next.next;\n        ListNode slow = head.next;\n        stack.push(head.val);\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\n            quick = quick.next.next;\n            stack.push(slow.val);\n            slow = slow.next;\n        }\n        if (Objects.nonNull(quick)) slow = slow.next;\n        while (Objects.nonNull(slow)) {\n            if (stack.pop() - slow.val != 0) return false;\n            slow = slow.next;\n        }\n        return true;\n    }\n\n    /**\n     * 快慢指针 - 反转后一半\n     * <p>\n     * 不使用额外空间（有限的几个变量）\n     *\n     * @param head\n     * @return\n     */\n    public static boolean isPalindromeV3(ListNode head) {\n        if (Objects.isNull(head) || Objects.isNull(head.next) || Objects.isNull(head.next.next)) {\n            return judgeLinkedLengthLess3(head);\n        }\n        ListNode quick = head;\n        ListNode slow = head;\n        ListNode reverse = null;\n        while (Objects.nonNull(quick.next) && Objects.nonNull(quick.next.next)) {\n            slow = slow.next;\n            quick = quick.next.next;\n        }\n        /*\n         快指针指向慢指针\n         慢指针指向空\n         使用reverse反转\n         */\n        quick = slow.next;\n        slow.next = null;\n        while (Objects.nonNull(quick)) {\n            //记录下一个\n            reverse = quick.next;\n            //反转 指向上一个\n            quick.next = slow;\n            //记录当前位置，下一个的上一个\n            slow = quick;\n            //跳转至下一个\n            quick = reverse;\n        }\n        quick = head;\n        while (Objects.nonNull(slow) && Objects.nonNull(quick)) {\n            if (slow.val != quick.val) return false;\n            slow = slow.next;\n            quick = quick.next;\n        }\n        return true;\n    }\n\n    /**\n     * 长度小于 3 的链表\n     *\n     * @param head\n     * @return\n     */\n    private static boolean judgeLinkedLengthLess3(ListNode head) {\n        if (Objects.isNull(head) || Objects.isNull(head.next)) {\n            return true;\n        }\n        if (Objects.isNull(head.next.next)) {\n            return head.val == head.next.val;\n        } else {\n            return head.val == head.next.next.val;\n        }\n    }\n}\n```\n\n## 划分链表\n\n给定一个链表，和一个划分数值 partition，结果将小于partition的node置于左边，等于的放中间，大于的放右边\n\n与荷兰国旗问题一致，有关荷兰国旗问题，在 [十大经典排序](https://blog.csdn.net/heyiqingsong/article/details/143024462) 中的**快速**排序**代码**中有所提及\n\n```mermaid\ngraph LR\na(partition = 5)\nb((5)) --> c((4))\nc --> d((7))\nd --> e((2))\ne --> f((5))\nf --> g((8))\n```\n\n划分后的链表为\n\n```mermaid\ngraph LR\nb((4)) --> c((2))\nc --> d((5))\nd --> e((5))\ne --> f((8))\nf --> g((7))\n```\n\n小于、大于区域的node顺序不做要求\n\n### 辅助空间 - 数组\n\n将node存入数组，对数组进行荷兰国旗式的划分，再将node依次串起来\n\n### 有限变量 - 不使用辅助空间\n\n只是用7个变量实现划分，且保证稳定性\n\n定义node变量 小于首sh，小于尾st，等于首eh，等于尾et，大于首mh，大于尾mt，下一节点next\n\n从头遍历链表若小于partition，若sh为空将sh指向当前节点，将st的下一节点指向当前节点，然后将st等图当前节点，依次进行，等于大于同理，最后将两条链表串起来\n\n举例说明，依次获得三条链表\n\n```mermaid\ngraph LR\na[...]\nb[...]\nc[...]\nsh --> a\na --> st\neh --> b\nb -->et\nmh --> c\nc --> mt\n```\n\n然后将三条链表串起来即可\n\n```mermaid\ngraph LR\na[...]\nb[...]\nc[...]\nsh --> a\na --> st\neh --> b\nb -->et\nmh --> c\nc --> mt\nst --> eh\net --> mh\n```\n\n### 所有代码展示\n\n```java\npackage com.heyqing;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * ClassName:PartitionLinked\n * Package:com.heyqing\n * Description:\n * 划分链表\n *\n * @Date:2024/10/19\n * @Author:Heyqing\n */\npublic class PartitionLinked {\n\n    /**\n     * 划分链表 - 数组\n     *\n     * @param head\n     * @return\n     */\n    public static ListNode partitionLinkedV1(ListNode head, int target) {\n        if (Objects.isNull(head)) return null;\n        List<ListNode> listNodes = new ArrayList<>();\n        while (Objects.nonNull(head)) {\n            listNodes.add(head);\n            head = head.next;\n        }\n        //划分\n        int size = listNodes.size(), min = -1, max = size;\n        for (int i = 0; i < max; i++) {\n            if (listNodes.get(i).val < target) {\n                //小于\n                swap(listNodes, i, min + 1);\n                min++;\n            } else if (listNodes.get(i).val > target) {\n                //大于\n                swap(listNodes, i, max - 1);\n                i--;\n                max--;\n            }\n        }\n        //串起来\n        ListNode result = new ListNode();\n        ListNode p = result;\n        for (int i = 0; i < size; i++) {\n            p.next = listNodes.get(i);\n            p = p.next;\n        }\n        p.next = null;\n        return result.next;\n    }\n\n    /**\n     * 划分链表 - 有限变量\n     * <p>\n     * 保证稳定性\n     *\n     * @param head\n     * @param target\n     * @return\n     */\n    public static ListNode partitionLinkedV2(ListNode head, int target) {\n        //定义小于 等于 大于 的首位指针\n        ListNode sh = null, st = null, eh = null, et = null, mh = null, mt = null, next = null;\n        while (Objects.nonNull(head)) {\n            next = head.next;\n            head.next = null;\n            if (head.val < target) {\n                //小于\n                if (Objects.isNull(sh)) {\n                    sh = head;\n                } else {\n                    st.next = head;\n                }\n                st = head;\n            } else if (head.val == target) {\n                //等于\n                if (Objects.isNull(eh)) {\n                    eh = head;\n                } else {\n                    et.next = head;\n                }\n                et = head;\n            } else {\n                //大于\n                if (Objects.isNull(mh)) {\n                    mh = head;\n                } else {\n                    mt.next = head;\n                }\n                mt = head;\n            }\n            head = next;\n        }\n        if (Objects.nonNull(st)) {\n            st.next = eh;\n            et = Objects.isNull(et) ? st : et;\n        }\n        if (Objects.nonNull(et)) {\n            et.next = mh;\n        }\n        return Objects.nonNull(sh) ? sh : (Objects.nonNull(eh) ? eh : mh);\n    }\n\n    private static void swap(List<ListNode> listNodes, int i, int j) {\n        ListNode temp = listNodes.get(i);\n        listNodes.set(i, listNodes.get(j));\n        listNodes.set(j, temp);\n    }\n\n}\n```\n\n## 判断成环链表\n\n给定一个链表判断链表中是否有环\n\n环形链表展示\n\n```mermaid\ngraph LR\na --> b\nb --> c\nc --> d\nd --> f\nf --> g\ng --> h\nh --> i\ni --> j\nj --> f\n```\n\n### 辅助空间 - 集合\n\n使用set集合存储节点hashCode或地址，若添加成功继续，否则成环，第一个失败的为入环节点\n\n若遍历至空则说明不成环\n\n### 快慢指针 - 不使用辅助空间\n\n快指针一次走两步，慢指针一次一步，若快指针为空则不成环，否则快慢指针必相遇，相遇即成环\n\n相遇后快指针指向头，慢指针不动，然后快慢指针一次都走一步，再相遇时的节点为入环节点\n\n___代码在相交链表中一同展示（下一问题）___\n\n## 相交链表\n\n给定两个链表，有可能成环有可能不成环，判断这两个链表是否相交\n\n**两个都不成环**：只有一种情况\n\n```mermaid\ngraph LR\na --> b\nb --> c\nc --> d\nd --> e\nf --> g\ng --> h\nh --> d\n```\n\n这种情况下相同特征为相交节点后的节点相同（hashCode或地址），也就是说最后一个节点的hashCode或地址必相同 ——相同即相交，不相同即不相交\n\n**一个成环一个不成环**：必不相交\n\n**两个都成环**:有三种情况\n\n- 不相交 - 各自成环 - 入环节点不同\n\n  ```mermaid\n  graph LR\n   a --> b\n   b --> c\n   c --> d\n   d --> f\n   f --> e\n   e --> d\n   1 -->2\n   2 -->3\n   3 -->4\n   4 -->5\n   5 -->6\n   6 -->4\n  ```\n\n- 相交 - 入环节点相同\n\n  ```mermaid\n  graph LR\n  a --> b\n  b --> c\n  c --> d\n  d --> A\n  A --> B\n  B --> C\n  C --> D\n  D --> B\n  1 --> 2\n  2 --> 3\n  3 --> 4\n  4 --> A\n  ```\n\n- 相交 - 入环节点不同\n\n  ```mermaid\n  graph LR\n  1 --> 2\n  2 --> 3\n  3 --> 4\n  a --> b\n  b --> c\n  c --> d\n  A --> B\n  B --> C\n  C --> D\n  D --> F\n  F --> A\n  4 --> A\n  d --> D\n  ```\n\n相同入环节点，必相交\n\n不同入环节点，两链表各自都移动至入环节点，一个不动 (head1)，另一个移动一圈(head2)，若在移动过程中head2的hashCode或地址等于head1则说明相交，反之则不相交\n\n### 代码展示\n\n```java\npackage com.heyqing;\n\nimport java.util.*;\n\n/**\n * ClassName:HasCycle\n * Package:com.heyqing\n * Description:\n * 环形链表\n *\n * @Date:2024/10/19\n * @Author:Heyqing\n */\npublic class HasCycle {\n\n    /**\n     * 判断成环 -集合\n     *\n     * @param head\n     * @return\n     */\n    public static boolean hasCycleV1(ListNode head) {\n        /*\n        使用hashcode与set\n         */\n        Set<Integer> set = new HashSet<>();\n        while (Objects.nonNull(head)) {\n            if (!set.add(head.hashCode())) return true;\n            head = head.next;\n        }\n        return false;\n    }\n\n    /**\n     * 判断成环 -快慢指针\n     *\n     * @param head\n     * @return\n     */\n    public static boolean hasCycleV2(ListNode head) {\n        ListNode quick = head;\n        ListNode slow = head;\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\n            quick = quick.next.next;\n            slow = slow.next;\n            if (Objects.equals(quick, slow)) return true;\n        }\n        return false;\n    }\n\n    /**\n     * 获取入环节点\n     *\n     * @param head\n     * @return\n     */\n    public static List<Integer> getEnterCycleNode(ListNode head) {\n        /*\n        获取入环节点有多种解，这里只说明快慢指针的方式\n        快指针一次两步，慢指针一次一步\n        相遇后，慢指针不动，快指针指向头部\n        再次相遇节点为入环节点\n         */\n        if (Objects.isNull(head)) return null;\n        List<Integer> list = new ArrayList<>(3);\n        ListNode quick = head;\n        ListNode slow = head;\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\n            quick = quick.next.next;\n            slow = slow.next;\n            if (Objects.equals(quick, slow)) break;\n        }\n        quick = head;\n        int count = 1;\n        while (Objects.nonNull(quick)) {\n            count++;\n            quick = quick.next;\n            slow = slow.next;\n            if (Objects.equals(quick, slow)) break;\n        }\n        list.add(count);\n        list.add(quick.val);\n        list.add(quick.hashCode());\n        return list;\n    }\n\n    /**\n     * 判断相交链表\n     * <p>\n     * 成环 - 相交 / 不相交\n     * 不成环 - 相交 / 不相交\n     *\n     * @param head1\n     * @param head2\n     * @return\n     */\n    public static boolean intersectLinked(ListNode head1, ListNode head2) {\n        //判断有无环\n        boolean isCycleByHead1 = hasCycleV2(head1);\n        boolean isCycleByHead2 = hasCycleV2(head2);\n        if ((isCycleByHead1 && !isCycleByHead2) || (!isCycleByHead1 && isCycleByHead2)) {\n            //一个成环一个不成环 - 必不相交\n            return false;\n        }\n        //不成环\n        if (!isCycleByHead1) {\n            return intersectLinkedByNoCycle(head1, head2);\n        }\n        //成环\n        return intersectLinkedByCycle(head1, head2);\n    }\n\n    /**\n     * 判断相交 - 成环\n     *\n     * @param head1\n     * @param head2\n     * @return\n     */\n    private static boolean intersectLinkedByCycle(ListNode head1, ListNode head2) {\n        /*\n        获取其入环节点\n        如果其入环节点相等必相交\n        如果不等分各自成环（2个环），共成环（1个环）\n        入环后一个不动，一个走一圈，若期间碰到相交反之不相交\n         */\n        ListNode cur2 = head2;\n        List<Integer> enterCycleNodeByHead1 = getEnterCycleNode(head1);\n        List<Integer> enterCycleNodeByHead2 = getEnterCycleNode(head2);\n        Integer head1Point = enterCycleNodeByHead1.get(2);\n        Integer head2Point = enterCycleNodeByHead2.get(2);\n        //让 cur1不动\n        while (cur2.hashCode() != head2Point) {\n            cur2 = cur2.next;\n        }\n        cur2 = cur2.next;\n        while (cur2.hashCode() != head2Point) {\n            if (cur2.hashCode() == head1Point) return true;\n            cur2 = cur2.next;\n        }\n        return false;\n    }\n\n    /**\n     * 判断相交 - 无环\n     *\n     * @param head1\n     * @param head2\n     * @return\n     */\n    private static boolean intersectLinkedByNoCycle(ListNode head1, ListNode head2) {\n        ListNode cur1 = head1, cur2 = head2;\n        while (Objects.nonNull(cur1.next)) {\n            cur1 = cur1.next;\n        }\n        while (Objects.nonNull(cur2.next)) {\n            cur2 = cur2.next;\n        }\n        /*\n        如果相交，最后必有相等部分，其中最后一个比相等\n        若不等就不相交\n         */\n        return cur1.hashCode() == cur2.hashCode();\n    }\n}\n```\n\n', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 12:33:21', '2024-12-03 12:38:39');
INSERT INTO `t_article` VALUES (149, 1024, 226, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/4be07f5c952b434ce4eafab60e1dd61f.jpg', '“二叉树探索：从基础到应用，揭开数据结构的奥秘”', '二叉树是一种基础且重要的树形数据结构，其中每个节点最多有两个子节点，通常被称为左子节点和右子节点。它在计算机科学中广泛应用，特别是在数据查找、排序、表达式解析等领域。二叉树的种类繁多，最常见的包括二叉搜索树、平衡二叉树（如AVL树）和堆等。通过不同的遍历方法（前序、中序、后序、层序），二叉树可以以多种方式被操作和访问。由于其结构简单且查找、插入、删除等操作高效，二叉树在很多算法和数据结构中发挥着关键作用。本文将深入探讨二叉树的基本概念、常见类型及其应用，帮助你掌握这一重要的数据结构。', '## 简介\n\n> 本文主要以代码说明为主，若有不理解，或有错误地方可留言指出说明，感谢`^_^`\n>\n> 更多代码: [code](https://github.com/heyqing/csdn/tree/master/Algorithm/tree/src/com/heyqing)\n\n### 二叉树的基本概念\n\n二叉树是一种非线性的数据结构，它由节点组成，每个节点最多有两个子节点，通常称为左子节点和右子节点。二叉树的特点是每个节点的子节点数量不超过2，且子节点的位置是固定的，即左子节点在右子节点之前。二叉树可以是空的，也可以包含一个或多个节点。在二叉树中，根节点位于最高层级，没有父节点，而其他所有节点都至少有一个父节点\n\n### 二叉树的特殊类型\n\n- **满二叉树**:每一层的节点数都达到最大值，即除了最后一层外，每层都完全填满，且所有节点都尽可能地向左对齐\n- **完全二叉树**:除了最后一层外，其他各层的节点数都达到最大值，且最后一层的节点都连续集中在左侧。满二叉树是完全二叉树的一种特例\n- **平衡二叉树**:也称为$AVL$树，是一种特殊的二叉搜索树。它的特点是任何节点的两个子树的高度差的绝对值不超过1，并且左子树和右子树也都是平衡二叉树\n- **搜索二叉树**:如果树非空，则树的根节点的值要么是小于其左子树中所有节点的值，要么是大于其右子树中所有节点的值;树的左子树和右子树本身也必须是二叉搜索树\n\n### 二叉树的性质\n\n- 对于非空二叉树，第i层最多有 $2^{i−1}$个节点。\n- 深度为h的二叉树最多有 $2^h−1$个节点。\n- 具有n个节点的满二叉树的高度 $h=log⁡(n+1)$（以2为底）。\n- 在完全二叉树中，如果按照从上至下从左至右的数组顺序对所有节点进行编号，则第i个节点的双亲节点编号为 $⌊(i−1)/2⌋$，左孩子节点编号为 $2i+1$ ，右孩子节点编号为 $2i+2$\n\n### 二叉树的遍历\n\n- **前序遍历**：先访问根节点，再遍历左子树，最后遍历右子树。\n- **中序遍历**：先遍历左子树，再访问根节点，最后遍历右子树。在二叉搜索树中，中序遍历会得到一个升序列。\n- **后序遍历**：先遍历左子树和右子树，最后访问根节点。\n- **层次遍历**：按照树的层次从上到下、从左到右进行遍历，通常使用队列来辅助实现\n\n## 二叉树的特殊类型\n\n### 满二叉树与完全二叉树\n\n```java\npackage com.heyqing;\n\nimport java.util.LinkedList;\nimport java.util.Objects;\nimport java.util.Queue;\n\n/**\n * ClassName:CompleteBinaryTree\n * Package:com.heyqing\n * Description:\n *\n * @Date:2024/10/23\n * @Author:Heyqing\n */\npublic class CompleteBinaryTree {\n\n    /**\n     * 判断完全二叉树\n     *\n     * @param root\n     * @return\n     */\n    public static boolean judgeBCT(TreeNode root) {\n        /*\n        使用层次遍历\n        碰到第一个无右树的节点后的所有节点必须为叶子节点，否则就不是完全二叉树\n         */\n        if (Objects.isNull(root)) return false;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        boolean noRight = false;\n        while (!queue.isEmpty()) {\n            int loop = queue.size();\n            for (int i = 0; i < loop; i++) {\n                TreeNode first = queue.poll();\n                /*\n                碰到第一个无右树节点后，发现有不是叶子节点的节点 - false\n                 */\n                if (noRight && (Objects.nonNull(first.left) || Objects.nonNull(first.right))) {\n                    return false;\n                }\n                /*\n                有右没左 - false\n                 */\n                if (Objects.isNull(first.left) && Objects.nonNull(first.right)) {\n                    return false;\n                }\n                if (Objects.nonNull(first.left)) {\n                    queue.offer(first.left);\n                }\n                if (Objects.nonNull(first.right)) {\n                    queue.offer(first.right);\n                } else {\n                    /*\n                    第一个无右树的节点\n                     */\n                    noRight = true;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n### 平衡二叉树\n\n```java\npackage com.heyqing;\n\nimport java.util.Objects;\n\n/**\n * ClassName:BalancedBinaryTree\n * Package:com.heyqing\n * Description:\n * 平衡二叉树\n *\n * @Date:2024/10/24\n * @Author:Heyqing\n */\npublic class BalancedBinaryTree {\n    /*\n    平衡二叉树 : | left.height - right.height | <= 1\n     */\n\n\n    /**\n     * 平衡二叉树判断返回类\n     */\n    private static class BalanceInfo {\n        /**\n         * 是否为平衡二叉树\n         */\n        private boolean isBalance;\n\n        /**\n         * 树高\n         */\n        private int height;\n\n        public BalanceInfo(boolean isBalance, int height) {\n            this.isBalance = isBalance;\n            this.height = height;\n        }\n    }\n\n    /**\n     * 判断平衡二叉树\n     *\n     * @param root\n     * @return\n     */\n    public static boolean isBBT(TreeNode root) {\n        return achieveFuncByBalance(root).isBalance;\n    }\n\n    /**\n     * 是否为平衡二叉树 - 实现函数\n     *\n     * @param root\n     * @return\n     */\n    private static BalanceInfo achieveFuncByBalance(TreeNode root) {\n        /*\n        是否为平衡二叉树需要满足：左子树和右子树为平衡二叉树，自己的左右子树高度差小于等于 1\n         */\n        // 触底返回 - 叶子节点是平衡二叉树\n        if (Objects.isNull(root)) return new BalanceInfo(true, 0);\n        // 获取当前树的左子树\n        BalanceInfo left = achieveFuncByBalance(root.left);\n        // 获取当前树的右子树\n        BalanceInfo right = achieveFuncByBalance(root.right);\n        // 当前树高等于 ：子树最大高度 + 1\n        int height = Math.max(left.height, right.height) + 1;\n        // 当前树是不是平衡二叉树 ：左子树是平衡二叉树 and 右子树是平衡二叉树 and 自己的左右子树高度差小于 1\n        boolean isBalance = left.isBalance && right.isBalance && Math.abs(left.height - right.height) <= 1;\n        // 将当前树返回至顶层\n        return new BalanceInfo(isBalance, height);\n    }\n\n\n}\n```\n\n### 搜索二叉树\n\n```java\npackage com.heyqing;\n\nimport java.util.Objects;\n\n/**\n * ClassName:SearchBinaryTree\n * Package:com.heyqing\n * Description:\n * 搜索二叉树\n *\n * @Date:2024/10/22\n * @Author:Heyqing\n */\npublic class SearchBinaryTree {\n\n    /**\n     * 判断是否为搜索二叉树\n     *\n     * @param root\n     * @return\n     */\n    public static boolean judgeBST(TreeNode root) {\n        /*\n        搜索二叉树：左子树都比自己小，右子树都比自己大\n        使用中序遍历 LDR\n        左树为搜索二叉树，右树为搜索二叉树\n        左树的最大值小于 当前树\n        右树的最小数大于 当前树\n         */\n        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);\n    }\n\n    private static boolean isValidBST(TreeNode node, long minValue, long maxValue) {\n        if (Objects.isNull(node)) {\n            return true;\n        }\n        /*\n        小于最小值或大于最大值 - 不是搜索二叉树\n         */\n        if (node.val <= minValue || node.val >= maxValue) {\n            return false;\n        }\n        return isValidBST(node.left, minValue, node.val) && isValidBST(node.right, node.val, maxValue);\n    }\n}\n```\n\n## 二叉树的遍历\n\n### 前序遍历\n\n```java\npackage com.heyqing;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Stack;\n\n/**\n * ClassName:PreOrder\n * Package:com.heyqing\n * Description:\n * 先序遍历 ：DLR\n *\n * @Date:2024/10/21\n * @Author:Heyqing\n */\npublic class PreOrder {\n\n\n    /**\n     * 先序遍历 - 递归\n     *\n     * @param root\n     * @return\n     */\n    public static List<Integer> preOrderByRecursion(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        return achieveFuncByPOR(root, result);\n    }\n\n    /**\n     * 实现函数 - 先序遍历 - 递归\n     *\n     * @param root\n     * @param result\n     * @return\n     */\n    private static List<Integer> achieveFuncByPOR(TreeNode root, List<Integer> result) {\n        if (Objects.isNull(root)) return result;\n        result.add(root.val);\n        achieveFuncByPOR(root.left, result);\n        achieveFuncByPOR(root.right, result);\n        return result;\n    }\n\n    /**\n     * 先序遍历 - 非递归\n     *\n     * @param root\n     * @return\n     */\n    public static List<Integer> inOrderByNonRecursion(TreeNode root) {\n        /*\n        定义栈先将头压入\n        然后弹出，获得栈顶元素进行操作，弹出后将孩子节点压入栈中（先右再左）\n         */\n        if (Objects.isNull(root)) return null;\n        List<Integer> result = new ArrayList<>();\n        Stack<TreeNode> stack = new Stack<>();\n        stack.push(root);\n        while (!stack.isEmpty()) {\n            TreeNode top = stack.pop();\n            result.add(top.val);\n            //先右\n            if (Objects.nonNull(top.right)) {\n                stack.push(top.right);\n            }\n            //后左\n            if (Objects.nonNull(top.left)) {\n                stack.push(top.left);\n            }\n        }\n        return result;\n    }\n}\n```\n\n### 中序遍历\n\n```java\npackage com.heyqing;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Stack;\n\n/**\n * ClassName:InOrder\n * Package:com.heyqing\n * Description:\n * 中序遍历：LDR\n *\n * @Date:2024/10/21\n * @Author:Heyqing\n */\npublic class InOrder {\n\n    /**\n     * 中序遍历 - 递归\n     *\n     * @param root\n     * @return\n     */\n    public static List<Integer> inOrderByRecursion(TreeNode root) {\n        List<Integer> listLDR = new ArrayList<>();\n        return achieveFuncByIOR(root, listLDR);\n    }\n\n    /**\n     * 中序遍历递归 - 实现函数\n     *\n     * @param root\n     * @param listLDR\n     * @return\n     */\n    private static List<Integer> achieveFuncByIOR(TreeNode root, List<Integer> listLDR) {\n        if (Objects.isNull(root)) return listLDR;\n        achieveFuncByIOR(root.left, listLDR);\n        listLDR.add(root.val);\n        achieveFuncByIOR(root.right, listLDR);\n        return listLDR;\n    }\n\n    /**\n     * 中序遍历 - 非递归\n     *\n     * @param root\n     * @return\n     */\n    public static List<Integer> inOrderByNonRecursion(TreeNode root) {\n        /*\n        使用栈\n        先将左边界压栈\n        然后栈中一个 操作 再压入有孩子\n         */\n        List<Integer> listLDR = new ArrayList<>();\n        Stack<TreeNode> stack = new Stack<>();\n        pushAllLeftNode(stack, root);\n        while (!stack.isEmpty()) {\n            TreeNode top = stack.pop();\n            if (Objects.nonNull(top)) {\n                listLDR.add(top.val);\n                pushAllLeftNode(stack, top.right);\n            }\n        }\n        return listLDR;\n    }\n\n    /**\n     * 将所有左边界压入栈中\n     *\n     * @param stack\n     * @param root\n     */\n    private static void pushAllLeftNode(Stack<TreeNode> stack, TreeNode root) {\n        while (Objects.nonNull(root)) {\n            stack.push(root);\n            root = root.left;\n        }\n    }\n}\n```\n\n### 后序遍历\n\n```java\npackage com.heyqing;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Stack;\n\n/**\n * ClassName:PostOrder\n * Package:com.heyqing\n * Description:\n * 后序遍历:LRD\n *\n * @Date:2024/10/21\n * @Author:Heyqing\n */\npublic class PostOrder {\n\n    /**\n     * 后序遍历 - 递归\n     *\n     * @param root\n     * @return\n     */\n    public static List<Integer> postOrderByRecursion(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        return achieveFuncByPoOR(root, result);\n    }\n\n    /**\n     * 实现函数 - 后序遍历 - 递归\n     *\n     * @param root\n     * @param result\n     */\n    private static List<Integer> achieveFuncByPoOR(TreeNode root, List<Integer> result) {\n        if (Objects.isNull(root)) return result;\n        achieveFuncByPoOR(root.left, result);\n        achieveFuncByPoOR(root.right, result);\n        result.add(root.val);\n        return result;\n    }\n\n    /**\n     * 后序遍历 - 非递归\n     *\n     * @param root\n     * @return\n     */\n    public static List<Integer> postOrderByNonRecursion(TreeNode root) {\n        /*\n        申请两个栈\n        先将root压入栈中\n        再将stack1弹出top1，向stack1压入top1的孩子（向左后右），将top1压入stack2，直至stack1 为空\n        依次弹出stack2\n         */\n        List<Integer> result = new ArrayList<>();\n        Stack<TreeNode> stack1 = new Stack<>();\n        Stack<TreeNode> stack2 = new Stack<>();\n        stack1.push(root);\n        while (!stack1.isEmpty()) {\n            TreeNode top1 = stack1.pop();\n            if (Objects.nonNull(top1.left)) {\n                stack1.push(top1.left);\n            }\n            if (Objects.nonNull(top1.right)) {\n                stack1.push(top1.right);\n            }\n            stack2.push(top1);\n        }\n        while (!stack2.isEmpty()) {\n            result.add(stack2.pop().val);\n        }\n        return result;\n    }\n}\n```\n\n### 层次遍历\n\n```java\npackage com.heyqing;\n\nimport java.util.*;\n\n/**\n * ClassName:LevelOrder\n * Package:com.heyqing\n * Description:\n * 层次遍历\n *\n * @Date:2024/10/21\n * @Author:Heyqing\n */\npublic class LevelOrder {\n\n    /**\n     * 层次遍历\n     *\n     * @param root\n     * @return\n     */\n    public static List<Integer> levelOrder(TreeNode root) {\n        if (Objects.isNull(root)) return null;\n        List<Integer> result = new ArrayList<>();\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            TreeNode first = queue.poll();\n            result.add(first.val);\n            if (Objects.nonNull(first.left)) {\n                queue.offer(first.left);\n            }\n            if (Objects.nonNull(first.right)) {\n                queue.offer(first.right);\n            }\n        }\n        return result;\n    }\n\n\n    /**\n     * 层次遍历 - 分层\n     *\n     * @param root\n     * @return\n     */\n    public static List<List<Integer>> levelOrderLayer(TreeNode root) {\n        if (Objects.isNull(root)) return null;\n        List<List<Integer>> result = new ArrayList<>();\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            int loop = queue.size();\n            List<Integer> temp = new ArrayList<>(loop);\n            for (int i = 0; i < loop; i++) {\n                TreeNode first = queue.poll();\n                temp.add(first.val);\n                if (Objects.nonNull(first.left)) {\n                    queue.offer(first.left);\n                }\n                if (Objects.nonNull(first.right)) {\n                    queue.offer(first.right);\n                }\n            }\n            result.add(temp);\n        }\n        return result;\n    }\n}\n```\n\n## 二叉树的简单题练习 \n\n## 最低公共祖先\n\n给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\n\n[百度百科](https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin)中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（**一个节点也可以是它自己的祖先**）。”\n\n## 纸条折痕\n\n请把一段纸条竖着放在桌子上，然后从纸条的下边向上方对折1次，压出折痕后展开。此时折痕是凹下去的（下折痕），即折痕突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折2次，压出折痕后展开，此时有三条折痕，从上到下依次是下折痕、下折痕和上折痕。\n\n给定一个输入参数N，代表纸条从下边向上方连续对折N次。请从上到下打印所有折痕的方向。\n\n## 答案\n\n```java\npackage com.heyqing;\n\nimport java.util.*;\n\n/**\n * ClassName:Question\n * Package:com.heyqing\n * Description:\n *\n * @Date:2024/10/23\n * @Author:Heyqing\n */\npublic class Question {\n\n\n    /**\n     * 最低公共祖先 - The Lowest Common Ancestor\n     *\n     * @param root\n     * @param node1\n     * @param node2\n     * @param version\n     * @return\n     */\n    public static List<Integer> lca(TreeNode root, TreeNode node1, TreeNode node2, String version) {\n        /*\n        val1和val2一定在树上\n        version1:使用map，记录每个节点的父节点，\n                然后将node1一致回溯到头节点，再将node2回溯到头，\n                在node2回溯的过程中set添加失败节点即为共同祖先\n        version2: 纯算法 *_*\n         */\n        // 返回 node.hashcode 和 value\n        List<Integer> result = new ArrayList<>(2);\n        if (version.equals(\"v1\")) return lcaV1(root, node1, node2);\n        if (version.equals(\"v2\")) return lcaV2(root, node1, node2);\n        return result;\n    }\n\n    /**\n     * 纸条折痕\n     *\n     * @param n\n     * @return\n     */\n    public static List<String> PaperFold(int n) {\n        /*\n        将一个纸条面向自己对折，从上到下出现一个折痕，这个折痕是向外凸向里凹的，称之为凹折痕，反之则为凸折痕\n        问一个纸条在理想条件下这样往复对折 n 次 ，从上到下的折痕依次是什么折痕\n         */\n        List<String> fold = new ArrayList<>(((1 << n) - 1));\n        achieveFuncByPaperFold(1, n, true, fold);\n        return fold;\n    }\n\n\n    /******************************************************private******************************************************/\n\n    /**\n     * 纸条折痕 - 实现函数\n     *\n     * @param i\n     * @param n\n     * @param down\n     * @param fold\n     */\n    private static void achieveFuncByPaperFold(int i, int n, boolean down, List<String> fold) {\n        /*\n        对折 n 次后，产生的折痕是以 凹折痕为root节点其所有左子树都是以凹折痕这位root，右子树为凸折痕为root\n        中序遍历即可得到从上到下的折痕顺序\n         */\n        if (i > n) return;\n        achieveFuncByPaperFold(i + 1, n, true, fold);\n        fold.add(down ? \"down\" : \"up\");\n        achieveFuncByPaperFold(i + 1, n, false, fold);\n    }\n\n    /**\n     * 最低公共祖先 - v1 - map\n     *\n     * @param root\n     * @param node1\n     * @param node2\n     * @return\n     */\n    private static List<Integer> lcaV1(TreeNode root, TreeNode node1, TreeNode node2) {\n        /*\n        使用map，记录每个节点的父节点，\n        然后将node1一致回溯到头节点，再将node2回溯到头，\n        在node2回溯的过程中set添加失败节点即为共同祖先\n         */\n        List<Integer> result = new ArrayList<>(2);\n        Map<TreeNode, TreeNode> fatherMap = new HashMap<>();\n        achieveFuncByFullFatherMap(root, fatherMap);\n        Set<TreeNode> node1FatherSet = new HashSet<>();\n        TreeNode cur = node1;\n        while (!Objects.equals(cur, fatherMap.get(cur))) {\n            node1FatherSet.add(cur);\n            cur = fatherMap.get(cur);\n        }\n        // 将头节点加入\n        node1FatherSet.add(root);\n        cur = node2;\n        while (!Objects.equals(cur, fatherMap.get(cur))) {\n            TreeNode father = fatherMap.get(cur);\n            if (node1FatherSet.contains(father)) {\n                //此时的father为最低公共祖先\n                result.add(father.hashCode());\n                result.add(father.val);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 最低公共祖先 - v2\n     *\n     * @param root\n     * @param node1\n     * @param node2\n     * @return\n     */\n    private static List<Integer> lcaV2(TreeNode root, TreeNode node1, TreeNode node2) {\n        List<Integer> result = new ArrayList<>(2);\n        TreeNode father = achieveFuncByLcaV2(root, node1, node2);\n        result.add(father.hashCode());\n        result.add(father.val);\n        return result;\n    }\n\n    /**\n     * 最低公共祖先 - v2 - 实现函数\n     *\n     * @param root\n     * @param node1\n     * @param node2\n     * @return\n     */\n    private static TreeNode achieveFuncByLcaV2(TreeNode root, TreeNode node1, TreeNode node2) {\n        /*\n        root 可能出现的情况\n        node1,node2一个是另一个的最低公共祖先，特点就是与node1，node2的兄弟树必没有匹配值 ： 先碰到谁谁就是最低公共祖先\n        node1,node2一个不是另一个的最低公共祖先，特特点是他们分别在兄弟树上，必汇聚至一点 ：第一个左右子树都右返回值的点\n         */\n        // 碰到 null 返回 null，碰到 node1 返回 node1 ，碰到 node2 返回 node2\n        if (Objects.isNull(root) || Objects.equals(root, node1) || Objects.equals(root, node2)) {\n            return root;\n        }\n        // left，right 就四种情况 null , node1 , node2 ,father\n        TreeNode left = achieveFuncByLcaV2(root.left, node1, node2);\n        TreeNode right = achieveFuncByLcaV2(root.right, node1, node2);\n        // 这里为第四中情况，最多只会出现一次，即当前树的左子树与右子树分别有node1和node2\n        // 出现过一次以后必不会再出现，因为node1，node2都在当前树下，兄弟节点返回的必为null\n        if (Objects.nonNull(left) && Objects.nonNull(right)) {\n            return root;\n        }\n        // 有两种种情况会走到这 ： 1、node1,node2一个是另一个的最低公共祖先，2、第四中情况出现过一次后\n        // 归根结底是因为两个节点都在当前树下，兄弟节点必为 null\n        return Objects.nonNull(left) ? left : right;\n    }\n\n    /**\n     * 填充父map\n     *\n     * @param root\n     * @param fatherMap\n     */\n    private static void achieveFuncByFullFatherMap(TreeNode root, Map<TreeNode, TreeNode> fatherMap) {\n        if (Objects.isNull(root)) return;\n        fatherMap.put(root.left, root);\n        fatherMap.put(root.right, root);\n        achieveFuncByFullFatherMap(root.left, fatherMap);\n        achieveFuncByFullFatherMap(root.right, fatherMap);\n    }\n}\n```\n\n', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 12:38:27', NULL);
INSERT INTO `t_article` VALUES (150, 1024, 225, 'http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/25e77e515c1a22a7f5ea8ab97fc0130d.png', 'Redis速成指南：高效缓存与数据存储的魔力', 'Redis 是一个开源的高性能键值对存储系统，广泛用于缓存、消息队列、会话存储等场景。它支持丰富的数据结构，包括字符串、哈希、列表、集合、有序集合等，能够满足各种复杂的数据存储需求。作为一个内存数据库，Redis 的数据操作速度非常快，常用于提高应用程序的响应速度，尤其是在处理大量并发请求时表现出色。除了基础的存储功能，Redis 还提供持久化选项，允许将内存中的数据定期保存到磁盘，以保证数据不会丢失。本文将介绍 Redis 的基本概念、常见使用场景及其优势，帮助你了解如何利用 Redis 提升系统性能与可扩展性。', '# 1 Redis是什么\n\n> 官网：https://redis.io \n>\n> 开发者：Antirez\n\nRedis诞生于2009年全称是**Re**mote  **D**ictionary **S**erver 远程词典服务器，是一个基于内存的键值型NoSQL数据库。\n\nRedis是一个开源的、高性能的**键值对**存储系统，它支持多种数据结构，包括字符串、哈希、列表、集合、有序集合等。Redis通常被用作数据库、缓存和消息中间件。它以**内存存储**为主，因此读写速度极快，同时也支持数据的持久化，以防止数据丢失。Redis是**单线程**的，但得益于高效的I/O多路复用技术，它仍然能够处理大量的并发请求。并且**支持数据持久化**、**支持主从集群、分片集群**、**支持多语言客户端**。\n\n而NoSql则是相对于传统关系型数据库而言，有很大差异的一种数据库\n\n> NoSQl简介\n>\n> **NoSql：**Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为**非关系型数据库**。\n>\n> - 结构化与非结构化：传统关系型数据库是结构化数据，每一张表都有严格的约束信息：字段名、字段数据类型、字段约束等等信息，插入的数据必须遵守这些约束，而NoSql则对数据库格式没有严格约束，往往形式松散，自由。\n> - 关联和非关联：传统数据库的表与表之间往往存在关联，例如外键，而非关系型数据库不存在关联关系，要维护关系要么靠代码中的业务逻辑，要么靠数据之间的耦合。\n> - 查询方式：传统关系型数据库会基于Sql语句做查询，语法有统一标准，非关系数据库查询语法差异极大，五花八门各种各样。\n>   - redis：get user:1\n>   - mongodb：db.users.find({_id:1})\n>   - elasticsearch:GET http://localhost:9200/users/1\n> - 事务:传统关系型数据库能满足事务ACID的原则。而非关系型数据库往往不支持事务，或者不能严格保证ACID的特性，只能实现基本的一致性。\n>\n> ![rediscompare.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/861bf9799c783fdd328fe89e333fb805.png)\n\n# 2 Redis的安装\n\n通常情况下redis都是安装在Linux服务器上的，基于redis的特点在Linux上才会发挥其最佳效果，官网也推荐使用Linux。\n\n## 2.1 安装纯净版\n\n### 2.1.1 下载依赖库\n\nredis是基于C语言编写的，因此需要gcc环境\n\n```shell\nyum install -y gcc tcl\n```\n\n### 2.1.2 上传安装包并解压\n\n官网下载：http://download.redis.io/releases/\n\n建议下载第二位为偶数的如7.0.x 或 7.2.x 等等\n\n这里我下载的是`7.0.0`版本\n\n![redistar.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/1063f685bcc12f839544a452c22b9fda.jpg)\n\n上传至要存放的目录中如`\\opt`下\n\n进入压缩包所在目录\n\n```shell\ntar -xzf redis-7.0.0.tar.gz\n```\n\n进入redis目录，进行安装\n\n```shell\n cd /opt/redis-7.0.0/\nmake && make install\n```\n\n该目录已经默认配置到环境变量`/usr/local/bin`\n\n![redisinstalldefaultpath.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/43534d795511f0612f7cc25d7115ab0f.jpg)\n因此可以在任意目录下运行这些命令。其中：\n\n- `redis-cli`:是redis提供的命令行客户端\n- `redis-server`:是redis的服务端启动脚本\n- `redis-sentinel`:是redis的哨兵启动脚本\n- `redis-benchmark`:性能测试工具\n- `redis-check-aof`:修复有问题的AOF文件，\n- `redis-check-aof`:修复有问题的dump.rdb文件\n\n### 2.1.3 修改配置文件\n\n进入到安装redis的目录，我这里是`/opt/redis-7.0.0/`\n\n![redisconfpath.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ecaf7fe60f0ea84d5a5b099eae7341cb.jpg)\n这里建议先将原conf配置文件拷贝一份\n\n```shell\ncp redis.conf /heyqings/myredis/\n```\n\n`/heyqings/myredis/`为自定义目录\n\n![copyconfmypath.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/f728124c15efb6da524c98ff98adfbfe.jpg)\n*修改配置文件后需重启生效*\n\n注意这里修改的是拷贝的文件\n\n1. 修改`daemonize no` -> `daemonize yes` （309行左右）：是否为后台启动\n\n![confdaemonize.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5af9fb9767b54c10c2c47a6b5bf60e57.jpg)\n2. 修改`protected-mode yes`->`protected-mode no`（111行左右）：是否开启保护模式\n\n![confprotectedmode.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6680808ea68590ed05df5eea92c8382a.jpg)\n3. 修改`bind 127.0.0.1`->直接注释（或改为本机IP）（87行左右）：允许访问的地址\n\n![confbind.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/943e62cec961f4d7b0381df81c18ad37.jpg)\n4. 添加密码->requirepass设置你的密（1033行左右）\n\n![confrequirepass.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/782b0e80653c0171f2083957bd840f2d.jpg)\n### 2.1.4 启动redis\n\n因redis安装默认安装在`/usr/local/bin`所以我们可以在任何地方使用redis命令\n\n启动redis服务并告诉其配置文件路径\n\n```shell\nredis-server /heyqings/myredis/redis.conf\n```\n\n没有消息就是好消息，若无错误报出则证明启动成功，可通过\n\n```shell\nps -ef | grep redis | grep -v grep\n```\n\n查看，结果为\n\n![startsuccessflag.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cfd5c2294a942b916cf6c30990ae6b5d.jpg)\n则证明启动成功\n\n**设置开机自启**\n\n首先需要新建一个服务文件\n\n```shell\nvim /etc/systemd/system/redis.service\n```\n\n其中内容如下\n\n```shell\n[Unit]\nDescription=redis-server\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/local/bin/redis-server /heyqings/myredis/redis.conf\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n\n然后重载系统服务\n\n```shell\nsystemctl daemon-reload\n\n```\n\n开机自启\n\n```shell\nsystemctl enable redis\n\n```\n\n现在我们可以用系统命令操作redis\n\n```shell\n# 启动\nsystemctl start redis\n# 停止\nsystemctl stop redis\n# 重启\nsystemctl restart redis\n# 查看状态\nsystemctl status redis\n\n```\n\n### 2.1.5 停止redis\n\n利用redis-cli来执行 `shutdown `命令，即可停止 Redis 服务\n\n```shell\nredis-cli -u 123456 shutdown\n\n```\n\n`-u`后为密码也可用`-a`\n\n### 2.1.6 连接测试\n\nLinux服务器上可通过\n\n```shell\nredis-cli -a 123456 -p 6379\n\n```\n\n进行连接`-a`后为密码，`-p`后为端口号，默认为6379\n\n![cliconnectsuccess.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ca2fd8bf7de96bbea8d5f154c6cb0dc2.jpg)\n## 2.2 docker安装redis\n\n### 2.2.1 拉取镜像\n\n```shell\ndocker pull redis:7.0.0\n\n```\n\n![dockerpull.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/51a66963a48e815ef9b39524c8e10052.jpg)\n拉取成功可通过`docker images`查看\n\n### 2.2.2 创建配置文件\n\n创建`redis.conf`我这里创建在`/heyqings/docker/redis/conf`目录下\n\n```shell\ncd /heyqings/docker/redis/conf\nvim redis.conf\n\n```\n\n里面内容为：\n\n```shell\n# Redis服务器配置 \n \n# 绑定IP地址\n#解除本地限制 注释bind 127.0.0.1  \n#bind 127.0.0.1  \n \n# 服务器端口号  \nport 6379 \n \n#配置密码，不要可以删掉\nrequirepass 123456\n  \n \n \n#这个配置不要会和docker -d 命令 冲突\n# 服务器运行模式，Redis以守护进程方式运行,默认为no，改为yes意为以守护进程方式启动，可后台运行，除非kill进程，改为yes会使配置文件方式启动redis失败，如果后面redis启动失败，就将这个注释掉\ndaemonize no\n \n#当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定(自定义)\n#pidfile /heyqings/docker/redis/run/redis6379.pid  \n \n#默认为no，redis持久化，可以改为yes\nappendonly yes\n \n \n#当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\ntimeout 60\n# 服务器系统默认配置参数影响 Redis 的应用\nmaxclients 10000\ntcp-keepalive 300\n \n#指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合（分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改）\nsave 900 1\nsave 300 10\nsave 60 10000\n \n# 按需求调整 Redis 线程数\ntcp-backlog 511\n \n\n# 设置数据库数量，这里设置为16个数据库  \ndatabases 16\n \n \n# 启用 AOF, AOF常规配置\nappendonly yes\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n \n# 慢查询阈值\nslowlog-log-slower-than 10000\nslowlog-max-len 128\n \n# 是否记录系统日志，默认为yes  \nsyslog-enabled yes  \n \n#指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose\nloglevel notice\n  \n# 日志输出文件，默认为stdout，也可以指定文件路径  \nlogfile stdout\n \n# 日志文件\n#logfile /var/log/redis/redis-server.log\n \n \n# 系统内存调优参数   \n# 按需求设置\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\n\n```\n\n### 2.2.3 运行redis\n\n```shell\ndocker run \\\n-p 6378:6379 \\\n--name domeredis \\\n-v /heyqings/docker/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /heyqings/docker/redis/data:/var/lib/redis \\\n-v /heyqings/docker/redis/logs:/logs \\\n-d redis:7.0.0 redis-server /etc/redis/redis.conf\n\n```\n\n命令解释\n\n```bash\n-p 端口号映射 主机端口：容器端口\n-v 数据卷挂载\n-d 后台运行\n--name 容器名称\n\n```\n\n![dockerrunredis.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0e9e686244a80256ea6568cbdebc99a8.jpg)\n查看是否启动\n\n`docker ps`若出现则成功\n\n![dockerpsredis.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/b1b7a22c33c96bf495949220d3eb00d4.jpg)\n开机自启\n\n```shell\ndocker update --restart=always domeredis\n\n```\n\n### 2.2.4 测试连接\n\n```shell\ndocker exec -it domeredis bash\n\n```\n\n![dockertestconnect.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0d2e25dba3aa184aada2a9234232cea5.jpg)\n## 2.3 下载客户端\n\n**RedisDesktopManager**官网：https://redis.io/insight/\n\n下载并安装后进行连接\n\n点击【Connect to Redis Server】填写信息\n\n![rdmdockerconnect.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/b5c425d736b6bde32bb66adbb00d6183.jpg)\n这里我填写的是docker容器中的redis，纯净版同理\n\n然后点击【Test Connection】出现\n\n![rdmdockerconnectsuccess.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/f679e69593ce31061994f69bb07d7c3a.jpg)\n依次点击【OK】即可\n\n# 3 Redis十大数据类型\n\n操作命令指南：https://redis.io/docs/latest/commands/\n\n## 3.0 前置-key的相关操作\n\n- `keys *`:查看当前库的所有key\n- `exists key`:判断某个key是否存在\n- `type key`:查看key的类型\n- `del key`:删除key\n- `unlink key`:非阻塞删除，仅仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作中\n- `ttl key`:查看还有多少秒过期，-1：永不过期，-2：已过期\n- `expire key`:秒钟，为key设置过期时间\n- `move key dbindex`:将当前的key移动到给定数据库\n- `select dbindex`:切换数据库\n- `dbsize`:查看数据库key的数量\n- `flushdb`:清空当前库\n- `flushall`:通杀全部库\n\n***命令不区分大小写，key区分***\n\n通用操作\n\n```shell\nSET key value [NX | XX] [GET] [EX seconds | PX milliseconds |\n  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]\n\n```\n\nNX:不存在时创建\n\nXX:存在时创建\n\nGET:返回旧值插入新值\n\nEX:过期时间 秒\n\nPX:过期时间 毫秒\n\nEXAT:过期时间 unix时间 秒\n\nPXAT:过期时间 unix时间 毫秒\n\nKEEPTTL:保持过期时间\n\n## 3.1 String 字符串\n\n最基础数据类型，一般情况下key都为字符串类型\n\nString的常见命令有：\n\n- SET：添加或者修改已经存在的一个String类型的键值对\n- GET：根据key获取String类型的value\n- MSET：批量添加多个String类型的键值对\n- MGET：根据多个key获取多个String类型的value\n- INCR：让一个整型的key自增1\n- INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2\n- INCRBYFLOAT：让一个浮点类型的数字自增并指定步长\n- SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行\n- SETEX：添加一个String类型的键值对，并且指定有效期\n\n## 3.2 List 列表\n\n底层为双向链表\n\n- 有序\n- 元素可以重复\n- 插入和删除快\n- 查询速度一般\n\nList的常见命令有：\n\n- LPUSH key element ... ：向列表左侧插入一个或多个元素\n- LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil\n- RPUSH key element ... ：向列表右侧插入一个或多个元素\n- RPOP key：移除并返回列表右侧的第一个元素\n- LRANGE key star end：返回一段角标范围内的所有元素\n- LREM key number element:删除number个element\n- BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil\n\n## 3.3 Set 集合\n\n无序，无重复集合\n\n- 无序\n- 元素不可重复\n- 查找快\n- 支持交集、并集、差集等功能\n\nSet的常见命令有：\n\n- SADD key member ... ：向set中添加一个或多个元素\n- SREM key member ... : 移除set中的指定元素\n- SCARD key： 返回set中元素的个数\n- SISMEMBER key member：判断一个元素是否存在于set中\n- SMEMBERS：获取set中的所有元素\n- SINTER key1 key2 ... ：求key1与key2的交集\n- SINTERCARD numkeys key [key …] [LIMIT limit]:redis7新命令，返回结果的基数（返回由所有给定集合的交际产生的集合的基数）\n\n## 3.4 SortedSet 有序集合\n\n有序，无重复集合，关联double类型的分数(score),分数可重复\n\n- 可排序\n- 元素不重复\n- 查询速度快\n\nSortedSet的常见命令有：\n\n- ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值\n- ZREM key member：删除sorted set中的一个指定元素\n- ZSCORE key member : 获取sorted set中的指定元素的score值\n- ZRANK key member：获取sorted set 中的指定元素的排名\n- ZCARD key：获取sorted set中的元素个数\n- ZCOUNT key min max：统计score值在给定范围内的所有元素的个数\n- ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值\n- ZRANGE key min max：按照score排序后，获取指定排名范围内的元素\n- ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素\n- ZDIFF、ZINTER、ZUNION：求差集、交集、并集\n\n注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：\n\n- **升序**获取sorted set 中的指定元素的排名：ZRANK key member\n- **降序**获取sorted set 中的指定元素的排名：ZREVRANK key memeber\n\n## 3.5 Hash 哈希表\n\nfield(String):value\n\n用java解释就是`Map<String,Map<Object,Object>>`\n\nHash的常见命令有：\n\n- HSET key field value：添加或者修改hash类型key的field的值\n- HGET key field：获取一个hash类型key的field的值\n- HMSET：批量添加多个hash类型key的field的值\n- HMGET：批量获取多个hash类型key的field的值\n- HGETALL：获取一个hash类型的key中的所有的field和value\n- HKEYS：获取一个hash类型的key中的所有的field\n- HINCRBY:让一个hash类型key的字段值自增并指定步长\n- HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行\n\n## 3.6 Bitfield 位域\n\n通过bitfield命令可以一次性操作多个**多个比特位域**（连续的多个比特位），执行操作并返回一个相应数组，了解即可\n\n位域修改，溢出控制\n\n直接修改底层\n\n## 3.7 Bitmap 位图\n\n由0和1状态表现得二进制bit数组\n\n主要用于状态记录等等\n\n主要命令有：\n\n- setbit key offset val:给指定key的值的第offset赋值val\n- getbit key offset:获取指定key的offset位\n- bitlen key：返回占用的字节数\n- bitcount key start end:返回指定key中【start，end】中1的数量\n- bitop operation destkey key:对不同的二进制存储数据进行位运算（and、or、not、xor）\n\n## 3.8 Geospatial 地理空间\n\n存储地理位置信息，并对信息进行操作\n\n- 添加地理位置坐标\n- 获取地理位置的坐标\n- 计算两个位置之间的距离\n- 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合\n\n常用命令：\n\n- geoadd:多个经纬度、位置名称添加到指定的key中\n- geopos:从键里面返回所有给定的位置元素\n- geodist:返回两个位置之间的距离\n- georadius:以给定经纬度为中心，返回与中心距离不超过给定最大距离的所有位置元素\n- georadiusbymember:与georadius类似\n- geohash:返回一个或多个位置元素的geohash表示\n\n## 3.9 Hyperloglog 基数统计\n\n输入元素数量或体积非常大时，计算基数所需要的空间总是固定且很小的。\n\n***去重复基数统计***\n\n基数：去重复的数据集合（只记录个数不存储数据）\n\n适用场景一般为统计UV（Unique VIsitor）、统计网站关键词搜索…\n\n常用命令：pfadd\\pfcount\\pfdebug\\pfmerge\\pfselftest\n\n## 3.10 Stream 流\n\n类似mq中间件，主要用于消息队列\n\n特殊符号：\n\n- +，- ：最大最小可能出现的id\n- $：只消费新的消息\n- \\> ：用于xreadgroup命令，表示迄今还没有发送给组中使用者的信息，会更新新消费者组的最后id\n- *：用于xadd命令，让系统自动生成id\n\n常用命令：xadd\\xrevrange\\xdel…\n\n更多命令参考：https://redis.io/docs/latest/commands/?group=stream\n\n# 4 Redis持久化\n\n## 4.1 RDB\n\nRDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是保存在当前运行目录。\n\nRDB持久化在四种情况下会执行：\n\n- 执行save命令：由redis主线程来执行rdb，会阻塞所有命令，只有在数据迁移时可能用到\n- 执行bgsave命令：开启独立进程完成RDB，主进程可以持续处理用户请求，不受影响\n- Redis停机时：Redis停机时会执行一次save命令，实现RDB持久化。\n- 触发RDB条件时：Redis内部有触发RDB的机制，可以在redis.conf文件中找到如：save 900 1\n\n## 4.2 AOF\n\nAOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。\n\nAOF默认是关闭的，需要修改redis.conf配置文件来开启AOF：\n\n```conf\n# 是否开启AOF功能，默认是no\nappendonly yes\n# AOF文件的名称\nappendfilename \"appendonly.aof\"\n\n```\n\nAOF的命令记录的频率也可以通过redis.conf文件来配：\n\n```conf\n# 表示每执行一次写命令，立即记录到AOF文件\nappendfsync always \n# 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案\nappendfsync everysec \n# 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘\nappendfsync no\n\n```\n\nappendfsync三种命令的对比：\n\n|  配置项  |   刷盘时机   |           优点           |            缺点            |\n| :------: | :----------: | :----------------------: | :------------------------: |\n|  always  |   同步刷盘   | 可靠性高，数据几乎不丢失 |         性能影响大         |\n| everysec |   每秒刷盘   |         性能适中         |      最多丢失1秒数据       |\n|    no    | 操作系统控制 |         性能最好         | 可靠性差，可能丢失大量数据 |\n\n**AOF重写机制**\n\n因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。\n\nRedis也会在触发阈值时自动去重写AOF文件。阈值也可以在redis.conf中配置：\n\n```conf\n# AOF文件比上次文件 增长超过多少百分比则触发重写\nauto-aof-rewrite-percentage 100\n# AOF文件体积最小多大以上才触发重写 \nauto-aof-rewrite-min-size 64mb \n\n```\n\n## 4.3 RDB与AOF对比\n\nRDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会**结合**两者来使用。\n\n|                |                     RDB                      |                          AOF                           |\n| :------------: | :------------------------------------------: | :----------------------------------------------------: |\n|   持久化方式   |             定时对整个内存做快照             |                    记录每一次写操作                    |\n|   数据完整性   |           不完整，两次备份之间丢失           |                相对完整，取决与刷盘策略                |\n|    文件大小    |              有压缩，文件体积小              |                  记录命令，文件体积大                  |\n|  宕机恢复速度  |                     很快                     |                           慢                           |\n| 数据恢复优先级 |          低，因为数据完整性不如AOF           |                  高，因为数据完整性高                  |\n|  系统资源占用  |            高，大量CPU和内存消耗             | 低，主要是磁盘IO资源但AOF重写时会占用大量CPU和内存资源 |\n|    使用场景    | 可以容忍数分钟的数据丢失，追求更快的启动速度 |                  对数据安全性要求较高                  |\n\n# 5 Redis事务\n\nRedis事务提供了一种将多个命令请求打包然后**一次性、顺序性**执行的机制。事务功能是通过MULTI、EXEC、DISCARD和WATCH这几个命令实现的。事务中的所有命令都会按照顺序执行，并且在事务执行期间，Redis服务器不会被其他客户端的请求打断。然而，与传统的关系型数据库事务不同，Redis事务并不能保证严格意义上的原子性，即使在事务中某个命令执行失败，也不会停止执行其他命令，也___不会回滚已经执行的命令___。\n\n## 5.1 基础命令\n\n- **开始事务**：使用`MULTI`命令开始一个事务，执行后Redis返回`OK`表示进入了事务模式。\n- **命令入队**：在`MULTI`之后和`EXEC`之前的所有命令，都会被放入事务队列中，但不会立即执行。\n- **执行事务**：使用`EXEC`命令提交事务，此时Redis会以FIFO（先进先出）的方式执行队列中的所有命令。\n- **取消事务**：使用`DISCARD`命令可以取消事务，放弃执行已经在事务队列中的命令。\n- **监控键值**：通过`WATCH`命令可以监控一个或多个键值，如果在事务执行前这些键值发生变化，则会自动回滚事务。\n\n## 5.2 Redis事务的特性\n\n- **原子性**：事务作为一个整体被执行，要么全部执行，要么全部不执行。\n- **顺序性**：事务内部的命令会按照它们在队列中的顺序执行。\n- **排他性**：在事务执行期间，Redis服务器不会被其他客户端的请求打断。\n- **非隔离性**：Redis事务不支持像传统数据库那样的隔离级别，事务中的命令有可能被其他命令插队执行。\n- **不支持回滚**：如果事务中存在错误，Redis不会回滚已经执行的命令。\n\n# 6 Redis管道\n\nRedis管道（Pipeline）是Redis客户端**发送多个命令**请求的一种机制。通过将一系列的单独命令请求打包成一组，可以一次性地从服务器返回结果，从而提高执行效率和性能。在客户端层面，管道操作就像是在一个事务中一样，所有命令都先积累起来，然后在某个时间点一起发送给服务器。服务器端会缓存这些命令，并在内部处理后一次性响应结果给客户端。这种方式减少了网络通信的开销，因为客户端只需要与服务器进行一次交互就可以获取多个命令的结果。\n\n# 7 Redis发布与订阅\n\nRedis发布与订阅模式（Pub/Sub）是一种消息通信模式，允许消息的发送者（publisher）发送消息到一个频道（channel），而消息的接收者（subscriber）可以订阅这个频道来接收消息。这种模式在实时通信、事件驱动的应用中非常有用。\n\n> 个人不推荐使用，了解即可\n\n发布订阅的操作命令\n\n- `SUBSCRIBE`：订阅一个或多个频道。\n- `UNSUBSCRIB`：取消订阅某个频道。\n- `PSUBSCRIBE`：模式订阅，可以订阅多个匹配模式的频道。\n- `PUBLISH`：向一个或多个频道发送消息。\n\n# 8 Redis复制\n\nRedis主从复制是指将Redis服务器的数据从一个节点（主节点）复制到其他节点（从节点）的过程。主节点负责处理写操作，而复制操作则是单向的，只能由主节点到从节点。一个主节点可以有多个从节点，但一个从节点只能有一个主节点。主从复制的主要作用包括数据冗余、读写分离和故障恢复。\n\n## 8.1 主从复制\n\n**配从不配主**：从机配置去找主机，主机不动\n\n从机配置：\n\n```conf\nmasterauth <master-password>\nreplicaof master-ip master-port\n\n```\n\n常用命令：\n\n- `info replication`:可以查看复制节点的主从关系和配置信息\n- `replicaof master-ip master-port`:配置在conf中\n- `slaveof master-ip master-port`:切换主库\n- `slaveof no one`:停止连接\n\n操作步骤：\n\n- 开启`daemonize yes`\n- 注释掉`bing 127.0.0.1`\n- 设置`protected-mode no`\n- 指定端口\n- 指定当前工作目录\n- `pid`文件名字\n- `log`文件名字\n- `requirepass`\n- `dump.rdb`名字\n- `aof`文件，`appendfilename`\n- 从机访问主机的通行密码`masterauth`\n\n注意：\n\n从机只读，主机可读可写（一般只做写）\n\n从机开机迟让可复制主机所有信息\n\n主机挂掉，从机原地待命，不会争夺主机\n\n主机重新启动，主从关系依然在\n\n配置文件中的永久有效，手动命令的单次有效\n\n# Redis Springboot整合\n\npom文件导入\n\n```xml\n<dependency>\n	<groupId>org.springframework.boot</groupId>\n	<artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n\n```\n\nproperties配置\n\n```properties\nspring.redis.host=192.168.200.128\nspring.redis.port=6379\nspring.redis.password=123456\nspring.redis.database=0\n\n```\n\n', 0, 0, 0, 1, 1, NULL, NULL, '2024-12-03 12:48:23', NULL);

-- ----------------------------
-- Table structure for t_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_article_tag`;
CREATE TABLE `t_article_tag`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `article_id` int NOT NULL COMMENT '文章id',
  `tag_id` int NOT NULL COMMENT '标签id',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `fk_article_tag_1`(`article_id` ASC) USING BTREE,
  INDEX `fk_article_tag_2`(`tag_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 134 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_article_tag
-- ----------------------------
INSERT INTO `t_article_tag` VALUES (86, 136, 42);
INSERT INTO `t_article_tag` VALUES (87, 136, 43);
INSERT INTO `t_article_tag` VALUES (90, 138, 43);
INSERT INTO `t_article_tag` VALUES (91, 138, 44);
INSERT INTO `t_article_tag` VALUES (92, 139, 43);
INSERT INTO `t_article_tag` VALUES (93, 139, 45);
INSERT INTO `t_article_tag` VALUES (94, 140, 43);
INSERT INTO `t_article_tag` VALUES (95, 140, 46);
INSERT INTO `t_article_tag` VALUES (96, 140, 47);
INSERT INTO `t_article_tag` VALUES (97, 141, 48);
INSERT INTO `t_article_tag` VALUES (98, 142, 43);
INSERT INTO `t_article_tag` VALUES (99, 142, 49);
INSERT INTO `t_article_tag` VALUES (100, 142, 50);
INSERT INTO `t_article_tag` VALUES (101, 143, 43);
INSERT INTO `t_article_tag` VALUES (102, 143, 50);
INSERT INTO `t_article_tag` VALUES (103, 137, 42);
INSERT INTO `t_article_tag` VALUES (104, 137, 43);
INSERT INTO `t_article_tag` VALUES (105, 144, 50);
INSERT INTO `t_article_tag` VALUES (106, 144, 51);
INSERT INTO `t_article_tag` VALUES (107, 145, 43);
INSERT INTO `t_article_tag` VALUES (108, 145, 50);
INSERT INTO `t_article_tag` VALUES (109, 145, 52);
INSERT INTO `t_article_tag` VALUES (110, 146, 43);
INSERT INTO `t_article_tag` VALUES (111, 146, 50);
INSERT INTO `t_article_tag` VALUES (112, 146, 53);
INSERT INTO `t_article_tag` VALUES (119, 147, 54);
INSERT INTO `t_article_tag` VALUES (120, 147, 55);
INSERT INTO `t_article_tag` VALUES (121, 147, 56);
INSERT INTO `t_article_tag` VALUES (125, 149, 54);
INSERT INTO `t_article_tag` VALUES (126, 149, 55);
INSERT INTO `t_article_tag` VALUES (127, 149, 56);
INSERT INTO `t_article_tag` VALUES (128, 148, 54);
INSERT INTO `t_article_tag` VALUES (129, 148, 55);
INSERT INTO `t_article_tag` VALUES (130, 148, 56);
INSERT INTO `t_article_tag` VALUES (131, 150, 50);
INSERT INTO `t_article_tag` VALUES (132, 150, 51);
INSERT INTO `t_article_tag` VALUES (133, 150, 57);

-- ----------------------------
-- Table structure for t_category
-- ----------------------------
DROP TABLE IF EXISTS `t_category`;
CREATE TABLE `t_category`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `category_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '分类名',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 227 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_category
-- ----------------------------
INSERT INTO `t_category` VALUES (218, '网络', '2024-12-02 22:41:05', NULL);
INSERT INTO `t_category` VALUES (220, 'AI', '2024-12-03 11:19:14', NULL);
INSERT INTO `t_category` VALUES (221, '安全', '2024-12-03 11:37:17', NULL);
INSERT INTO `t_category` VALUES (222, 'web3', '2024-12-03 11:44:17', NULL);
INSERT INTO `t_category` VALUES (223, '基础', '2024-12-03 11:51:24', NULL);
INSERT INTO `t_category` VALUES (224, '容器', '2024-12-03 12:01:26', NULL);
INSERT INTO `t_category` VALUES (225, '数据库', '2024-12-03 12:07:25', NULL);
INSERT INTO `t_category` VALUES (226, '算法', '2024-12-03 12:28:52', NULL);

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int NOT NULL COMMENT '评论用户Id',
  `topic_id` int NULL DEFAULT NULL COMMENT '评论主题id',
  `comment_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '评论内容',
  `reply_user_id` int NULL DEFAULT NULL COMMENT '回复用户id',
  `parent_id` int NULL DEFAULT NULL COMMENT '父评论id',
  `type` tinyint NOT NULL COMMENT '评论类型 1.文章 2.留言 3.关于我 4.友链 5.说说',
  `is_delete` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除  0否 1是',
  `is_review` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否审核',
  `create_time` datetime NOT NULL COMMENT '评论时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `fk_comment_user`(`user_id` ASC) USING BTREE,
  INDEX `fk_comment_parent`(`parent_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1032 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_comment
-- ----------------------------

-- ----------------------------
-- Table structure for t_exception_log
-- ----------------------------
DROP TABLE IF EXISTS `t_exception_log`;
CREATE TABLE `t_exception_log`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `opt_uri` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求接口',
  `opt_method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求方式',
  `request_method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求方式',
  `request_param` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求参数',
  `opt_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作描述',
  `exception_info` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '异常信息',
  `ip_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip来源',
  `create_time` datetime NOT NULL COMMENT '操作时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 18 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_exception_log
-- ----------------------------
INSERT INTO `t_exception_log` VALUES (1, '/', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo', 'GET', NULL, '获取系统信息', 'java.lang.reflect.UndeclaredThrowableException\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:759)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$54726087.getBlogHomeInfo(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property \'@class\'\n at [Source: (byte[])\"{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"这个人很懒...\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\": 0,\"isEmailNotice\": 1,\"isReward\": 1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\": 1,\"name\":\"何以晴\",\"notice\":\"。�\"[truncated 240 bytes]; line: 1, column: 740]; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property \'@class\'\n at [Source: (byte[])\"{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"这个人很懒...\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\": 0,\"isEmailNotice\": 1,\"isReward\": 1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\": 1,\"name\":\"何以晴\",\"notice\":\"。�\"[truncated 240 bytes]; line: 1, column: 740]\r\n	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)\r\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getHeyBlogHomeInfo(HeyBlogInfoServiceImpl.java:119)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$7b2e08f4.getHeyBlogHomeInfo(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo(HeyBlogInfoController.java:54)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	... 97 more\r\nCaused by: org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property \'@class\'\n at [Source: (byte[])\"{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"这个人很懒...\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\": 0,\"isEmailNotice\": 1,\"isReward\": 1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\": 1,\"name\":\"何以晴\",\"notice\":\"。�\"[truncated 240 bytes]; line: 1, column: 740]; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property \'@class\'\n at [Source: (byte[])\"{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"这个人很懒...\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\": 0,\"isEmailNotice\": 1,\"isReward\": 1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\": 1,\"name\":\"何以晴\",\"notice\":\"。�\"[truncated 240 bytes]; line: 1, column: 740]\r\n	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:75)\r\n	at org.springframework.data.redis.core.AbstractOperations.deserializeValue(AbstractOperations.java:335)\r\n	at org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:61)\r\n	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:228)\r\n	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:188)\r\n	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:96)\r\n	at org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:53)\r\n	at top.heyqing.heyblog.service.impl.RedisServiceImpl.get(RedisServiceImpl.java:51)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:167)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1582)\r\n	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\nCaused by: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property \'@class\'\n at [Source: (byte[])\"{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"这个人很懒...\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\": 0,\"isEmailNotice\": 1,\"isReward\": 1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\": 1,\"name\":\"何以晴\",\"notice\":\"。�\"[truncated 240 bytes]; line: 1, column: 740]\r\n	at com.fasterxml.jackson.databind.exc.InvalidTypeIdException.from(InvalidTypeIdException.java:43)\r\n	at com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(DeserializationContext.java:1794)\r\n	at com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(DeserializationContext.java:1323)\r\n	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleMissingTypeId(TypeDeserializerBase.java:303)\r\n	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:166)\r\n	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:107)\r\n	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromAny(AsPropertyTypeDeserializer.java:195)\r\n	at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserializeWithType(UntypedObjectDeserializer.java:710)\r\n	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:68)\r\n	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4526)\r\n	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3572)\r\n	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:73)\r\n	... 14 more\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-01 22:27:22');
INSERT INTO `t_exception_log` VALUES (2, '/', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo', 'GET', NULL, '获取系统信息', 'java.lang.reflect.UndeclaredThrowableException\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:759)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$54726087.getBlogHomeInfo(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property \'@class\'\n at [Source: (byte[])\"{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"这个人很懒...\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\": 0,\"isEmailNotice\": 1,\"isReward\": 1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\": 1,\"name\":\"何以晴\",\"notice\":\"。�\"[truncated 240 bytes]; line: 1, column: 740]; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property \'@class\'\n at [Source: (byte[])\"{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"这个人很懒...\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\": 0,\"isEmailNotice\": 1,\"isReward\": 1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\": 1,\"name\":\"何以晴\",\"notice\":\"。�\"[truncated 240 bytes]; line: 1, column: 740]\r\n	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)\r\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getHeyBlogHomeInfo(HeyBlogInfoServiceImpl.java:119)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$7b2e08f4.getHeyBlogHomeInfo(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo(HeyBlogInfoController.java:54)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	... 97 more\r\nCaused by: org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property \'@class\'\n at [Source: (byte[])\"{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"这个人很懒...\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\": 0,\"isEmailNotice\": 1,\"isReward\": 1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\": 1,\"name\":\"何以晴\",\"notice\":\"。�\"[truncated 240 bytes]; line: 1, column: 740]; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property \'@class\'\n at [Source: (byte[])\"{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"这个人很懒...\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\": 0,\"isEmailNotice\": 1,\"isReward\": 1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\": 1,\"name\":\"何以晴\",\"notice\":\"。�\"[truncated 240 bytes]; line: 1, column: 740]\r\n	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:75)\r\n	at org.springframework.data.redis.core.AbstractOperations.deserializeValue(AbstractOperations.java:335)\r\n	at org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:61)\r\n	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:228)\r\n	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:188)\r\n	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:96)\r\n	at org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:53)\r\n	at top.heyqing.heyblog.service.impl.RedisServiceImpl.get(RedisServiceImpl.java:51)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:167)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1582)\r\n	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\nCaused by: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property \'@class\'\n at [Source: (byte[])\"{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"这个人很懒...\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\": 0,\"isEmailNotice\": 1,\"isReward\": 1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\": 1,\"name\":\"何以晴\",\"notice\":\"。�\"[truncated 240 bytes]; line: 1, column: 740]\r\n	at com.fasterxml.jackson.databind.exc.InvalidTypeIdException.from(InvalidTypeIdException.java:43)\r\n	at com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(DeserializationContext.java:1794)\r\n	at com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(DeserializationContext.java:1323)\r\n	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleMissingTypeId(TypeDeserializerBase.java:303)\r\n	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:166)\r\n	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:107)\r\n	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromAny(AsPropertyTypeDeserializer.java:195)\r\n	at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserializeWithType(UntypedObjectDeserializer.java:710)\r\n	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:68)\r\n	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4526)\r\n	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3572)\r\n	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:73)\r\n	... 14 more\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-01 22:27:28');
INSERT INTO `t_exception_log` VALUES (3, '/', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo', 'GET', NULL, '获取系统信息', 'java.lang.reflect.UndeclaredThrowableException\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:759)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$f71aa235.getBlogHomeInfo(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: java.lang.NullPointerException\r\n	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)\r\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getHeyBlogHomeInfo(HeyBlogInfoServiceImpl.java:119)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$d293a0d.getHeyBlogHomeInfo(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo(HeyBlogInfoController.java:54)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	... 97 more\r\nCaused by: java.lang.NullPointerException\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:171)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1582)\r\n	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-01 22:29:49');
INSERT INTO `t_exception_log` VALUES (4, '/', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo', 'GET', NULL, '获取系统信息', 'java.lang.reflect.UndeclaredThrowableException\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:759)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$f71aa235.getBlogHomeInfo(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: java.lang.NullPointerException\r\n	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)\r\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getHeyBlogHomeInfo(HeyBlogInfoServiceImpl.java:119)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$d293a0d.getHeyBlogHomeInfo(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo(HeyBlogInfoController.java:54)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	... 97 more\r\nCaused by: java.lang.NullPointerException\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:171)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1582)\r\n	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-01 22:30:13');
INSERT INTO `t_exception_log` VALUES (5, '/', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo', 'GET', NULL, '获取系统信息', 'java.lang.reflect.UndeclaredThrowableException\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:759)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$d0b0d5e5.getBlogHomeInfo(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: java.lang.NullPointerException\r\n	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)\r\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getHeyBlogHomeInfo(HeyBlogInfoServiceImpl.java:119)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$6a3bd45a.getHeyBlogHomeInfo(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo(HeyBlogInfoController.java:54)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	... 97 more\r\nCaused by: java.lang.NullPointerException\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:171)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1582)\r\n	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-02 19:29:56');
INSERT INTO `t_exception_log` VALUES (6, '/report', 'top.heyqing.heyblog.controller.HeyBlogInfoController.report', 'POST', NULL, '上报访客信息', 'org.springframework.data.redis.RedisSystemException: Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。\r\n	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)\r\n	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)\r\n	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)\r\n	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)\r\n	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:273)\r\n	at org.springframework.data.redis.connection.lettuce.LettuceSetCommands.convertLettuceAccessException(LettuceSetCommands.java:520)\r\n	at org.springframework.data.redis.connection.lettuce.LettuceSetCommands.sIsMember(LettuceSetCommands.java:221)\r\n	at org.springframework.data.redis.connection.DefaultedRedisConnection.sIsMember(DefaultedRedisConnection.java:784)\r\n	at org.springframework.data.redis.core.DefaultSetOperations.lambda$isMember$9(DefaultSetOperations.java:203)\r\n	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:228)\r\n	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:188)\r\n	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:96)\r\n	at org.springframework.data.redis.core.DefaultSetOperations.isMember(DefaultSetOperations.java:203)\r\n	at top.heyqing.heyblog.service.impl.RedisServiceImpl.sIsMember(RedisServiceImpl.java:198)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.report(HeyBlogInfoServiceImpl.java:89)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$6a3bd45a.report(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.report(HeyBlogInfoController.java:47)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$d0b0d5e5.report(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。\r\n	at io.lettuce.core.LettuceFutures.awaitOrCancel(LettuceFutures.java:134)\r\n	at io.lettuce.core.FutureSyncInvocationHandler.handleInvocation(FutureSyncInvocationHandler.java:75)\r\n	at io.lettuce.core.internal.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:79)\r\n	at com.sun.proxy.$Proxy248.sismember(Unknown Source)\r\n	at org.springframework.data.redis.connection.lettuce.LettuceSetCommands.sIsMember(LettuceSetCommands.java:219)\r\n	... 115 more\r\nCaused by: java.io.IOException: 远程主机强迫关闭了一个现有的连接。\r\n	at sun.nio.ch.SocketDispatcher.read0(Native Method)\r\n	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:43)\r\n	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)\r\n	at sun.nio.ch.IOUtil.read(IOUtil.java:192)\r\n	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:380)\r\n	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)\r\n	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1134)\r\n	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)\r\n	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\r\n	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)\r\n	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)\r\n	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)\r\n	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\r\n	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\r\n	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n	... 1 more\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-02 19:37:17');
INSERT INTO `t_exception_log` VALUES (7, '/admin/tags', 'top.heyqing.heyblog.controller.TagController.deleteTag', 'DELETE', '[[41]]', '删除标签', 'top.heyqing.heyblog.exception.BizException: 删除失败，该标签下存在文章\r\n	at top.heyqing.heyblog.service.impl.TagServiceImpl.deleteTag(TagServiceImpl.java:91)\r\n	at top.heyqing.heyblog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$978228a6.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$4e7d3543.deleteTag(<generated>)\r\n	at top.heyqing.heyblog.controller.TagController.deleteTag(TagController.java:74)\r\n	at top.heyqing.heyblog.controller.TagController$$FastClassBySpringCGLIB$$a33026e.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.TagController$$EnhancerBySpringCGLIB$$62885df0.deleteTag(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:931)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:658)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:09:41');
INSERT INTO `t_exception_log` VALUES (8, '/admin/website/config', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getWebsiteConfig', 'GET', NULL, '获取网站配置', 'java.lang.NullPointerException\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:171)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$d293a0d.getWebsiteConfig(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getWebsiteConfig(HeyBlogInfoController.java:74)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$4e443ee6.getWebsiteConfig(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-03 13:09:24');
INSERT INTO `t_exception_log` VALUES (9, '/', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo', 'GET', NULL, '获取系统信息', 'java.lang.reflect.UndeclaredThrowableException\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:759)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$4e443ee6.getBlogHomeInfo(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: java.lang.NullPointerException\r\n	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)\r\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getHeyBlogHomeInfo(HeyBlogInfoServiceImpl.java:119)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$d293a0d.getHeyBlogHomeInfo(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo(HeyBlogInfoController.java:54)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	... 100 more\r\nCaused by: java.lang.NullPointerException\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:171)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1582)\r\n	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-03 13:09:29');
INSERT INTO `t_exception_log` VALUES (10, '/', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo', 'GET', NULL, '获取系统信息', 'java.lang.reflect.UndeclaredThrowableException\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:759)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$4e443ee6.getBlogHomeInfo(<generated>)\r\n	at sun.reflect.GeneratedMethodAccessor561.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: java.lang.NullPointerException\r\n	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)\r\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getHeyBlogHomeInfo(HeyBlogInfoServiceImpl.java:119)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$d293a0d.getHeyBlogHomeInfo(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo(HeyBlogInfoController.java:54)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	... 99 more\r\nCaused by: java.lang.NullPointerException\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:171)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1582)\r\n	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-03 13:09:34');
INSERT INTO `t_exception_log` VALUES (11, '/', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo', 'GET', NULL, '获取系统信息', 'java.lang.reflect.UndeclaredThrowableException\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:759)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$4e443ee6.getBlogHomeInfo(<generated>)\r\n	at sun.reflect.GeneratedMethodAccessor561.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: java.lang.NullPointerException\r\n	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)\r\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getHeyBlogHomeInfo(HeyBlogInfoServiceImpl.java:119)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$d293a0d.getHeyBlogHomeInfo(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo(HeyBlogInfoController.java:54)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	... 99 more\r\nCaused by: java.lang.NullPointerException\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:171)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1582)\r\n	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-03 13:10:03');
INSERT INTO `t_exception_log` VALUES (12, '/admin/website/config', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getWebsiteConfig', 'GET', NULL, '获取网站配置', 'java.lang.NullPointerException\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:171)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$d293a0d.getWebsiteConfig(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getWebsiteConfig(HeyBlogInfoController.java:74)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$4e443ee6.getWebsiteConfig(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-03 13:10:20');
INSERT INTO `t_exception_log` VALUES (13, '/admin/website/config', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getWebsiteConfig', 'GET', NULL, '获取网站配置', 'java.lang.NullPointerException\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:171)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$d293a0d.getWebsiteConfig(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getWebsiteConfig(HeyBlogInfoController.java:74)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$4e443ee6.getWebsiteConfig(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-03 13:11:31');
INSERT INTO `t_exception_log` VALUES (14, '/', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo', 'GET', NULL, '获取系统信息', 'java.lang.reflect.UndeclaredThrowableException\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:759)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$4e443ee6.getBlogHomeInfo(<generated>)\r\n	at sun.reflect.GeneratedMethodAccessor561.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value\n at [Source: (byte[])\"\"{\\\"alipayQRCode\\\":\\\"\\\",\\\"author\\\":\\\"何以晴\\\",\\\"authorAvatar\\\":\\\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\\\",\\\"authorIntro\\\":\\\"往事莫沉吟。身间时序好，且登临。\\\",\\\"beianNumber\\\":\\\"\\\",\\\"csdn\\\":\\\"https://blog.csdn.net/heyiqingsong\\\",\\\"englishName\\\":\\\"heyqing\\\",\\\"gitee\\\":\\\"https://gitee.com/heyqing\\\",\\\"github\\\":\\\"https://github.com/heyqing\\\",\\\"isCommentReview\\\":0,\\\"isEmailNotice\\\":1,\\\"isReward\\\":1,\\\"juejin\\\":\\\"\\\",\\\"\n\"; line: 1, column: 456]; nested exception is com.fasterxml.jackson.core.JsonParseException: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value\n at [Source: (byte[])\"\"{\\\"alipayQRCode\\\":\\\"\\\",\\\"author\\\":\\\"何以晴\\\",\\\"authorAvatar\\\":\\\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\\\",\\\"authorIntro\\\":\\\"往事莫沉吟。身间时序好，且登临。\\\",\\\"beianNumber\\\":\\\"\\\",\\\"csdn\\\":\\\"https://blog.csdn.net/heyiqingsong\\\",\\\"englishName\\\":\\\"heyqing\\\",\\\"gitee\\\":\\\"https://gitee.com/heyqing\\\",\\\"github\\\":\\\"https://github.com/heyqing\\\",\\\"isCommentReview\\\":0,\\\"isEmailNotice\\\":1,\\\"isReward\\\":1,\\\"juejin\\\":\\\"\\\",\\\"\n\"; line: 1, column: 456]\r\n	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)\r\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getHeyBlogHomeInfo(HeyBlogInfoServiceImpl.java:119)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$d293a0d.getHeyBlogHomeInfo(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo(HeyBlogInfoController.java:54)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	... 99 more\r\nCaused by: org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value\n at [Source: (byte[])\"\"{\\\"alipayQRCode\\\":\\\"\\\",\\\"author\\\":\\\"何以晴\\\",\\\"authorAvatar\\\":\\\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\\\",\\\"authorIntro\\\":\\\"往事莫沉吟。身间时序好，且登临。\\\",\\\"beianNumber\\\":\\\"\\\",\\\"csdn\\\":\\\"https://blog.csdn.net/heyiqingsong\\\",\\\"englishName\\\":\\\"heyqing\\\",\\\"gitee\\\":\\\"https://gitee.com/heyqing\\\",\\\"github\\\":\\\"https://github.com/heyqing\\\",\\\"isCommentReview\\\":0,\\\"isEmailNotice\\\":1,\\\"isReward\\\":1,\\\"juejin\\\":\\\"\\\",\\\"\n\"; line: 1, column: 456]; nested exception is com.fasterxml.jackson.core.JsonParseException: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value\n at [Source: (byte[])\"\"{\\\"alipayQRCode\\\":\\\"\\\",\\\"author\\\":\\\"何以晴\\\",\\\"authorAvatar\\\":\\\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\\\",\\\"authorIntro\\\":\\\"往事莫沉吟。身间时序好，且登临。\\\",\\\"beianNumber\\\":\\\"\\\",\\\"csdn\\\":\\\"https://blog.csdn.net/heyiqingsong\\\",\\\"englishName\\\":\\\"heyqing\\\",\\\"gitee\\\":\\\"https://gitee.com/heyqing\\\",\\\"github\\\":\\\"https://github.com/heyqing\\\",\\\"isCommentReview\\\":0,\\\"isEmailNotice\\\":1,\\\"isReward\\\":1,\\\"juejin\\\":\\\"\\\",\\\"\n\"; line: 1, column: 456]\r\n	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:75)\r\n	at org.springframework.data.redis.core.AbstractOperations.deserializeValue(AbstractOperations.java:335)\r\n	at org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:61)\r\n	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:228)\r\n	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:188)\r\n	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:96)\r\n	at org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:53)\r\n	at top.heyqing.heyblog.service.impl.RedisServiceImpl.get(RedisServiceImpl.java:51)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:167)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1582)\r\n	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\nCaused by: com.fasterxml.jackson.core.JsonParseException: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value\n at [Source: (byte[])\"\"{\\\"alipayQRCode\\\":\\\"\\\",\\\"author\\\":\\\"何以晴\\\",\\\"authorAvatar\\\":\\\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\\\",\\\"authorIntro\\\":\\\"往事莫沉吟。身间时序好，且登临。\\\",\\\"beianNumber\\\":\\\"\\\",\\\"csdn\\\":\\\"https://blog.csdn.net/heyiqingsong\\\",\\\"englishName\\\":\\\"heyqing\\\",\\\"gitee\\\":\\\"https://gitee.com/heyqing\\\",\\\"github\\\":\\\"https://github.com/heyqing\\\",\\\"isCommentReview\\\":0,\\\"isEmailNotice\\\":1,\\\"isReward\\\":1,\\\"juejin\\\":\\\"\\\",\\\"\n\"; line: 1, column: 456]\r\n	at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1851)\r\n	at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:707)\r\n	at com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(ParserBase.java:1046)\r\n	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2537)\r\n	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString(UTF8StreamJsonParser.java:2466)\r\n	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:297)\r\n	at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserializeWithType(UntypedObjectDeserializer.java:713)\r\n	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:68)\r\n	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4526)\r\n	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3572)\r\n	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:73)\r\n	... 14 more\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-03 13:15:41');
INSERT INTO `t_exception_log` VALUES (15, '/', 'top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo', 'GET', NULL, '获取系统信息', 'java.lang.reflect.UndeclaredThrowableException\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:759)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$EnhancerBySpringCGLIB$$4e443ee6.getBlogHomeInfo(<generated>)\r\n	at sun.reflect.GeneratedMethodAccessor561.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value\n at [Source: (byte[])\"\"{\\\"alipayQRCode\\\":\\\"\\\",\\\"author\\\":\\\"何以晴\\\",\\\"authorAvatar\\\":\\\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\\\",\\\"authorIntro\\\":\\\"往事莫沉吟。身间时序好，且登临。\\\",\\\"beianNumber\\\":\\\"\\\",\\\"csdn\\\":\\\"https://blog.csdn.net/heyiqingsong\\\",\\\"englishName\\\":\\\"heyqing\\\",\\\"gitee\\\":\\\"https://gitee.com/heyqing\\\",\\\"github\\\":\\\"https://github.com/heyqing\\\",\\\"isCommentReview\\\":0,\\\"isEmailNotice\\\":1,\\\"isReward\\\":1,\\\"juejin\\\":\\\"\\\",\\\"\n\"; line: 1, column: 456]; nested exception is com.fasterxml.jackson.core.JsonParseException: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value\n at [Source: (byte[])\"\"{\\\"alipayQRCode\\\":\\\"\\\",\\\"author\\\":\\\"何以晴\\\",\\\"authorAvatar\\\":\\\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\\\",\\\"authorIntro\\\":\\\"往事莫沉吟。身间时序好，且登临。\\\",\\\"beianNumber\\\":\\\"\\\",\\\"csdn\\\":\\\"https://blog.csdn.net/heyiqingsong\\\",\\\"englishName\\\":\\\"heyqing\\\",\\\"gitee\\\":\\\"https://gitee.com/heyqing\\\",\\\"github\\\":\\\"https://github.com/heyqing\\\",\\\"isCommentReview\\\":0,\\\"isEmailNotice\\\":1,\\\"isReward\\\":1,\\\"juejin\\\":\\\"\\\",\\\"\n\"; line: 1, column: 456]\r\n	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)\r\n	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getHeyBlogHomeInfo(HeyBlogInfoServiceImpl.java:119)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$FastClassBySpringCGLIB$$30eccb54.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl$$EnhancerBySpringCGLIB$$d293a0d.getHeyBlogHomeInfo(<generated>)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController.getBlogHomeInfo(HeyBlogInfoController.java:54)\r\n	at top.heyqing.heyblog.controller.HeyBlogInfoController$$FastClassBySpringCGLIB$$28867f00.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	... 99 more\r\nCaused by: org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value\n at [Source: (byte[])\"\"{\\\"alipayQRCode\\\":\\\"\\\",\\\"author\\\":\\\"何以晴\\\",\\\"authorAvatar\\\":\\\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\\\",\\\"authorIntro\\\":\\\"往事莫沉吟。身间时序好，且登临。\\\",\\\"beianNumber\\\":\\\"\\\",\\\"csdn\\\":\\\"https://blog.csdn.net/heyiqingsong\\\",\\\"englishName\\\":\\\"heyqing\\\",\\\"gitee\\\":\\\"https://gitee.com/heyqing\\\",\\\"github\\\":\\\"https://github.com/heyqing\\\",\\\"isCommentReview\\\":0,\\\"isEmailNotice\\\":1,\\\"isReward\\\":1,\\\"juejin\\\":\\\"\\\",\\\"\n\"; line: 1, column: 456]; nested exception is com.fasterxml.jackson.core.JsonParseException: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value\n at [Source: (byte[])\"\"{\\\"alipayQRCode\\\":\\\"\\\",\\\"author\\\":\\\"何以晴\\\",\\\"authorAvatar\\\":\\\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\\\",\\\"authorIntro\\\":\\\"往事莫沉吟。身间时序好，且登临。\\\",\\\"beianNumber\\\":\\\"\\\",\\\"csdn\\\":\\\"https://blog.csdn.net/heyiqingsong\\\",\\\"englishName\\\":\\\"heyqing\\\",\\\"gitee\\\":\\\"https://gitee.com/heyqing\\\",\\\"github\\\":\\\"https://github.com/heyqing\\\",\\\"isCommentReview\\\":0,\\\"isEmailNotice\\\":1,\\\"isReward\\\":1,\\\"juejin\\\":\\\"\\\",\\\"\n\"; line: 1, column: 456]\r\n	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:75)\r\n	at org.springframework.data.redis.core.AbstractOperations.deserializeValue(AbstractOperations.java:335)\r\n	at org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:61)\r\n	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:228)\r\n	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:188)\r\n	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:96)\r\n	at org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:53)\r\n	at top.heyqing.heyblog.service.impl.RedisServiceImpl.get(RedisServiceImpl.java:51)\r\n	at top.heyqing.heyblog.service.impl.HeyBlogInfoServiceImpl.getWebsiteConfig(HeyBlogInfoServiceImpl.java:167)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n	at java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1582)\r\n	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\nCaused by: com.fasterxml.jackson.core.JsonParseException: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value\n at [Source: (byte[])\"\"{\\\"alipayQRCode\\\":\\\"\\\",\\\"author\\\":\\\"何以晴\\\",\\\"authorAvatar\\\":\\\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\\\",\\\"authorIntro\\\":\\\"往事莫沉吟。身间时序好，且登临。\\\",\\\"beianNumber\\\":\\\"\\\",\\\"csdn\\\":\\\"https://blog.csdn.net/heyiqingsong\\\",\\\"englishName\\\":\\\"heyqing\\\",\\\"gitee\\\":\\\"https://gitee.com/heyqing\\\",\\\"github\\\":\\\"https://github.com/heyqing\\\",\\\"isCommentReview\\\":0,\\\"isEmailNotice\\\":1,\\\"isReward\\\":1,\\\"juejin\\\":\\\"\\\",\\\"\n\"; line: 1, column: 456]\r\n	at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1851)\r\n	at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:707)\r\n	at com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(ParserBase.java:1046)\r\n	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2537)\r\n	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString(UTF8StreamJsonParser.java:2466)\r\n	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:297)\r\n	at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserializeWithType(UntypedObjectDeserializer.java:713)\r\n	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:68)\r\n	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4526)\r\n	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3572)\r\n	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:73)\r\n	... 14 more\r\n', '192.168.200.50', '内网IP|内网IP', '2024-12-03 13:15:54');
INSERT INTO `t_exception_log` VALUES (16, '/users/code', 'top.heyqing.heyblog.controller.UserAuthController.sendCode', 'GET', '[\"2278315855@qq.com\"]', '发送邮箱验证码', 'org.springframework.amqp.AmqpIOException: java.io.IOException\n	at org.springframework.amqp.rabbit.support.RabbitExceptionTranslator.convertRabbitAccessException(RabbitExceptionTranslator.java:70)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.createBareConnection(AbstractConnectionFactory.java:524)\n	at org.springframework.amqp.rabbit.connection.CachingConnectionFactory.createConnection(CachingConnectionFactory.java:751)\n	at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.createConnection(ConnectionFactoryUtils.java:214)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.doExecute(RabbitTemplate.java:2089)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:2062)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.send(RabbitTemplate.java:1009)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.convertAndSend(RabbitTemplate.java:1075)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.convertAndSend(RabbitTemplate.java:1068)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl.sendCode(UserAuthServiceImpl.java:96)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl$$FastClassBySpringCGLIB$$2fc48117.invoke(<generated>)\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl$$EnhancerBySpringCGLIB$$d7298de1.sendCode(<generated>)\n	at top.heyqing.heyblog.controller.UserAuthController.sendCode(UserAuthController.java:39)\n	at top.heyqing.heyblog.controller.UserAuthController$$FastClassBySpringCGLIB$$7e442777.invoke(<generated>)\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\n	at top.heyqing.heyblog.controller.UserAuthController$$EnhancerBySpringCGLIB$$45dc9415.sendCode(<generated>)\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n	at java.lang.reflect.Method.invoke(Method.java:498)\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n	at java.lang.Thread.run(Thread.java:750)\nCaused by: java.io.IOException\n	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:129)\n	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:125)\n	at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:147)\n	at com.rabbitmq.client.impl.AMQConnection.start(AMQConnection.java:439)\n	at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:1139)\n	at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:1087)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.connectAddresses(AbstractConnectionFactory.java:560)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.connect(AbstractConnectionFactory.java:533)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.createBareConnection(AbstractConnectionFactory.java:487)\n	... 118 more\nCaused by: com.rabbitmq.client.ShutdownSignalException: connection error; protocol method: #method<connection.close>(reply-code=530, reply-text=NOT_ALLOWED - vhost / not found, class-id=10, method-id=40)\n	at com.rabbitmq.utility.ValueOrException.getValue(ValueOrException.java:66)\n	at com.rabbitmq.utility.BlockingValueOrException.uninterruptibleGetValue(BlockingValueOrException.java:36)\n	at com.rabbitmq.client.impl.AMQChannel$BlockingRpcContinuation.getReply(AMQChannel.java:502)\n	at com.rabbitmq.client.impl.AMQChannel.privateRpc(AMQChannel.java:293)\n	at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:141)\n	... 124 more\n', '110.176.17.163', '中国|山西省|太原市|电信', '2024-12-09 10:59:51');
INSERT INTO `t_exception_log` VALUES (17, '/users/code', 'top.heyqing.heyblog.controller.UserAuthController.sendCode', 'GET', '[\"2278315855@qq.com\"]', '发送邮箱验证码', 'org.springframework.amqp.AmqpIOException: java.io.IOException\n	at org.springframework.amqp.rabbit.support.RabbitExceptionTranslator.convertRabbitAccessException(RabbitExceptionTranslator.java:70)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.createBareConnection(AbstractConnectionFactory.java:524)\n	at org.springframework.amqp.rabbit.connection.CachingConnectionFactory.createConnection(CachingConnectionFactory.java:751)\n	at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.createConnection(ConnectionFactoryUtils.java:214)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.doExecute(RabbitTemplate.java:2089)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:2062)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.send(RabbitTemplate.java:1009)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.convertAndSend(RabbitTemplate.java:1075)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.convertAndSend(RabbitTemplate.java:1068)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl.sendCode(UserAuthServiceImpl.java:96)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl$$FastClassBySpringCGLIB$$2fc48117.invoke(<generated>)\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl$$EnhancerBySpringCGLIB$$d7298de1.sendCode(<generated>)\n	at top.heyqing.heyblog.controller.UserAuthController.sendCode(UserAuthController.java:39)\n	at top.heyqing.heyblog.controller.UserAuthController$$FastClassBySpringCGLIB$$7e442777.invoke(<generated>)\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\n	at top.heyqing.heyblog.controller.UserAuthController$$EnhancerBySpringCGLIB$$45dc9415.sendCode(<generated>)\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n	at java.lang.reflect.Method.invoke(Method.java:498)\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n	at java.lang.Thread.run(Thread.java:750)\nCaused by: java.io.IOException\n	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:129)\n	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:125)\n	at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:147)\n	at com.rabbitmq.client.impl.AMQConnection.start(AMQConnection.java:439)\n	at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:1139)\n	at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:1087)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.connectAddresses(AbstractConnectionFactory.java:560)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.connect(AbstractConnectionFactory.java:533)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.createBareConnection(AbstractConnectionFactory.java:487)\n	... 118 more\nCaused by: com.rabbitmq.client.ShutdownSignalException: connection error; protocol method: #method<connection.close>(reply-code=530, reply-text=NOT_ALLOWED - vhost / not found, class-id=10, method-id=40)\n	at com.rabbitmq.utility.ValueOrException.getValue(ValueOrException.java:66)\n	at com.rabbitmq.utility.BlockingValueOrException.uninterruptibleGetValue(BlockingValueOrException.java:36)\n	at com.rabbitmq.client.impl.AMQChannel$BlockingRpcContinuation.getReply(AMQChannel.java:502)\n	at com.rabbitmq.client.impl.AMQChannel.privateRpc(AMQChannel.java:293)\n	at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:141)\n	... 124 more\n', '110.176.17.163', '中国|山西省|太原市|电信', '2024-12-09 11:04:01');
INSERT INTO `t_exception_log` VALUES (18, '/users/code', 'top.heyqing.heyblog.controller.UserAuthController.sendCode', 'GET', '[\"3584902107@qq.com\"]', '发送邮箱验证码', 'org.springframework.amqp.AmqpIOException: java.io.IOException\n	at org.springframework.amqp.rabbit.support.RabbitExceptionTranslator.convertRabbitAccessException(RabbitExceptionTranslator.java:70)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.createBareConnection(AbstractConnectionFactory.java:524)\n	at org.springframework.amqp.rabbit.connection.CachingConnectionFactory.createConnection(CachingConnectionFactory.java:751)\n	at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.createConnection(ConnectionFactoryUtils.java:214)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.doExecute(RabbitTemplate.java:2089)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:2062)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.send(RabbitTemplate.java:1009)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.convertAndSend(RabbitTemplate.java:1075)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.convertAndSend(RabbitTemplate.java:1068)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl.sendCode(UserAuthServiceImpl.java:96)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl$$FastClassBySpringCGLIB$$2fc48117.invoke(<generated>)\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl$$EnhancerBySpringCGLIB$$d7298de1.sendCode(<generated>)\n	at top.heyqing.heyblog.controller.UserAuthController.sendCode(UserAuthController.java:39)\n	at top.heyqing.heyblog.controller.UserAuthController$$FastClassBySpringCGLIB$$7e442777.invoke(<generated>)\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\n	at top.heyqing.heyblog.controller.UserAuthController$$EnhancerBySpringCGLIB$$45dc9415.sendCode(<generated>)\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n	at java.lang.reflect.Method.invoke(Method.java:498)\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n	at java.lang.Thread.run(Thread.java:750)\nCaused by: java.io.IOException\n	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:129)\n	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:125)\n	at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:147)\n	at com.rabbitmq.client.impl.AMQConnection.start(AMQConnection.java:439)\n	at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:1139)\n	at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:1087)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.connectAddresses(AbstractConnectionFactory.java:560)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.connect(AbstractConnectionFactory.java:533)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.createBareConnection(AbstractConnectionFactory.java:487)\n	... 118 more\nCaused by: com.rabbitmq.client.ShutdownSignalException: connection error; protocol method: #method<connection.close>(reply-code=530, reply-text=NOT_ALLOWED - vhost / not found, class-id=10, method-id=40)\n	at com.rabbitmq.utility.ValueOrException.getValue(ValueOrException.java:66)\n	at com.rabbitmq.utility.BlockingValueOrException.uninterruptibleGetValue(BlockingValueOrException.java:36)\n	at com.rabbitmq.client.impl.AMQChannel$BlockingRpcContinuation.getReply(AMQChannel.java:502)\n	at com.rabbitmq.client.impl.AMQChannel.privateRpc(AMQChannel.java:293)\n	at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:141)\n	... 124 more\n', '123.139.175.219', '中国|陕西省|汉中市|联通', '2024-12-09 11:06:52');
INSERT INTO `t_exception_log` VALUES (19, '/users/code', 'top.heyqing.heyblog.controller.UserAuthController.sendCode', 'GET', '[\"3584902107@qq.com\"]', '发送邮箱验证码', 'org.springframework.amqp.AmqpIOException: java.io.IOException\n	at org.springframework.amqp.rabbit.support.RabbitExceptionTranslator.convertRabbitAccessException(RabbitExceptionTranslator.java:70)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.createBareConnection(AbstractConnectionFactory.java:524)\n	at org.springframework.amqp.rabbit.connection.CachingConnectionFactory.createConnection(CachingConnectionFactory.java:751)\n	at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.createConnection(ConnectionFactoryUtils.java:214)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.doExecute(RabbitTemplate.java:2089)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:2062)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.send(RabbitTemplate.java:1009)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.convertAndSend(RabbitTemplate.java:1075)\n	at org.springframework.amqp.rabbit.core.RabbitTemplate.convertAndSend(RabbitTemplate.java:1068)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl.sendCode(UserAuthServiceImpl.java:96)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl$$FastClassBySpringCGLIB$$2fc48117.invoke(<generated>)\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\n	at top.heyqing.heyblog.service.impl.UserAuthServiceImpl$$EnhancerBySpringCGLIB$$d7298de1.sendCode(<generated>)\n	at top.heyqing.heyblog.controller.UserAuthController.sendCode(UserAuthController.java:39)\n	at top.heyqing.heyblog.controller.UserAuthController$$FastClassBySpringCGLIB$$7e442777.invoke(<generated>)\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\n	at top.heyqing.heyblog.controller.UserAuthController$$EnhancerBySpringCGLIB$$45dc9415.sendCode(<generated>)\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n	at java.lang.reflect.Method.invoke(Method.java:498)\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at top.heyqing.heyblog.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:46)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n	at java.lang.Thread.run(Thread.java:750)\nCaused by: java.io.IOException\n	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:129)\n	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:125)\n	at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:147)\n	at com.rabbitmq.client.impl.AMQConnection.start(AMQConnection.java:439)\n	at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:1139)\n	at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:1087)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.connectAddresses(AbstractConnectionFactory.java:560)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.connect(AbstractConnectionFactory.java:533)\n	at org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.createBareConnection(AbstractConnectionFactory.java:487)\n	... 118 more\nCaused by: com.rabbitmq.client.ShutdownSignalException: connection error; protocol method: #method<connection.close>(reply-code=530, reply-text=NOT_ALLOWED - vhost / not found, class-id=10, method-id=40)\n	at com.rabbitmq.utility.ValueOrException.getValue(ValueOrException.java:66)\n	at com.rabbitmq.utility.BlockingValueOrException.uninterruptibleGetValue(BlockingValueOrException.java:36)\n	at com.rabbitmq.client.impl.AMQChannel$BlockingRpcContinuation.getReply(AMQChannel.java:502)\n	at com.rabbitmq.client.impl.AMQChannel.privateRpc(AMQChannel.java:293)\n	at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:141)\n	... 124 more\n', '123.139.175.219', '中国|陕西省|汉中市|联通', '2024-12-09 11:08:19');

-- ----------------------------
-- Table structure for t_friend_link
-- ----------------------------
DROP TABLE IF EXISTS `t_friend_link`;
CREATE TABLE `t_friend_link`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `link_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接名',
  `link_avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接头像',
  `link_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接地址',
  `link_intro` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接介绍',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `fk_friend_link_user`(`link_name` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 47 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_friend_link
-- ----------------------------

-- ----------------------------
-- Table structure for t_job
-- ----------------------------
DROP TABLE IF EXISTS `t_job`;
CREATE TABLE `t_job`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '任务ID',
  `job_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '任务名称',
  `job_group` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'DEFAULT' COMMENT '任务组名',
  `invoke_target` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调用目标字符串',
  `cron_expression` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT 'cron执行表达式',
  `misfire_policy` tinyint(1) NULL DEFAULT 3 COMMENT '计划执行错误策略（1立即执行 2执行一次 3放弃执行）',
  `concurrent` tinyint(1) NULL DEFAULT 1 COMMENT '是否并发执行（0禁止 1允许）',
  `status` tinyint(1) NULL DEFAULT 0 COMMENT '状态（0暂停 1正常）',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '备注信息',
  PRIMARY KEY (`id`, `job_name`, `job_group`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 86 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '定时任务调度表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_job
-- ----------------------------

-- ----------------------------
-- Table structure for t_job_log
-- ----------------------------
DROP TABLE IF EXISTS `t_job_log`;
CREATE TABLE `t_job_log`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '任务日志ID',
  `job_id` int NOT NULL COMMENT '任务ID',
  `job_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '任务名称',
  `job_group` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '任务组名',
  `invoke_target` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调用目标字符串',
  `job_message` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '日志信息',
  `status` tinyint(1) NULL DEFAULT 0 COMMENT '执行状态（0正常 1失败）',
  `exception_info` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '异常信息',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `start_time` datetime NULL DEFAULT NULL COMMENT '开始时间',
  `end_time` datetime NULL DEFAULT NULL COMMENT '结束时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6176 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '定时任务调度日志表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_job_log
-- ----------------------------

-- ----------------------------
-- Table structure for t_menu
-- ----------------------------
DROP TABLE IF EXISTS `t_menu`;
CREATE TABLE `t_menu`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单名',
  `path` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单路径',
  `component` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '组件',
  `icon` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单icon',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `order_num` tinyint(1) NOT NULL COMMENT '排序',
  `parent_id` int NULL DEFAULT NULL COMMENT '父id',
  `is_hidden` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否隐藏  0否1是',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 226 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_menu
-- ----------------------------
INSERT INTO `t_menu` VALUES (1, '首页', '/', '/home/Home.vue', 'el-icon-myshouye', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 1, NULL, 0);
INSERT INTO `t_menu` VALUES (2, '文章管理', '/article-submenu', 'Layout', 'el-icon-mywenzhang-copy', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 2, NULL, 0);
INSERT INTO `t_menu` VALUES (3, '消息管理', '/message-submenu', 'Layout', 'el-icon-myxiaoxi', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 3, NULL, 0);
INSERT INTO `t_menu` VALUES (4, '系统管理', '/system-submenu', 'Layout', 'el-icon-myshezhi', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 5, NULL, 0);
INSERT INTO `t_menu` VALUES (5, '个人中心', '/setting', '/setting/Setting.vue', 'el-icon-myuser', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 7, NULL, 0);
INSERT INTO `t_menu` VALUES (6, '发布文章', '/articles', '/article/Article.vue', 'el-icon-myfabiaowenzhang', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 1, 2, 0);
INSERT INTO `t_menu` VALUES (7, '修改文章', '/articles/*', '/article/Article.vue', 'el-icon-myfabiaowenzhang', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 2, 2, 1);
INSERT INTO `t_menu` VALUES (8, '文章列表', '/article-list', '/article/ArticleList.vue', 'el-icon-mywenzhangliebiao', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 3, 2, 0);
INSERT INTO `t_menu` VALUES (9, '分类管理', '/categories', '/category/Category.vue', 'el-icon-myfenlei', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 4, 2, 0);
INSERT INTO `t_menu` VALUES (10, '标签管理', '/tags', '/tag/Tag.vue', 'el-icon-myicontag', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 5, 2, 0);
INSERT INTO `t_menu` VALUES (11, '评论管理', '/comments', '/comment/Comment.vue', 'el-icon-mypinglunzu', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 1, 3, 0);
INSERT INTO `t_menu` VALUES (13, '用户列表', '/users', '/user/User.vue', 'el-icon-myyonghuliebiao', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 1, 202, 0);
INSERT INTO `t_menu` VALUES (14, '角色管理', '/roles', '/role/Role.vue', 'el-icon-myjiaoseliebiao', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 2, 213, 0);
INSERT INTO `t_menu` VALUES (15, '接口管理', '/resources', '/resource/Resource.vue', 'el-icon-myjiekouguanli', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 2, 213, 0);
INSERT INTO `t_menu` VALUES (16, '菜单管理', '/menus', '/menu/Menu.vue', 'el-icon-mycaidan', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 2, 213, 0);
INSERT INTO `t_menu` VALUES (17, '友链管理', '/links', '/friendLink/FriendLink.vue', 'el-icon-mydashujukeshihuaico-', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 3, 4, 0);
INSERT INTO `t_menu` VALUES (18, '关于我', '/about', '/about/About.vue', 'el-icon-myguanyuwo', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 4, 4, 0);
INSERT INTO `t_menu` VALUES (19, '日志管理', '/log-submenu', 'Layout', 'el-icon-myguanyuwo', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 6, NULL, 0);
INSERT INTO `t_menu` VALUES (20, '操作日志', '/operation/log', '/log/OperationLog.vue', 'el-icon-myguanyuwo', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 1, 19, 0);
INSERT INTO `t_menu` VALUES (201, '在线用户', '/online/users', '/user/Online.vue', 'el-icon-myyonghuliebiao', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 7, 202, 0);
INSERT INTO `t_menu` VALUES (202, '用户管理', '/users-submenu', 'Layout', 'el-icon-myyonghuliebiao', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 4, NULL, 0);
INSERT INTO `t_menu` VALUES (205, '相册管理', '/album-submenu', 'Layout', 'el-icon-myimage-fill', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 5, NULL, 0);
INSERT INTO `t_menu` VALUES (206, '相册列表', '/albums', '/album/Album.vue', 'el-icon-myzhaopian', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 1, 205, 0);
INSERT INTO `t_menu` VALUES (208, '照片管理', '/albums/:albumId', '/album/Photo.vue', 'el-icon-myzhaopian', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 1, 205, 1);
INSERT INTO `t_menu` VALUES (209, '定时任务', '/quartz', '/quartz/Quartz.vue', 'el-icon-myyemianpeizhi', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 2, 4, 0);
INSERT INTO `t_menu` VALUES (210, '照片回收站', '/photos/delete', '/album/Delete.vue', 'el-icon-myhuishouzhan', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 3, 205, 1);
INSERT INTO `t_menu` VALUES (213, '权限管理', '/permission-submenu', 'Layout', 'el-icon-mydaohanglantubiao_quanxianguanli', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 4, NULL, 0);
INSERT INTO `t_menu` VALUES (214, '网站管理', '/website', '/website/Website.vue', 'el-icon-myxitong', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 1, 4, 0);
INSERT INTO `t_menu` VALUES (220, '定时任务日志', '/quartz/log/:quartzId', '/log/QuartzLog.vue', 'el-icon-myguanyuwo', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 2, 19, 1);
INSERT INTO `t_menu` VALUES (221, '说说管理', '/talk-submenu', 'Layout', 'el-icon-mypinglun', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 3, NULL, 0);
INSERT INTO `t_menu` VALUES (222, '说说列表', '/talk-list', '/talk/TalkList.vue', 'el-icon-myiconfontdongtaidianji', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 1, 221, 0);
INSERT INTO `t_menu` VALUES (223, '发布说说', '/talks', '/talk/Talk.vue', 'el-icon-myfabusekuai', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 2, 221, 0);
INSERT INTO `t_menu` VALUES (224, '修改说说', '/talks/:talkId', '/talk/Talk.vue', 'el-icon-myfabusekuai', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 3, 221, 1);
INSERT INTO `t_menu` VALUES (225, '异常日志', '/exception/log', '/log/ExceptionLog.vue', 'el-icon-myguanyuwo', '2024-12-03 10:39:06', '2024-12-03 10:39:21', 1, 19, 0);

-- ----------------------------
-- Table structure for t_operation_log
-- ----------------------------
DROP TABLE IF EXISTS `t_operation_log`;
CREATE TABLE `t_operation_log`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `opt_module` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作模块',
  `opt_type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作类型',
  `opt_uri` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作url',
  `opt_method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作方法',
  `opt_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作描述',
  `request_param` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求参数',
  `request_method` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求方式',
  `response_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '返回数据',
  `user_id` int NOT NULL COMMENT '用户id',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户昵称',
  `ip_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作地址',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1781 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_operation_log
-- ----------------------------
INSERT INTO `t_operation_log` VALUES (1671, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ca2fd8bf7de96bbea8d5f154c6cb0dc2.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '用户1863230511598567425', '192.168.200.50', '内网IP|内网IP', '2024-12-02 21:37:15', NULL);
INSERT INTO `t_operation_log` VALUES (1672, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6680808ea68590ed05df5eea92c8382a.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '用户1863230511598567425', '192.168.200.50', '内网IP|内网IP', '2024-12-02 21:48:05', NULL);
INSERT INTO `t_operation_log` VALUES (1673, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"\",\"articleContent\":\"![cliconnectsuccess.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ca2fd8bf7de96bbea8d5f154c6cb0dc2.jpg)\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6680808ea68590ed05df5eea92c8382a.jpg\",\"articleTitle\":\"测试文章\",\"categoryName\":\"test\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"tag\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '用户1863230511598567425', '192.168.200.50', '内网IP|内网IP', '2024-12-02 21:48:13', NULL);
INSERT INTO `t_operation_log` VALUES (1674, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/b1b7a22c33c96bf495949220d3eb00d4.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '用户1863230511598567425', '192.168.200.50', '内网IP|内网IP', '2024-12-02 21:54:56', NULL);
INSERT INTO `t_operation_log` VALUES (1675, '用户信息模块', '修改', '/users/info', 'top.heyqing.heyblog.controller.UserInfoController.updateUserInfo', '更新用户信息', '[{\"nickname\":\"何以晴\"}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '用户1863230511598567425', '192.168.200.50', '内网IP|内网IP', '2024-12-02 22:05:58', NULL);
INSERT INTO `t_operation_log` VALUES (1676, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/b1b4c64178b490f5ca843315c86e4e5b.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-02 22:40:59', NULL);
INSERT INTO `t_operation_log` VALUES (1677, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"想要上网时隐身如影像，偷偷看海外视频，或者不被监视地畅游网络？VPN来帮你！它就像一张虚拟隐形斗篷，让你在互联网世界中安全飞行。数据加密保护隐私，翻墙功能打破地域限制，你想看什么、做什么，VPN帮你悄无声息地搞定！赶快试试，让网络世界更自由，更安全，别让虚拟的“围墙”阻挡了你的脚步！\",\"articleContent\":\"## 什么是vpn\\n\\nVPN（虚拟私人网络，Virtual Private Network）是一种通过公用网络（如互联网）建立安全连接的技术。它通过加密通信和隐藏用户的IP地址，保护用户的隐私和安全，使得用户能够像在私人网络中一样安全地访问远程资源。\\n\\n主要功能包括：\\n\\n1. **数据加密**：VPN可以加密用户的网络流量，防止黑客或第三方监听或篡改数据。\\n2. **隐藏IP地址**：通过VPN，用户可以隐藏真实IP地址，增强匿名性。\\n3. **绕过地理限制**：使用VPN可以让用户伪装成其他国家或地区的用户，从而绕过一些区域限制，访问特定内容。\\n4. **增强安全性**：尤其在公共Wi-Fi环境中，VPN可以防止数据被窃取或被恶意软件攻击。\\n\\n## 如何获取vpn\\n\\n- 购买代理商的\\n- 自建vpn代理机\\n\\n这篇文章主要讲解购买代理商的\\n\\n出售vpn的代理商有很多，这里我以 **阿伟云** 为例，【顶级机场也不错】\\n\\n[阿伟云](https://www.awyydsgroup.xyz/register) | [顶级机场](https://xn--mes358a9urctx.com/)\\n\\n```\\nhttps://www.awyydsgroup.xyz/register\\nhttps://xn--mes358a9urctx.com/ #直接搜：顶级机场.com 也可以\\n```\\n\\n注册登录成功后点击侧边栏的【购买订阅】可根据你的需求进行购买，普通用户$9.99$套餐就够用了\\n\\n购买成功后还需要进行本机注册代理就可以进行使用了,阿伟云也提供了教学步骤，点击侧边栏的【使用文档】即可\\n\\n工具下载：[Clash Windows 端](https://hollywood.lanzouj.com/win64dadwdqwd)\\n\\n下载完成并配置完试访问 [YouTobe](https://www.youtube.com/)能打开就是好了\\n\\n如有问题留言哦~\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/b1b4c64178b490f5ca843315c86e4e5b.jpg\",\"articleTitle\":\"如何使用vpn\",\"categoryName\":\"网络\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"网络\",\"工具\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-02 22:41:06', NULL);
INSERT INTO `t_operation_log` VALUES (1678, '用户信息模块', '修改', '/users/info', 'top.heyqing.heyblog.controller.UserInfoController.updateUserInfo', '更新用户信息', '[{\"intro\":\"云散天犹蓝\",\"nickname\":\"何以晴\",\"website\":\"http:\\\\\\\\heyqing.top\"}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:03:11', NULL);
INSERT INTO `t_operation_log` VALUES (1679, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/424f6c0410a2b943a4a7db496e46d6e3.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:06:45', NULL);
INSERT INTO `t_operation_log` VALUES (1680, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ff4622c79a3d04297b5bb112ca681f12.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:06:58', NULL);
INSERT INTO `t_operation_log` VALUES (1681, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/1908d285ab72d077bbbd3893005c8138.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:07:15', NULL);
INSERT INTO `t_operation_log` VALUES (1682, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/285034254a19bcfcc498edd990f4b830.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:07:34', NULL);
INSERT INTO `t_operation_log` VALUES (1683, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/c5e6ba099bb2e54b49cf0ca86e02caaa.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:07:52', NULL);
INSERT INTO `t_operation_log` VALUES (1684, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3b9037ec8bc1f8f56f75114e6123d4e9.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:08:06', NULL);
INSERT INTO `t_operation_log` VALUES (1685, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cf5de98941120246c3330fd89bdd5cf3.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:08:44', NULL);
INSERT INTO `t_operation_log` VALUES (1686, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"内网穿透（NAT traversal）是一种技术手段，使得位于内网或防火墙后面的设备能够通过外网访问。例如，如果你的计算机、服务器等设备处于公司或家庭的路由器后面，通常只有同一内网中的设备能够直接访问它，外网用户无法直接连接。内网穿透通过创建外部访问通道，使得外网用户能够与这些内网资源交互。\",\"articleContent\":\"## 什么是内网穿透，内网穿透有什么用\\n\\n**内网穿透**（NAT traversal）是一种技术手段，使得位于内网或防火墙后面的设备能够通过外网访问。例如，如果你的计算机、服务器等设备处于公司或家庭的路由器后面，通常只有同一内网中的设备能够直接访问它，外网用户无法直接连接。内网穿透通过创建外部访问通道，使得外网用户能够与这些内网资源交互。\\n\\n**内网穿透的用途**\\n\\n1. **远程访问内网服务**：在外网环境中，用户可以远程访问自己家里或公司内网中的电脑、服务器、摄像头等设备，进行文件传输、桌面控制等操作。\\n2. **服务器部署**：个人或企业可以将某些服务部署在内网中，通过内网穿透将这些服务发布到互联网上，使得它们无需复杂的公网 IP 配置即可被外界访问。\\n3. **内网开发调试**：开发者在本地搭建服务后，可以通过内网穿透提供给外网的同事或客户测试访问，便于调试和演示，尤其在展示网站或应用时十分便捷。\\n\\n## 下载并注册\\n\\n[ngork官网](https://ngrok.com/)\\n\\n```\\nhttps://ngrok.com/\\n```\\n\\n打不开网址可前往 [科学上网]()\\n\\n点击右上角 【sign up】注册可使用（Google 或 Github 账号登录）\\n\\n![1.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/424f6c0410a2b943a4a7db496e46d6e3.png)\\n\\n账号注册登录成功后，点击【Windows】来到下载界面 [下载界面](https://download.ngrok.com/windows)\\n\\n![2.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ff4622c79a3d04297b5bb112ca681f12.png)\\n发现下载有两种方法\\n\\n一种是使用命令行\\n\\n```dos\\nchoco install ngrok\\n```\\n\\n安装，但我不建议这样，点击【Download】\\n\\n![3.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/1908d285ab72d077bbbd3893005c8138.png)\\n\\n下载好后解压，来到【ngork.exe】级目录，打开【cmd】或【PowerShell】，然后到官网找到【Authtoken】，复制粘贴你的Authtoken，到本机执行\\n\\n![4.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/285034254a19bcfcc498edd990f4b830.png)\\n\\n我这【ngork】放在D盘了\\n\\n![5.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/c5e6ba099bb2e54b49cf0ca86e02caaa.png)\\n\\n配置完成后就可以使用了\\n\\n还是在刚刚的命令框输入命令\\n\\n```dos\\nngork http 你本机端口号\\n```\\n\\n输入回车后，出现一下界面即成功\\n\\n![6.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3b9037ec8bc1f8f56f75114e6123d4e9.png)\\n【Forwarding】即公网可访问域名\\n\\n\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cf5de98941120246c3330fd89bdd5cf3.jpg\",\"articleTitle\":\"Ngrok实现内网穿透（Windows）\",\"categoryName\":\"工具\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:09:13', NULL);
INSERT INTO `t_operation_log` VALUES (1687, '分类模块', '删除', '/admin/categories', 'top.heyqing.heyblog.controller.CategoryController.deleteCategories', '删除分类', '[[217]]', 'DELETE', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:11:07', NULL);
INSERT INTO `t_operation_log` VALUES (1688, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/30cd1f0cf4bc0878c32788bb42a413fe.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:13:18', NULL);
INSERT INTO `t_operation_log` VALUES (1689, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/58cbbe3d2d1602bfab7cd873c3e713c0.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:13:51', NULL);
INSERT INTO `t_operation_log` VALUES (1690, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/55488bd06f39556b34a3da93c64aae6e.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:14:11', NULL);
INSERT INTO `t_operation_log` VALUES (1691, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/bba8fea909f7dd9c03cbf072af5663ff.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:14:26', NULL);
INSERT INTO `t_operation_log` VALUES (1692, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/84dc6e8f6cfa75b3da0927a2eac56946.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:14:37', NULL);
INSERT INTO `t_operation_log` VALUES (1693, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/aaf89d6d9dca487db3ccaf31cc03592a.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:18:01', NULL);
INSERT INTO `t_operation_log` VALUES (1694, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"Ollama，就像你的私人AI魔法师，懂你、陪你，还不用担心它偷听八卦！它把强大的语言模型请回家，在本地悄悄运行，数据全掌控在你手里。没网？没事，它依然在线侃大山！不像那些云端AI，天天在“云”里雾里晃悠，它实打实地为你服务。想用？一声召唤，它乖乖上线；不想用？直接关机，毫无怨言。总之，有了 Ollama，你能安全、自在又优雅地玩转AI世界，像个技术时代的生活艺术家！\",\"articleContent\":\"# Windows 下载部署 Ollama\\n\\n## 什么是Ollama\\n\\n**Ollama** 是一个轻量级的本地推理工具，主要用于运行 AI 模型。它允许用户在本地设备上运行和交互基于大语言模型（LLM）的应用，而无需依赖云服务。这种工具的主要优势是隐私保护和低延迟，尤其适合那些需要处理敏感数据或希望脱离互联网的场景。\\n\\n以下是一些 Ollama 的关键特点：  \\n\\n1. **离线运行**：不需要连接云端，完全本地推理。  \\n2. **支持多种模型**：可加载不同的 LLM，例如一些开源的语言模型。  \\n3. **跨平台支持**：通常支持在 macOS、Windows 和 Linux 等系统上运行。  \\n4. **用户友好**：提供简洁的接口和配置，适合开发者和非技术用户。  \\n\\n[Ollama官网](https://ollama.com/)\\n\\n```\\nhttps://ollama.com/\\n```\\n\\n[Ollama Github地址](https://github.com/ollama/ollama)\\n\\n```\\nhttps://github.com/ollama/ollama\\n```\\n\\n这里我以Windows为例，在本地部署一台AI模型平台\\n\\n## Windows 下载部署Ollama\\n\\n### 1.下载 Ollama应用程序\\n\\n[Ollama下载地址](https://ollama.com/download)\\n\\n```\\nhttps://ollama.com/download\\n```\\n\\n下载后会得到一个【OllamaSetup.exe】文件，双击运行安装【Install】即可，安装完成会提示`Ollama running`,你电脑右下角的状态栏里会有一个羊驼的logo\\n\\nOllama默认开机启动（几乎不会影响开机速度）\\n\\n### 2.修改Ollama配置（可跳过）\\n\\n【Ollama】大模型下载地址默认在`C:\\\\Users\\\\用户名\\\\.ollama\\\\models`\\n\\n大模型的地址最好还是更改地址（毕竟真的很大,当然不改也可以）\\n\\n#### **修改Ollama模型下载地址**\\n\\n右击我的电脑点击【属性】或在设置中搜索【查看高级系统设置】点击，打开【系统属性】，然后点击【环境变量】，在下面的【系统变量】中点击【新建】添加下面这段话\\n\\n变量名：`OLLAMA_MODELS`\\n\\n变量值：`H:\\\\app\\\\ollama\\\\.ollama\\\\models`\\n\\n变量名**不能变**，变量值为你想要存放ollama 模型的地址\\n\\n![1.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/30cd1f0cf4bc0878c32788bb42a413fe.jpg)\\n\\n配置完成可打开【cmd】命令行窗口查看，输入\\n\\n```\\necho %ollama_models%\\n```\\n\\n出现刚刚配置的路径就是正确情况\\n\\n#### 修改Ollama默认端口号\\n\\nOllama默认在`11434`端口运行\\n\\n在【环境变量】的【用户变量】中添加\\n\\n变量名：`OLLAMA_HOST`\\n\\n变量值：`:114344`\\n\\n设置成功后访问`http:\\\\\\\\127.0.0.1:114344`屏幕上会出现【Ollama is running】字样\\n\\n### 3.下载Docker\\n\\n问什么要下载Docker,不下载docker也是可以使用Ollama的是不过大多是在【PowerShell】这样的命令行窗口内（像这样的可以直接看下面下载Ollama大模型），下载Docker后可以使用其的**WebUI**，官方也是推荐这样，下面我们开始安装Docker。\\n\\n#### 下载docker桌面端\\n\\n- 打开windows子系统\\n\\n点击键盘【win】键，搜索打开【控制面板】，点击【程序】，然后再点击【启用或关闭Windows功能】，下拉到底下找到【适用于Linux的Windows子系统】，点击选上后点【确定】。功能启动需要重启后启用\\n\\n> 重启前先点赞收藏下呗，万一找不到该咋办 `^_^`\\n\\n- 先确保wsl2更新至最新\\n\\n查看wsl2版本\\n\\n```bash\\nwsl --version\\n```\\n\\n如果不是可使用`wsl --update`进行更新\\n\\n```bash\\nwsl --update\\n```\\n\\n也可手动安装前往[WSL](https://aka.ms/wsl2kernel)下载\\n\\n- 下载docker\\n\\n前往[docker 官网](https://www.docker.com/products/docker-desktop/)下载Windows桌面版\\n\\n```\\nhttps://www.docker.com/products/docker-desktop/\\n```\\n\\n下载好后会提醒重启电脑\\n\\n> 还是那就话：重启前先点赞收藏下呗，万一找不到该咋办 `^_^`\\n\\n- 配置docker resources（可选）\\n\\n配置resources地址会改变images下载的位置\\n\\n打开Docker桌面版（一般会提醒你登录，其实不登录也可以使用），点击右上角的【设置】图标，再点击【Resources】就会看到当前images下载位置，你可点击【Browse】进行更改\\n\\n> Docker 默认是双击就启动，启动后在屏幕右下角状态栏可看到\\n\\n- 拉取并运行Ollama镜像\\n\\n拉取并运行只需要这一段程序即可\\n\\n打开【cmd】输入\\n\\n```bash\\ndocker run -d -p 9876:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main\\n```\\n\\n使用`9876`端口作为WebUI入口，可修改；`-v`为日志输出路径，可修改；`--name`后为镜像名字，可修改；`--restart`为开启自启动\\n\\n启动成功后访问`http:\\\\\\\\127.0.0.1:9876`可以看见\\n\\n![2.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/58cbbe3d2d1602bfab7cd873c3e713c0.jpg)\\n默认为登录页面我这是注册登录过后的\\n\\n### 4.下载Ollama大模型并使用\\n\\n前往 [Ollama Lib 下载](https://ollama.com/library)\\n\\n```\\nhttps://ollama.com/library\\n\\n```\\n\\n点击你想下载的大模型，我这里以`llama3.2`为例\\n\\n#### PowerShell下载（不推荐）\\n\\n![3.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/55488bd06f39556b34a3da93c64aae6e.jpg)\\n复制`ollama run llama3.2`在powershell中运行即可，下载成功就可以访问了\\n\\n#### Docker下载\\n\\n打开上述的`http://127.0.0.1:9876`页面\\n\\n![4.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/bba8fea909f7dd9c03cbf072af5663ff.jpg)\\n\\n![5.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/84dc6e8f6cfa75b3da0927a2eac56946.jpg)\\n\\n下载完成后,回到主页【点击新对话】就可以使用了\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/aaf89d6d9dca487db3ccaf31cc03592a.png\",\"articleTitle\":\"Windows 下载部署 Ollama\",\"categoryName\":\"AI\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"AI大模型\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:19:14', NULL);
INSERT INTO `t_operation_log` VALUES (1695, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ccd58fcbcb8e6532b67fa26a8d8ed430.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:24:01', NULL);
INSERT INTO `t_operation_log` VALUES (1696, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"人脸识别是一项通过分析人脸特征来确认个体身份的技术。它通过捕捉面部的独特标志，如眼睛间距、鼻梁形状和面部轮廓等，来实现快速且精准的识别。如今，这项技术被广泛应用于手机解锁、安防监控以及金融支付等领域，提升了生活的便利性和安全性。虽然它在准确性上不断进步，但有时也会遇到光线、角度或表情变化等因素的挑战。总的来说，人脸识别正在悄然改变我们的日常生活，让安全变得更加智能和高效。\",\"articleContent\":\"# Deepface\\n\\ndeepface是【Github】上的一个开源人脸识别（Face Recognition）项目，项目包含了人脸识别、人脸属性分析等多个功能\\n\\n代码地址为：[DeepFace](https://github.com/serengil/deepface)\\n\\n```\\nhttps://github.com/serengil/deepface\\n```\\n\\n模型下载地址：[Releases](https://github.com/serengil/deepface/releases)\\n\\n```\\nhttps://github.com/serengil/deepface/releases\\n```\\n\\npython安装方式(对python版本有限制，最好使用3.8 < version < 3.13的，使用3.11就可以) [python 3.11 下载](https://www.python.org/ftp/python/3.11.8/python-3.11.8-amd64.exe)\\n\\n```bash\\npip install deepface -i https://pypi.tuna.tsinghua.edu.cn/simple\\n```\\n\\n## 基础功能接口\\n\\n- `DeepFace.verify`:人脸验证\\n- `DeepFace.find`:人脸识别\\n- `DeepFace.analyze`:人脸属性分析\\n- `DeepFace.extract_faces`:人脸检测和对齐\\n- `DeepFace.represent`:人脸特征提取\\n- `DeepFace.stream`:人脸实时分析\\n\\n当然这个项目的功能很多，很抱歉我不能全都提到，下面会对这几个接口进行一一讲解，在此之前你需要准备一些基础数据 => 人物照片，视频等【我的放文章最后】\\n\\n当然还需这几个python库作为辅助，如果你还未安装可使用下面命令进行安装\\n\\n**matplotlib**：数据可视化库，用于创建静态、动态、交互式的图形和可视化。\\n\\n```bash\\npip install matplotlib\\n```\\n\\n**PIL **:Python Imaging Library，图像处理的库，如图像剪裁、缩放、旋转、转换颜色空间、过滤等。\\n\\n```bash\\npip install Pillow\\n```\\n\\n**cv2**:Open Source Computer Vision Library,开源计算机视觉库,主要用于图像处理、视频分析、机器视觉以及图像识别等.。\\n\\n```bash\\npip install opencv-python\\n```\\n\\n如果你还需要一些额外的功能，如视频 I/O 或 OpenCV 的扩展功能，可以安装 `opencv-python-headless`：\\n\\n```bash\\npip install opencv-python-headless\\n```\\n\\n**numpy **:Numerical Python,用于科学计算的 Python 库,提供了高效的数组对象,以及用于处理数组的各种功能和数学运算等。\\n\\n```bash\\npip install numpy\\n```\\n\\n## 人脸验证\\n\\n> 原文\\n>\\n> **Face Verification** - [`Demo`](https://youtu.be/KRCvkNCOphE)\\n>\\n> This function verifies face pairs as same person or different persons. It expects exact image paths as inputs. Passing numpy or base64 encoded images is also welcome. Then, it is going to return a dictionary and you should check just its verified key.\\n>\\n> 翻译过来就是\\n>\\n> 此功能可验证人脸对是同一个人还是不同人。它期望精确的图像路径作为输入。也欢迎传递 numpy 或 base64 编码图像。然后，它将返回一个字典，您应该仅检查其经过验证的密钥。\\n\\n意思就是给两张图，判断这两张图是不是同一个人\\n\\n这里是简单的代码示例\\n\\n```python\\n# 人脸识别模型 - 人脸验证 - Face Verification\\n# img1 = 1-1.jpg , img2 = 1-2.jpg\\ndef deepface_model_verify(img1: str, img2: str, model_name: str = \'VGG-Face\'):\\n    \\\"\\\"\\\"\\n    给出两张图片比较两张图片是否为同一个人\\n    :param img1:\\n    :param img2:\\n    :param model_name:\\n    :return:\\n    \\\"\\\"\\\"\\n    result = DeepFace.verify(img1_path=img1,\\n                             img2_path=img2,\\n                             model_name=model_name)\\n    return result\\n\\n```\\n\\n将运行结果result，打印得到：\\n\\n```json\\n{\\n    \'verified\': True, \\n    \'distance\': 0.23718864776725845, \\n    \'threshold\': 0.4,\\n    \'model\': \'Facenet\', \\n    \'detector_backend\': \'opencv\',\\n    \'similarity_metric\': \'cosine\', \\n    \'facial_areas\': \\n    {\\n        \'img1\': \\n            {\\n                \'x\': 339, \\n                \'y\': 218,\\n                \'w\': 768,\\n                \'h\': 768,\\n                \'left_eye\': (850, 524),\\n                \'right_eye\': (571, 517)\\n            },\\n    \\t\'img2\': \\n            {\\n                \'x\': 524,\\n                \'y\': 201,\\n                \'w\': 491,\\n                \'h\': 491,\\n                \'left_eye\': (858, 388),\\n                \'right_eye\': (663, 390)\\n            }\\n    },\\n    \'time\': 5.01\\n}\\n\\n```\\n\\nverified为True说明两张图片为同一个人，事实也是如此\\n\\n> **针对模型之间的比较在下面的 - 人脸识别模型比较 - 提及**\\n\\n**请求参数说明**\\n\\n- `img1_path (str 或 np.ndarray 或 List[float])`:第一幅图像的路径。\\n- `img2_path (str 或 np.ndarray 或 List[float])`:第二幅图像的路径。(图像接受字符串形式的精确图像路径、numpy 数组 (BGR)、base64 编码图像或预先计算的嵌入)\\n- `model_name (str)`：人脸识别模型。\\n  - 选项：VGG-Face、Facenet、Facenet512、OpenFace、DeepFace、DeepID、Dlib、ArcFace、SFace 和 GhostFaceNet（默认为 VGG-Face）。\\n  - 模型加载需要h5文件，默认GitHub下载，若下载不下可点击 [.h5文件下载](https://pan.quark.cn/s/28e3ef150cde)\\n  - 下载后放在`C:\\\\Users\\\\你的用户文件夹\\\\.deepface\\\\weights`中\\n  - 也可自定义文件路径：修改 `folder_utils.py` 的 `get_deepface_home` 函数\\n- `detector_backend (str)`:人脸检测器。\\n  - 选项：\'opencv\'、\'retinaface\'、\'mtcnn\'、\'ssd\'、\'dlib\'、\'mediapipe\'、\'yolov8\'、\'centerface\' 或 \'skip\'（默认为 opencv）。\\n- `distance_metric (str)`:用于测量相似度的度量。\\n  - 选项：\'cosine\'、\'euclidean\'、\'euclidean_l2\'（默认为‘cosine’）。\\n- `force_detection (bool)`:如果在图像中未检测到面部，则引发异常。\\n  - 设置为 False 以避免低分辨率图像的异常（默认为 True）。\\n- `align(bool)`:用于启用面部对齐的标志（默认为 True）。\\n- `expand_percentage（int）`:以百分比扩大检测到的面部区域（默认为 0）。\\n- `normalization (str)`:在将输入图像输入模型之前对其进行规范化。\\n  - 选项：base、raw、Facenet、Facenet2018、VGGFace、VGGFace2、ArcFace（默认为 base）\\n- `silent (bool)`:抑制或允许某些日志消息，以实现更安静的分析过程（默认为 False）。\\n- `Threshold (float)`:指定阈值以确定一对代表同一个人还是不同的人。\\n  - 此阈值用于比较距离。如果未设置，将根据指定的模型名称和距离度量应用默认的预调整阈值（默认为 None）。\\n- `anti_spoofing (bool)`:启用反欺骗的标志（默认为 False）。\\n\\n**返回参数说明**\\n\\n字典类型，包含\\n\\n- `verified:bool`:表示图像代表同一个人 (True)还是不同的人 (False)。\\n- `distance:float`:面部向量之间的距离测量值。距离越小，相似度越高。\\n- `threshold:float`:用于验证的最大阈值。如果距离低于此阈值，则认为图像匹配。\\n- `model:str`:所选的面部识别模型。\\n- `distance_metric:str`:所选的用于测量距离的相似度度量。\\n- `facial_areas:dict`:两幅图像中面部的矩形感兴趣区域。\\n  - `img1:{x：int，y：int，w：int，h：int}`:第一幅图像的感兴趣区域。\\n  - `img2:{x：int，y：int，w：int，h：int}`:第二幅图像的感兴趣区域。\\n- `time:float`:验证过程所用时间（以秒为单位）。\\n\\n## 人脸识别\\n\\n> [Face recognition](https://sefiks.com/2020/05/25/large-scale-face-recognition-for-deep-learning/) requires applying face verification many times. Herein, deepface has an out-of-the-box find function to handle this action. It\'s going to look for the identity of input image in the database path and it will return list of pandas data frame as output. Meanwhile, facial embeddings of the facial database are stored in a pickle file to be searched faster in next time. Result is going to be the size of faces appearing in the source image. Besides, target images in the database can have many faces as well.\\n>\\n> 人脸识别需要多次进行人脸验证。在这里，deepface 有一个开箱即用的查找功能来处理此操作。它将在数据库路径中查找输入图像的标识，并将返回 pandas 数据帧列表作为输出。同时，面部数据库的面部嵌入存储在pickle文件中，以便下次更快地搜索。结果将是源图像中出现的面部尺寸。此外，数据库中的目标图像也可以有多个面孔。\\n\\n即给定一个人脸和一个数据集，接口将会在这个数据集中找到与目标人脸相似的数据\\n\\n简单的代码示例\\n\\n```python\\n# 人脸识别模型 - 人脸识别 - Face recognition\\n# img = 1-1.jpg , db = ./img/ \\ndef deepface_model_find(img: str, db: str, model_name=\'VGG-Face\'):\\n    \\\"\\\"\\\"\\n    给一张图片以及一个文件夹，会在这个文件夹中找到和图片一样的人\\n    :param img:\\n    :param db:\\n    :param model_name:\\n    :return:\\n    \\\"\\\"\\\"\\n    dfs = DeepFace.find(\\n        img_path=img,\\n        db_path=db\\n    )\\n    return dfs\\n\\n```\\n\\n将返回的dfs打印得到：\\n\\n```\\n[      identity                                      hash  ...  threshold  distance\\n0  img\\\\1-1.jpg  7281f3c678041b24471ba0baea4f57e0bac7e5cf  ...       0.68  0.000000\\n1  img\\\\1-2.jpg  4d8cdc50d15e6c56060ecb57ebbe01bc23dc7d90  ...       0.68  0.412802\\n2  img\\\\1-3.jpg  d6e080b2bda60541cf19e1d5abdf5be464421031  ...       0.68  0.434774\\n\\n[3 rows x 12 columns]]\\n\\n```\\n\\n结果显示1-1.jpg,1-2.jpg,1-3.jpg三张与目标文件（1-1.jpg）中的人物相似，事实却是如此\\n\\n**请求参数说明**\\n\\n- `img_path (str 或 np.ndarray)`:图像的准确路径、BGR 格式的 numpy 数组或 base64 编码图像。如果源图像包含多个人脸，结果将包含每个检测到的人脸的信息。\\n- `db_path (str)`:包含图像文件的文件夹的路径。\\n- `model_name (str)`:人脸识别模型。,选项不变\\n- `distance_metric (str)`:用于测量相似度的指标。不变\\n- `force_detection (bool)`:如果图像中未检测到人脸，则引发异常。设置为 False 以避免低分辨率图像的异常（默认为 True）。\\n- `detector_backend (str)`:人脸检测器后端。不变\\n- `align (bool)`:根据眼睛位置执行对齐（默认为 True）。\\n- `expand_percentage (int)`:以百分比扩大检测到的面部区域（默认为 0）。\\n- `threshold (float)`:指定阈值以确定一对代表同一个人还是不同的人。不变\\n- `normalization (str)`:在将输入图像输入模型之前对其进行规范化。\\n- `silent (bool)`:抑制或允许某些日志消息，以实现更安静的分析过程（默认为 False）。\\n- ` refresh_database(bool)`:将图像表示（pkl）文件与目录/db 文件同步，如果设置为 false，它将忽略 db_path 内的任何文件更改（默认为 True）。\\n- `anti_spoofing (bool)`:启用反欺骗的标志（默认为 False）。\\n\\n**返回结果说明**\\n\\n返回类型为 list (List[pd.DataFrame])，DataFrame 列包括\\n\\n- `identity`:检测到的个人的身份标签。\\n- `target_x ,target_y ,target_w ,target_h`:数据库中目标人脸的边界框坐标。\\n- `source_x ,source_y ,source_w ,source_h`:源图像中检测到的人脸的边界框坐标。\\n- `threshold`:确定一对人脸是同一个人还是不同人的阈值。\\n- `distance`:基于指定模型和距离度量的人脸之间的相似度得分\\n\\n## 人脸属性分析\\n\\n> **Facial Attribute Analysis** - [`Demo`](https://youtu.be/GT2UeN85BdA)\\n>\\n> DeepFace also comes with a strong facial attribute analysis module including [`age`](https://sefiks.com/2019/02/13/apparent-age-and-gender-prediction-in-keras/), [`gender`](https://sefiks.com/2019/02/13/apparent-age-and-gender-prediction-in-keras/), [`facial expression`](https://sefiks.com/2018/01/01/facial-expression-recognition-with-keras/) (including angry, fear, neutral, sad, disgust, happy and surprise) and [`race`](https://sefiks.com/2019/11/11/race-and-ethnicity-prediction-in-keras/) (including asian, white, middle eastern, indian, latino and black) predictions. Result is going to be the size of faces appearing in the source image.\\n>\\n> 面部属性分析 - 演示 DeepFace还配备了强大的面部属性分析模块，包括年龄、性别、面部表情（包括愤怒、恐惧、中性、悲伤、厌恶、快乐和惊讶）和种族（包括亚洲人、白人、中东人、印度人、拉丁裔和黑人）预测。结果将是源图像中出现的面部尺寸。\\n\\n代码演示\\n\\n```python\\n# 人脸识别模型 - 人脸属性分析 - Face analyze\\n# img = 3-3.jpg\\ndef deepface_model_analyze(img: str):\\n    \\\"\\\"\\\"\\n    给定一张图片分析，年龄、性别、面部表情、种族\\n    :param img:\\n    :return:\\n    \\\"\\\"\\\"\\n    result = DeepFace.analyze(img_path=img)\\n    return result\\n\\n```\\n\\n打印运行结果得到\\n\\n```\\n[\\n{\\n    \'emotion\': \\n    \\t{\\n            \'angry\': np.float32(0.3104471),\\n            \'disgust\': np.float32(1.3859168e-09), \\n            \'fear\': np.float32(0.037615385),\\n            \'happy\': np.float32(0.0009396329), \\n            \'sad\': np.float32(0.49794665),\\n            \'surprise\': np.float32(2.9795643e-05),\\n            \'neutral\': np.float32(99.153015)\\n        },\\n    \'dominant_emotion\': \'neutral\', \\n    \'region\': \\n    \\t{\\n            \'x\': 79,\\n            \'y\': 280,\\n            \'w\': 879, \\n            \'h\': 879, \\n            \'left_eye\': (661, 642), \\n            \'right_eye\': (341, 612)\\n        },\\n    \'face_confidence\': np.float64(0.9),\\n    \'age\': 32, \\n    \'gender\':\\n    \\t{\\n            \'Woman\': np.float32(0.0053363745),\\n            \'Man\': np.float32(99.99466)\\n        },\\n    \'dominant_gender\': \'Man\', \\n    \'race\': \\n    \\t{\\n            \'asian\': np.float32(0.0038025668),\\n            \'indian\': np.float32(0.008881129), \\n            \'black\': np.float32(0.00014986782), \\n            \'white\': np.float32(97.29132), \\n            \'middle eastern\': np.float32(0.94727564), \\n            \'latino hispanic\': np.float32(1.748561)\\n        },\\n    \'dominant_race\': \'white\'\\n}\\n]\\n\\n```\\n\\n结果显示图片上为白种人、男性、32岁、面部无表情，结果与图片一致\\n\\n**请求参数说明**\\n\\n- `img_path (str or np.ndarray)`：图像路径\\n- `actions (tuple)`:要分析的属性。默认值为（\'age\'、\'gender\'、\'emotion\'、\'race\'）。如果需要，您可以从分析中排除其中一些属性。\\n- ` enforce_detection (bool)`:如果在图像中未检测到人脸，则引发异常。\\n- `detector_backend`,`distance_metric`,`align`,`expand_percentage`,`silent`,`anti_spoofing`：不变\\n\\n**返回结果说明**\\n\\n返回类型为字典列表 (List[Dict[str, Any]])，每个字典包含以下键：\\n\\n- `region (dict)`:表示图像中检测到的人脸的矩形区域。\\n  - `x`:人脸左上角的 x 坐标。\\n  - `y`:人脸左上角的 y 坐标。\\n  - `w`:检测到的人脸区域的宽度。\\n  - `h`:检测到的人脸区域的高度。\\n- `age (float)`:检测到的人脸的估计年龄。\\n- `face_confidence (float)`:检测到的人脸的置信度得分。表示人脸检测的可靠性。\\n- `dominant_gender (str)`:检测到的人脸中的主导性别。“男人”或“女人”。\\n- `gender (dict)`:每个性别类别的置信度得分。\\n  - `Man`:男性性别的置信度得分。\\n  - `Woman`:女性性别的置信度得分。\\n- `dominant_emotion (str)`:检测到的面部中的主要情绪。可能的值包括“悲伤”、“愤怒”、“惊讶”、“恐惧”、“高兴”、“厌恶”和“中性”\\n- `emotion (dict)`:每个情绪类别的置信度得分。\\n  - `sad`:悲伤的置信度得分。\\n  - `angry`:愤怒的置信度得分。\\n  - `surprise`:惊讶的置信度得分。\\n  - `fear`:恐惧的置信度得分。\\n  - `happy`:高兴的置信度得分。\\n  - `disgust`:厌恶的置信度得分。\\n  - `neutral`:中立性的置信度得分。\\n- `dominant_race (str)`:检测到的脸部中的主要种族。可能的值包括“印度人”、“亚洲人”、“拉丁裔西班牙人”、“黑人”、“中东人”和“白人”。\\n- `race (dict)`:每个种族类别的置信度得分。\\n  - `indian`:印度族裔的置信度得分。\\n  - `asian`:亚洲族裔的置信度得分。\\n  - `latino hispanic`:拉丁裔/西班牙裔族裔的置信度得分。\\n  - `black`:黑人族裔的置信度得分。\\n  - `middle eastern`:中东族裔的置信度得分。\\n  - `white`:白人族裔的置信度得分。\\n\\n## 人脸检测和对齐\\n\\n> **Face Detection and Alignment** - [`Demo`](https://youtu.be/GZ2p2hj2H5k)\\n>\\n> Face detection and alignment are important early stages of a modern face recognition pipeline. [Experiments](https://github.com/serengil/deepface/tree/master/benchmarks) show that detection increases the face recognition accuracy up to 42%, while alignment increases it up to 6%. [`OpenCV`](https://sefiks.com/2020/02/23/face-alignment-for-face-recognition-in-python-within-opencv/), [`Ssd`](https://sefiks.com/2020/08/25/deep-face-detection-with-opencv-in-python/), [`Dlib`](https://sefiks.com/2020/07/11/face-recognition-with-dlib-in-python/), [`MtCnn`](https://sefiks.com/2020/09/09/deep-face-detection-with-mtcnn-in-python/), `Faster MtCnn`, [`RetinaFace`](https://sefiks.com/2021/04/27/deep-face-detection-with-retinaface-in-python/), [`MediaPipe`](https://sefiks.com/2022/01/14/deep-face-detection-with-mediapipe/), `Yolo`, `YuNet` and `CenterFace` detectors are wrapped in deepface.\\n>\\n> 人脸检测和对齐 - 演示 人脸检测和对齐是现代人脸识别流程的重要早期阶段。实验表明，检测将人脸识别准确率提高了 42%，而对齐则将其提高了 6%。 OpenCV、Ssd、Dlib、MtCnn、Faster MtCnn、RetinaFace、MediaPipe、Yolo、YuNet 和 CenterFace 检测器都封装在 Deepface 中。\\n\\n代码示例\\n\\n```python\\n# 人脸识别模型 - 人脸检测 - Face extract\\n# img = 2-2.jpg\\ndef deepface_model_extract(img: str):\\n    \\\"\\\"\\\"\\n    给定一张图检测图中任务\\n    :param img:\\n    :return:\\n    \\\"\\\"\\\"\\n    face_objs = DeepFace.extract_faces(\\n        img_path=img,\\n        detector_backend=\'opencv\',\\n        align=True,\\n    )\\n    return face_objs\\n\\n```\\n\\n返回结果为：\\n\\n```\\n[\\n{\\n    \'face\': array([[[0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 0.99607843, 0.99607843],\\n        ...,\\n        [0.99215686, 0.99215686, 1.        ],\\n        [0.99215686, 0.99215686, 0.99215686],\\n        [0.99607843, 0.99607843, 0.99607843]],\\n\\n       [[0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 0.99607843, 0.99607843],\\n        ...,\\n        [0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 0.99607843, 0.99607843],\\n        [1.        , 1.        , 1.        ]],\\n\\n       [[0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 0.99607843, 0.99607843],\\n        ...,\\n        [0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 0.99607843, 0.99607843]],\\n\\n       ...,\\n\\n       [[1.        , 1.        , 1.        ],\\n        [1.        , 1.        , 1.        ],\\n        [1.        , 1.        , 1.        ],\\n        ...,\\n        [1.        , 1.        , 1.        ],\\n        [0.99607843, 0.99607843, 0.99607843],\\n        [1.        , 1.        , 1.        ]],\\n\\n       [[1.        , 1.        , 1.        ],\\n        [1.        , 1.        , 1.        ],\\n        [1.        , 1.        , 1.        ],\\n        ...,\\n        [0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 0.99607843, 0.99607843],\\n        [0.99607843, 1.        , 1.        ]],\\n\\n       [[1.        , 1.        , 1.        ],\\n        [1.        , 1.        , 1.        ],\\n        [1.        , 1.        , 1.        ],\\n        ...,\\n        [0.99607843, 1.        , 1.        ],\\n        [1.        , 1.        , 1.        ],\\n        [0.99607843, 0.99607843, 0.99607843]]]),\\n\\t\'facial_area\': \\n\\t\\t{\\n            \'x\': 321,\\n            \'y\': 77,\\n            \'w\': 197,\\n            \'h\': 197,\\n            \'left_eye\': (452, 153),\\n            \'right_eye\': (384, 153)\\n        },\\n\\t\'confidence\': np.float64(0.91)\\n}\\n]\\n\\n```\\n\\n\\n\\n**请求参数说明**\\n\\n- `img_path (str or np.ndarray)`：第一幅图像的路径\\n- ` force_detection(bool)`:如果在图像中未检测到人脸，则引发异常。\\n- `color_face (str)`:返回人脸图像输出的颜色。选项：\'rgb\'、\'bgr\' 或 \'gray\'（默认为 \'rgb\'）。\\n- `normalize_face (bool)`:用于启用输出人脸图像标准化（除以 255）的标志人脸图像输出人脸图像标准化（默认为 True）。\\n- `detector_backend`,`distance_metric`,`align`,`expand_percentage`,`silent`,`anti_spoofing`：不变\\n\\n**返回结果说明**\\n\\n返回结果类型为字典列表 (List[Dict[str, Any]])，每个字典包含：\\n\\n- `face (np.ndarray)`:检测到的脸部作为 NumPy 数组。\\n- `facial_area (Dict[str, Any]) `:检测到的脸部区域作为字典，\\n  - `x,y,w,h (int)`\\n  - `left_eye,right_eye (int,int)`:左眼和右眼,分别是相对于人本身而不是观察者的左侧和右侧的眼睛。\\n- `confidence (float)`:与检测到的脸部相关的置信度分数。\\n- `is_real (bool)`:反欺骗分析结果。仅当输入参数中的 anti_spoofing 设置为 True 时，此键才在结果中可用。\\n- `antispoof_score (float)`:反欺骗分析结果的分数。仅当输入参数中的 anti_spoofing 设置为 True 时，此键才在结果中可用。\\n\\n## 人脸特征提取\\n\\n> **Embeddings** - [`Demo`](https://youtu.be/OYialFo7Qo4)\\n>\\n> Face recognition models basically represent facial images as multi-dimensional vectors. Sometimes, you need those embedding vectors directly. DeepFace comes with a dedicated representation function. Represent function returns a list of embeddings. Result is going to be the size of faces appearing in the image path.\\n>\\n> …\\n>\\n> 嵌入 - 演示 人脸识别模型基本上将面部图像表示为多维向量。有时，您直接需要这些嵌入向量。 DeepFace 带有专用的表示功能。表示函数返回嵌入列表。结果将是图像路径中出现的面部尺寸。\\n>\\n> 。。。\\n\\n代码演示：\\n\\n```python\\n# 人脸识别模型 - 人脸特征提取 - Face represent\\ndef deepface_model_represent(img: str):\\n    embedding_objs = DeepFace.represent(\\n        img_path=img\\n    )\\n    return embedding_objs\\n\\n```\\n\\n返回结果\\n\\n```\\n[\\n{\\n    \'embedding\': [0.0, 0.0, 0.013042318041708077, ... , 0.05823250615542309, 0.0],\\n    \'facial_area\': \\n    \\t{\\n            \'x\': 576, \\n            \'y\': 254,\\n            \'w\': 347,\\n            \'h\': 347,\\n            \'left_eye\': (810, 388), \\n            \'right_eye\': (681, 389)\\n        },\\n    \'face_confidence\': 0.9\\n}\\n]\\n\\n```\\n\\n**请求参数**没有大的变化\\n\\n**返回结果说明**\\n\\n返回类型为 字典列表 (List[Dict[str, Any]])，每个字典包含以下字段：\\n\\n- `embedding (List[float])`:表示面部特征的多维向量。维度数根据参考模型而不同（例如，FaceNet 返回 128 个维度，VGG-Face 返回 4096 个维度）。\\n- `facial_area (dict)`:字典格式的面部检测检测到的面部区域。\\n  - `x,y,w,h,left_eye,right_eye`\\n- `face_confidence (float)`:面部检测的置信度得分。如果 `detector_backend` 设置为“skip”，则置信度将为 0 并且没有意义。\\n\\n## 人脸实时分析\\n\\n> **Real Time Analysis** - [`Demo`](https://youtu.be/-c9sSJcx6wI)\\n>\\n> You can run deepface for real time videos as well. Stream function will access your webcam and apply both face recognition and facial attribute analysis. The function starts to analyze a frame if it can focus a face sequentially 5 frames. Then, it shows results 5 seconds.\\n>\\n> 实时分析 - 演示 您也可以运行 deepface 来播放实时视频。流功能将访问您的网络摄像头并应用面部识别和面部属性分析。如果该函数可以连续对焦一张脸 5 帧，则该函数开始分析一帧。然后，它会显示结果 5 秒。\\n\\n代码说明\\n\\n```python\\n# 人脸识别模型 - 人脸实时分析 - Face stream\\n# db = img , video = 3.mp4 \\ndef deepface_model_stream(db: str, video: str):\\n    DeepFace.stream(db_path=db,\\n                    source=video)\\n\\n```\\n\\n运行结果\\n\\n视频中有数据集中的人，视频中的32岁左右（32）、男性（M）、与img中的3-1.jpg相似，心情为happy\\n\\n![](./res/stream_res_3.jpg)\\n\\n**请求参数说明**\\n\\n- `db_path (str)`:包含图像文件的文件夹路径。数据库中所有检测到的人脸都将在决策过程中考虑。\\n- `enable_face_analysis (bool)` :启用人脸分析的标志（默认为 True）。\\n- `source (Any)`:视频流的来源（默认为 0，代表默认摄像头）。\\n- `time_threshold (int)`:人脸识别的时间阈值（以秒为单位）（默认为 5）。\\n- `frame_threshold (int)`:人脸识别的帧阈值（默认为 5）。\\n- 其余不变\\n\\n**返回结果**：无\\n\\n## 人脸识别模型比较\\n\\n> 原文\\n>\\n> FaceNet, VGG-Face, ArcFace and Dlib are overperforming ones based on experiments - see [`BENCHMARKS`](https://github.com/serengil/deepface/tree/master/benchmarks) for more details. You can find the measured scores of various models in DeepFace and the reported scores from their original studies in the following table.\\n>\\n> 翻译过来就是\\n> 根据实验，FaceNet、VGG-Face、ArcFace 和 Dlib 均表现出色 - 有关更多详细信息，请参阅基准测试。您可以在下表中找到 DeepFace 中各种模型的测量分数以及原始研究报告的分数。\\n\\n| Model(模型)  | Measured Score(实测分数) | Declared Score(公布分数) |\\n| :----------: | :----------------------: | :----------------------: |\\n|  Facenet512  |          98.4%           |          99.6%           |\\n| Human-beings |          97.5%           |          97.5%           |\\n|   Facenet    |          97.4%           |          99.2%           |\\n|     Dlib     |          96.8%           |          99.3 %          |\\n|   VGG-Face   |          96.7%           |          98.9%           |\\n|   ArcFace    |          96.7%           |          99.5%           |\\n| GhostFaceNet |          93.3%           |          99.7%           |\\n|    SFace     |          93.0%           |          99.5%           |\\n|   OpenFace   |          78.7%           |          92.9%           |\\n|   DeepFace   |          69.0%           |          97.3%           |\\n|    DeepID    |          66.5%           |          97.4%           |\\n\\n## docker部署\\n\\n> **Dockerized Service** - [`Demo`](https://youtu.be/9Tk9lRQareA)\\n>\\n> [![Docker Pulls](https://camo.githubusercontent.com/9825c1e9faee50fba7085e39510d9427287f1c6d46f44238ba5eeb478e34075d/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f736572656e67696c2f64656570666163653f6c6f676f3d646f636b6572)](https://hub.docker.com/r/serengil/deepface)\\n>\\n> The following command set will serve deepface on `localhost:5005` via docker. Then, you will be able to consume deepface services such as verify, analyze and represent. Also, if you want to build the image by your own instead of pre-built image from docker hub, [Dockerfile](https://github.com/serengil/deepface/blob/master/Dockerfile) is available in the root folder of the project.\\n\\n```bash\\n# docker build -t serengil/deepface . # build docker image from Dockerfile\\ndocker pull serengil/deepface # use pre-built docker image from docker hub\\ndocker run -p 5005:5000 serengil/deepface\\n\\n```\\n\\n命令行演示\\n\\n```bash\\n#face verification\\n$ deepface verify -img1_path tests/dataset/img1.jpg -img2_path tests/dataset/img2.jpg\\n\\n#facial analysis\\n$ deepface analyze -img_path tests/dataset/img1.jpg\\n\\n```\\n\\ndocker运行相关的shell命令 - [地址](https://github.com/serengil/deepface/blob/master/scripts/dockerize.sh#L17)\\n\\n```\\nhttps://github.com/serengil/deepface/blob/master/scripts/dockerize.sh#L17\\n\\n```\\n\\n## 辅助函数\\n\\n- 显示图片\\n\\n```python\\n# 展示图片\\ndef show_img(img):\\n    if isinstance(img, Image.Image):\\n        img.show()\\n    else:\\n        img = Image.open(img)\\n        img.show()\\n\\n```\\n\\n- 给人脸加框\\n\\n```python\\n# 给人脸添加画框 - 分析面部属性使用\\ndef picture_frame(src: str, res):\\n    _img = Image.open(src)  # 这里 src 是图像路径，正常加载\\n    # 访问 res 列表中的第一个字典\\n    x, y, w, h = res[0][\'region\'][\'x\'], res[0][\'region\'][\'y\'], res[0][\'region\'][\'w\'], res[0][\'region\'][\'h\']\\n    draw = ImageDraw.Draw(_img)\\n    draw.rectangle((x, y, x + w, y + h), outline=\\\"blue\\\", width=3)\\n    print(\\\"emo:{}\\\".format(res[0][\\\"emotion\\\"]))\\n    show_img(_img)\\n\\n```\\n\\n\\n\\n\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ccd58fcbcb8e6532b67fa26a8d8ed430.jpg\",\"articleTitle\":\"人脸识别-DeepFace\",\"categoryName\":\"AI\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"AI图像视觉\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:24:54', NULL);
INSERT INTO `t_operation_log` VALUES (1697, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/1bad65275eac84255c352a71525e8fdd.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:27:48', NULL);
INSERT INTO `t_operation_log` VALUES (1698, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/09fb39d629a5e572f040debb92d1f588.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:28:06', NULL);
INSERT INTO `t_operation_log` VALUES (1699, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/297d78da1ec37b668dafbb69903d831e.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:28:18', NULL);
INSERT INTO `t_operation_log` VALUES (1700, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3f283b73d39953d174a303594fc8d40a.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:28:31', NULL);
INSERT INTO `t_operation_log` VALUES (1701, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0073154ca5b8dd2da34a6058c8d3f0bf.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:28:38', NULL);
INSERT INTO `t_operation_log` VALUES (1702, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0073154ca5b8dd2da34a6058c8d3f0bf.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:32:07', NULL);
INSERT INTO `t_operation_log` VALUES (1703, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/4bc77c6a30a4d8c9a6d6a75f24c4dede.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:32:21', NULL);
INSERT INTO `t_operation_log` VALUES (1704, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/a1cdc5eaedda0f8bec3951d663d575d0.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:32:39', NULL);
INSERT INTO `t_operation_log` VALUES (1705, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/e91387aad4cd7c347379ecdcc5946dd5.jpeg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:37:12', NULL);
INSERT INTO `t_operation_log` VALUES (1706, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"用户追踪技术，就像是一个看不见的助手，悄悄记录你在网上的每一步——你点了什么，逛了多久，甚至是不是在想买那个鞋子。这项技术帮助商家“读懂”你的心思，推送你最想要的内容和广告，简直比你自己还懂你！虽然它让你体验更个性化，但也可能让你感觉“隐形的眼睛”随时在盯着你。别担心，虽然它记录了一切，但它也在帮助你避免浪费时间，快速找到最感兴趣的东西。总之，它是一把双刃剑，既有便利，也有隐私的考量。\",\"articleContent\":\"# **用户跟踪**（User Tracking）\\n\\n在计算机中，用户追踪通常称为 **用户跟踪**（User Tracking）或 **用户行为追踪**（User Behavior Tracking）。它是指通过各种技术手段收集和分析用户在网络应用或软件上的行为和活动。\\n\\n> 可以在用户不登录的情况下进行用户追踪，因为是不登录的所以用户追踪肯定做不到一对一的，只可能尽可能的保证精确、准确性\\n\\n## 浏览器指纹\\n\\nBrowser Fingerprinting：通过收集用户浏览器的属性（如屏幕分辨率、操作系统、插件、语言设置等）生成一个独特标识，以便识别用户。\\n\\n这里以Github上的 [fingerprintjs](https://github.com/fingerprintjs/fingerprintjs)（拥有$23.2K$的star数） 项目为例\\n\\n项目介绍了项目的局限性和简单使用方法\\n\\n局限性：\\n\\n> 准确性 由于 FingerprintJS 在浏览器本身内部处理和生成指纹，因此准确性有限 (40% - 60%)。例如，当两个不同的用户使用相同的（即相同版本、相同供应商、相同平台）浏览器发送请求时，FingerprintJS 将无法区分这两个浏览器，主要是因为这些浏览器的属性是相同的。 安全 由于指纹是在浏览器本身内部处理和生成的，因此它们很容易受到欺骗和逆向工程的攻击。\\n>\\n> **但是**\\n>\\n> 指纹识别准确率高达 99.5% FingerprintJS 和指纹识别之间的主要区别在于从浏览器收集的属性数量、处理方式以及识别访问者的准确性。 指纹识别是一个闭源商业设备智能平台，旨在防止欺诈并改善用户体验。它是 FingerprintJS 的增强版本，经过全面重新设计，可以解决最具挑战性的识别用例。它的源代码在此或任何其他公共存储库中均不可用。 与 FingerprintJS 不同，指纹识别能够达到 99.5% 的准确率，因为它在服务器上处理浏览器属性，并分析大量辅助数据（例如 IP 地址、访问时间模式、URL 更改等）。由于这些先进的匹配技术，指纹识别能够可靠地消除具有相同特征的不同访问者的重复数据。\\n\\n你可以直接点击 [fingerprintjs 官方](https://fingerprintjs.github.io/fingerprintjs/) 直接查看。\\n\\n这是点击后的页面，`Visitor identifier`显示就是你的浏览器指纹，具有唯一性\\n\\n![1.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/1bad65275eac84255c352a71525e8fdd.jpg)\\n\\n当然人家也提供了代码使用教程，以下为简单示例\\n\\n```js\\n<script>\\n  // Initialize the agent at application startup.\\n  // If you\'re using an ad blocker or Brave/Firefox, this import will not work.\\n  // Please use the NPM package instead: https://t.ly/ORyXk\\n  const fpPromise = import(\'https://openfpcdn.io/fingerprintjs/v4\')\\n    .then(FingerprintJS => FingerprintJS.load())\\n\\n  // Get the visitor identifier when you need it.\\n  fpPromise\\n    .then(fp => fp.get())\\n    .then(result => {\\n      // This is the visitor identifier:\\n      const visitorId = result.visitorId\\n      console.log(visitorId)\\n    })\\n</script>\\n```\\n\\n只需复制粘贴即可获得你的浏览器指纹，这里是我的实例\\n\\n```vue\\n<script setup lang=\\\"ts\\\">\\nimport { visitorId } from \'./components/fingerprintjs\' \\n// 我只是将https://openfpcdn.io/fingerprintjs/v4 代码下载到本地\\n</script>\\n<template>\\n  <div>\\n    <div class=\\\"finger\\\">\\n      <h2>浏览器指纹 : {{ visitorId }}</h2>\\n    </div>\\n  </div>\\n</template>\\n<style scoped>\\n.logo {\\n  height: 6em;\\n  padding: 1.5em;\\n  will-change: filter;\\n  transition: filter 300ms;\\n}\\n\\n.logo:hover {\\n  filter: drop-shadow(0 0 2em #646cffaa);\\n}\\n\\n.logo.vue:hover {\\n  filter: drop-shadow(0 0 2em #42b883aa);\\n}\\n</style>\\n\\n```\\n\\n这是运行结果\\n![2.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/09fb39d629a5e572f040debb92d1f588.jpg)\\n当然你也可以将源码拉倒本地，阅读源码\\n\\n```bash\\ngit clone https://github.com/fingerprintjs/fingerprintjs.git\\n```\\n\\n`clone`下来后先`npm install` 再 `npm run playground:start`即可运行项目，运行成功后访问`http://localhost:8080/`就可以看见你的浏览器指纹\\n\\n![3.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/297d78da1ec37b668dafbb69903d831e.jpg)\\n这里再说明下`npm`运行运行命令\\n\\n![4.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3f283b73d39953d174a303594fc8d40a.jpg)\\n**build**：使用 `rimraf` 清空 `dist` 目录，然后使用 `rollup` 根据 `rollup.config.ts` 构建项目。`--configPlugin` 参数指定使用 `@rollup/plugin-typescript` 插件，并指定了 `tsconfig.rollupConfig.json` 作为 TypeScript 配置文件。\\n\\n**build:watch**：监视模式下执行 `build`，在文件更改时自动重新构建。\\n\\n**playground:start**：进入 `playground` 目录，启动 `webpack-dev-server` 开发服务器，以开发模式运行。\\n\\n**playground:build**：进入 `playground` 目录，使用 `webpack` 以生产模式构建项目。\\n\\n**lint**：使用 `eslint` 检查 JavaScript 和 TypeScript 文件的代码规范，忽略 `.gitignore` 中的文件并且不允许任何警告。\\n\\n**lint:fix**：自动修复代码中 ESLint 检测到的错误。\\n\\n**test:local**：使用 `karma` 在本地测试，适合在本地浏览器中运行单次测试。\\n\\n**test:browserstack** 和 **test:browserstack:beta**：分别在 `browserstack` 和 `browserstack-beta` 配置下运行 `karma` 测试，用于在 BrowserStack 上的不同配置中进行单次测试。\\n\\n**check:dts**：使用 `tsc` 编译 TypeScript 并检查 `dist/fp.d.ts` 文件，确保独立模块模式正确，并且没有输出。\\n\\n**check:ssr**：检查项目是否能在服务器端渲染（SSR）环境中运行。如果代码使用了浏览器 API，则会输出错误并终止构建.\\n\\n------\\n\\n可以看见三种方式得出最后的浏览器指纹都一样，这是因为我使用的同一个浏览器打开的并且没有修改浏览器参数也没有修改代码生成的参数，源代码中你可以修改需要添加的参数，从而控制最后生成的Visitor identifier\\n\\n注：我使用的时候碰到过\\n\\n```\\nFirefox上：\\nvite] connecting... client:495:8\\n已拦截跨源请求：同源策略禁止读取位于 https://openfpcdn.io/fingerprintjs/v4 的远程资源。（原因：CORS 请求未能成功）。状态码：(null)。\\n\\n位于“https://openfpcdn.io/fingerprintjs/v4”的资源已被内容拦截功能拦截。\\nlocalhost:5173\\n此文档不允许使用模块来源的 URI：“https://openfpcdn.io/fingerprintjs/v4”。 localhost:5173\\n[vite] connected. client:614:14\\nUncaught (in promise) TypeError: error loading dynamically imported module: https://openfpcdn.io/fingerprintjs/v4 \\n=============================================================================\\nEdge上：\\n现在报错App.vue:2         \\nGET http://localhost:5173/utils/fingerprint.min.js net::ERR_BLOCKED_BY_CLIENT\\nsetup @ App.vue:2\\ncallWithErrorHandling @ runtime-core.esm-bundler.js:199\\nsetupStatefulComponent @ runtime-core.esm-bundler.js:7870\\nsetupComponent @ runtime-core.esm-bundler.js:7831\\nmountComponent @ runtime-core.esm-bundler.js:5179\\nprocessComponent @ runtime-core.esm-bundler.js:5145\\npatch @ runtime-core.esm-bundler.js:4663\\nrender2 @ runtime-core.esm-bundler.js:5942\\nmount @ runtime-core.esm-bundler.js:3904\\napp.mount @ runtime-dom.esm-bundler.js:1757\\n(匿名) @ main.ts:5\\n显示 9 更多框架\\n显示简略信息\\nlocalhost/:1  Uncaught (in promise) TypeError: Failed to fetch dynamically imported module: http://localhost:5173/utils/fingerprint.min.js\\n```\\n\\n我查了查关闭电脑代理或在文件上添加上代理即可\\n\\n## Cookies 和会话存储\\n\\nCookies & Session Storage：通过设置在用户浏览器中的小文件或会话存储数据，追踪用户在网站上的访问情况。\\n\\n这是我写的简单示例，提前先说明一下\\n\\n**解释**\\n\\n1. Cookies：用于持久化存储用户的访问次数。每次用户访问页面时，`visitCount` 值会增加。这个值存储在浏览器的 Cookies 中，最多保存 7 天。\\n2. 会话存储 (Session Storage)：用于存储用户的当前访问时间，只在当前会话中有效。每次刷新页面时，访问时间会更新并存储在会话存储中。\\n3. 页面加载时：在 `window.onload` 事件中，JavaScript 会获取当前的访问次数和时间，并更新页面内容。\\n\\n**运行示例**\\n\\n1. 每次用户访问页面时，`visitCount` 会增加，且在页面中显示用户的访问次数和上次访问时间。\\n2. 用户刷新页面时，会显示当前的访问时间（来自于会话存储），并且访问次数会保留在 Cookies 中。\\n\\n**结果**\\n\\n- 页面会显示用户的访问次数（通过 Cookie 跟踪）。\\n- 会话存储会显示用户的上次访问时间。\\n\\n这是代码部分\\n\\n`finger.vue`\\n\\n```vue\\n<template>\\n  <div>\\n    <h2>这是Cookies 和会话存储的例子</h2>\\n    <p id=\\\"visitor-info\\\"></p>\\n  </div>\\n</template>\\n<script setup lang=\\\"js\\\">\\nimport \'./tracking.js\';  \\n</script>\\n<style scoped></style>\\n```\\n\\n主要的js文件`tracking.js`\\n\\n```js\\n// 获取当前日期时间作为用户访问时间\\nfunction getCurrentTime() {\\n  const now = new Date();\\n  return now.toLocaleString();\\n}\\n\\n// 获取或设置 Cookies\\nfunction getCookie(name) {\\n  const value = `; ${document.cookie}`;\\n  const parts = value.split(`; ${name}=`);\\n  if (parts.length === 2) return parts.pop().split(\';\').shift();\\n}\\n\\n// 设置 Cookies\\nfunction setCookie(name, value, days) {\\n  const d = new Date();\\n  d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));\\n  const expires = `expires=${d.toUTCString()}`;\\n  document.cookie = `${name}=${value}; ${expires}; path=/`;\\n}\\n\\n// 设置会话存储\\nfunction setSessionStorage(key, value) {\\n  sessionStorage.setItem(key, value);\\n}\\n\\n// 页面加载时追踪用户信息\\nwindow.onload = function () {\\n  let visitCount = parseInt(getCookie(\'visitCount\')) || 0;\\n  visitCount += 1;\\n  setCookie(\'visitCount\', visitCount, 7);  // Cookie保存7天\\n\\n  // 设置当前访问时间到会话存储\\n  const visitTime = getCurrentTime();\\n  setSessionStorage(\'lastVisitTime\', visitTime);\\n\\n  // 显示用户访问信息\\n  const visitorInfo = document.getElementById(\'visitor-info\');\\n  visitorInfo.innerHTML = `\\n    <p>You have visited this site ${visitCount} time(s).</p>\\n    <p>Your last visit was at: ${sessionStorage.getItem(\'lastVisitTime\')}</p>\\n  `;\\n};\\n```\\n\\n运行结果\\n第一次访问时，中间显示 `You have visited this site 1 time(s).`访问了1次\\n\\n![5.1.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0073154ca5b8dd2da34a6058c8d3f0bf.jpg)\\n刷新页面有\\n\\n![5.2.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/4bc77c6a30a4d8c9a6d6a75f24c4dede.jpg)\\n## IP 地址追踪\\n\\n利用用户的 IP 地址进行地理位置的定位，以识别用户的来源。\\n\\n你可使用 [ipinfo.io](https://ipinfo.io/). 代码为\\n\\n```js\\n// 使用 ipinfo.io 获取用户的 IP 地址和位置信息\\nfunction getGeoLocation() {\\n  fetch(\'https://ipinfo.io/json?token=YOUR_ACCESS_TOKEN\') // 替换为你的 ipinfo.io API token\\n    .then(response => response.json())\\n    .then(data => {\\n      const location = data.city + \', \' + data.region + \', \' + data.country;\\n      const ip = data.ip;\\n      document.getElementById(\'location-info\').innerHTML = `\\n        您的 IP 地址是: ${ip}<br>\\n        您的地理位置是: ${location}\\n      `;\\n    })\\n    .catch(error => {\\n      console.error(\'获取位置时出错:\', error);\\n      document.getElementById(\'location-info\').innerHTML = \'无法获取位置信息。\';\\n    });\\n}\\n\\n// 页面加载时调用函数获取地理位置\\nwindow.onload = getGeoLocation;\\n```\\n\\n但是ipinfo.io有使用限制只能试用7天过后就要收费就很难受，所以我使用 **ip-api**  [ip-api 官网](http://ip-api.com)\\n\\nip-api也是有请求次数限制但是相比那个好的多\\n\\n> 免费版每天可以进行最多 **45,000 次** 请求，且每分钟最多进行 **150 次请求**。如果你超过这个限制，就需要等待重置，或者升级到付费版。\\n\\n`vue`文件\\n\\n```vue\\n<template>\\n  <div>\\n    <h2>这是Ip例子</h2>\\n    <p>IP 地址: {{ ip }}</p>\\n    <p>地理位置: {{ location }}</p>\\n  </div>\\n</template>\\n\\n<script setup lang=\\\"js\\\">\\nimport { ref } from \'vue\';\\n\\n// 定义响应式数据\\nconst ip = ref(\'\');\\nconst location = ref(\'\');\\n\\n// 导入 geo-location.js 文件\\nimport \'./geo-location.js\';\\n\\n// 使用 `window` 来访问 geo-location.js 中的全局变量或函数\\nwindow.updateGeoLocation = (newIp, newLocation) => {\\n  ip.value = newIp;\\n  location.value = newLocation;\\n};\\n</script>\\n\\n<style scoped></style>\\n```\\n\\n重要的`js`文件，`geo-location.js`\\n\\n```js\\n<template>\\n  <div>\\n    <h2>这是Ip例子</h2>\\n    <p>IP 地址: {{ ip }}</p>\\n    <p>地理位置: {{ location }}</p>\\n  </div>\\n</template>\\n\\n<script setup lang=\\\"js\\\">\\nimport { ref } from \'vue\';\\n\\n// 定义响应式数据\\nconst ip = ref(\'\');\\nconst location = ref(\'\');\\n\\n// 导入 geo-location.js 文件\\nimport \'./geo-location.js\';\\n\\n// 使用 `window` 来访问 geo-location.js 中的全局变量或函数\\nwindow.updateGeoLocation = (newIp, newLocation) => {\\n  ip.value = newIp;\\n  location.value = newLocation;\\n};\\n</script>\\n\\n<style scoped></style>\\n\\n```\\n\\n运行结果\\n\\n![6.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/a1cdc5eaedda0f8bec3951d663d575d0.jpg)\\n\\n\\n\\n## 不登录进行用户追踪分析\\n\\n### 不登录进行用户追踪的好处\\n\\n1. **隐私保护**：不登录可以保护用户的个人信息不被收集和滥用，尤其是在用户不愿意提供个人信息的情况下。\\n2. **匿名性**：用户可以在不透露个人身份的情况下浏览和使用网站或应用，这对于那些希望保持匿名的用户来说是非常重要的。\\n3. **便捷性**：用户不需要创建账户或记住密码，只需点击即可开始使用，这大大简化了用户的操作流程。\\n4. **减少摩擦**：对于一些用户来说，创建账户可能会感到繁琐，不登录可以减少这种摩擦，提高用户的满意度。\\n\\n### 不登录进行用户追踪的坏处\\n\\n1. **数据准确性**：由于无法获取用户的个人信息，追踪的数据可能不够准确，无法提供个性化的服务或内容。\\n2. **缺乏个性化**：不登录的用户无法享受到个性化的服务或内容，这可能会影响用户的体验和满意度。\\n3. **难以追踪用户行为**：不登录的用户行为难以追踪，这对于网站或应用的数据分析和优化来说是不利的。\\n4. **缺乏用户参与度**：不登录的用户可能不太愿意参与到网站或应用的社区中，这可能会影响用户的参与度和忠诚度。\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/e91387aad4cd7c347379ecdcc5946dd5.jpeg\",\"articleTitle\":\"用户追踪技术揭秘：如何追踪你的每个点击和行为\",\"categoryName\":\"安全\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"安全\",\"前端\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:37:17', NULL);
INSERT INTO `t_operation_log` VALUES (1707, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7f49c2918a4212f57d81a1f2655b4d99.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:38:48', NULL);
INSERT INTO `t_operation_log` VALUES (1708, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/dc17d5db846acc82b6d2c1eef6886223.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:38:53', NULL);
INSERT INTO `t_operation_log` VALUES (1709, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6f4e61db4887f24fc46630d9aa55cba7.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:39:46', NULL);
INSERT INTO `t_operation_log` VALUES (1710, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7ee679a6dea94655f7f20f4e2063bb4d.jpeg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:39:59', NULL);
INSERT INTO `t_operation_log` VALUES (1711, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7f85d434d1e04cea9b6c6025415e5d6d.jpeg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:40:17', NULL);
INSERT INTO `t_operation_log` VALUES (1712, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6d5e6f8ebf2708b6b9738648f48f00d7.jpeg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:40:32', NULL);
INSERT INTO `t_operation_log` VALUES (1713, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5a6f794c6c500c405b8425bb75c01777.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:40:49', NULL);
INSERT INTO `t_operation_log` VALUES (1714, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0a365372a0424a2ee12b76c569feafdb.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:41:05', NULL);
INSERT INTO `t_operation_log` VALUES (1715, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/985df8cefccbdbf47d6a798e3acc93cf.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:41:16', NULL);
INSERT INTO `t_operation_log` VALUES (1716, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3b2bce2574a075174bf50a4f55d1c4cd.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:41:34', NULL);
INSERT INTO `t_operation_log` VALUES (1717, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/234b8edbf6600d09b269ea6404825efc.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:41:42', NULL);
INSERT INTO `t_operation_log` VALUES (1718, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/4a5f762d46b4f7671a3993055dbc7658.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:41:51', NULL);
INSERT INTO `t_operation_log` VALUES (1719, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/aff28e916b6b70e394974e346b190312.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:42:28', NULL);
INSERT INTO `t_operation_log` VALUES (1720, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7ee679a6dea94655f7f20f4e2063bb4d.jpeg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:44:06', NULL);
INSERT INTO `t_operation_log` VALUES (1721, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"Web3是互联网的未来，它的核心思想是去中心化——不再由少数大公司控制数据和内容，而是通过区块链等技术让每个用户都能掌握自己的数据、身份和资产。在Web3的世界里，你不仅是内容的消费者，还是内容的创造者和拥有者。通过智能合约、加密货币和去中心化应用（DApps），Web3为我们带来了更加自由、透明和安全的网络体验。不再依赖传统的中介机构，用户的隐私和控制权将得到前所未有的提升，开启全新的互联网时代。\",\"articleContent\":\"# Web 3.0\\n\\n## 简单介绍\\n\\nWeb3，也被称为去中心化网络，是一个基于区块链技术的新一代互联网。它的核心理念是将权力和数据控制从少数大型公司手中交还给用户，通过去中心化的应用程序（DApps）直接进行交互和交易，无需依赖于中介或第三方服务\\n\\n![web3_info.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7f49c2918a4212f57d81a1f2655b4d99.png)\\nWeb3的实现依赖于几项关键技术，其中最重要的是区块链和智能合约。区块链是一种分布式账本技术，通过加密算法和共识机制确保数据的安全性和透明性。所有的交易和操作都被记录在链上，且无法被修改或删除，从而避免了数据造假或篡改的可能性。智能合约则是基于区块链自动执行的程序，能够根据预设条件执行任务，无需第三方干预\\n\\n![](./assets/sha256.jpg)![atlas.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/dc17d5db846acc82b6d2c1eef6886223.png)\\n\\nWeb3的应用场景涵盖了金融、社交、游戏等多个领域。例如，去中心化金融（DeFi）允许用户在没有银行或其他金融机构的情况下进行借贷、交易等操作；非同质化代币（NFT）则在数字艺术、游戏资产等领域提供了一种新的所有权和交易方式\\n\\n### 元宇宙\\n\\n#### 元宇宙概念比较\\n\\n- **数字孪生**：数字孪生是一种基于数字技术的概念，它是指对于现实世界中的物理实体或系统，通过数字化的方式建立一个虚拟的、与之相对应的数字化模型，从而实现对物理实体或系统的监测、仿真、预测和优化等操作。数字孪生通常包括两个部分：物理实体和数字化模型。物理实体可以是任何实际存在的事物，例如机器、设备、建筑、城市、生态系统等等。数字化模型则是基于物理实体的数据和信息进行建模，包括几何形状、结构、材料、运行状态、环境参数等等，可以对物理实体进行仿真、预测、优化等操作\\n\\n  ![digital_twin.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6f4e61db4887f24fc46630d9aa55cba7.jpg)\\n\\n- **元宇宙**：元宇宙是一个基于区块链、数字身份认证和智能合约等技术的虚拟空间，目的是在数字世界构建一个具有经济、社交和文化价值的生态系统。元宇宙不仅仅是一个虚拟环境，更是一个包含了现实世界和虚拟世界相互交织的综合生态系统。元宇宙的交互方式更加丰富多样，通常使用游戏手柄、键盘、鼠标等传统设备，还支持语音、触摸和动作识别等方式，让用户可以更加灵活地自由互动，并且强调不同虚拟平台之间的互通和互操作，形成一个统一的生态系统。元宇宙的核心概念是用户可自由交换，这就意味着数据和资源的所有者是社区中的所有人，它的环境也可以由社区成员自己构建设计，成为一个更加开放和互动的环境。元宇宙鼓励用户生成内容，用户可以在元宇宙中创造和交易虚拟物品，甚至构建自己的虚拟空间\\n\\n![metaverse.jpeg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7ee679a6dea94655f7f20f4e2063bb4d.jpeg)\\n- **web 3.0**：Web 3.0是下一代互联网的概念，它强调去中心化和用户控制，通过区块链、人工智能、物联网等技术，实现更加智能、安全和透明的网络环境。Web \\n  3.0的目标是建立一个更加开放、公平和可持续的互联网生态系统，让用户拥有更多的数据控制权和经济利益。Web 3.0的应用场景包括去中心化金融（DeFi）、非同质化代币（NFTs）、分布式存储、智能合约等\\n\\n![web3.jpeg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7f85d434d1e04cea9b6c6025415e5d6d.jpeg)\\n**数字孪生、元宇宙和Web 3.0**：都是基于数字化和网络化技术的概念，但它们的侧重点和应用场景有所不同。数字孪生主要关注物理实体的数字化建模和仿真，元宇宙则强调虚拟空间的构建和用户交互，而Web\\n3.0则侧重于去中心化和用户控制的网络环境。这些概念的发展和应用，都将对未来的社会、经济和技术产生深远的影响。\\n\\n### NFT\\n\\n#### 什么是NFT\\n\\nNFT，全称为Non-Fungible Token，中文翻译为***非同质化代币***，是一种基于区块链技术的数字资产，具有***唯一性和不可替代性***。NFT可以代表任何形式的数字或实体资产，如艺术品、音乐、视频、游戏道具、域名等。\\n\\nNFT的核心特点是其唯一性和不可替代性。每个NFT都有一个唯一的标识符，这意味着它们不能被复制或替换。这使得NFT成为了一种独特的数字资产，可以用于证明数字资产的所有权和真实性。\\n\\nNFT的另一个重要特点是其可追溯性。由于NFT是基于区块链技术的，因此它们的交易记录可以被公开验证和追溯。这使得NFT成为了一种安全可靠的数字资产，可以用于证明数字资产的来源和历史。\\n\\nNFT的应用场景非常广泛，包括数字艺术品、音乐、视频、游戏道具、域名等。NFT的出现为数字资产的交易和管理提供了一种新的解决方案，同时也为数字资产的保护和传承提供了一种新的方式。\\n\\n![nft_art.jpeg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6d5e6f8ebf2708b6b9738648f48f00d7.jpeg)\\n## 区块链\\n\\n### 了解区块链\\n\\n区块链是一种去中心化的分布式账本技术，它通过密码学方法保证数据传输和访问的安全，通过共识算法保证系统内数据的一致性，通过智能合约实现可编程的自动化交易和执行\\n\\n区块链的核心原理包括以下几个方面：\\n\\n1. **去中心化**：区块链没有中央控制点，所有节点都参与数据的验证和记录，确保数据的安全性和可靠性。\\n2. **分布式账本**：区块链是一个分布式的数据库，所有节点都保存着完整的账本副本，确保数据的一致性和不可篡改性。\\n3. **共识机制**：区块链通过共识算法，如工作量证明（PoW）、权益证明（PoS）等，确保所有节点对交易的一致性认可。\\n4. **加密技术**：区块链使用加密技术，如哈希函数、公钥加密等，确保数据的安全性和隐私性。\\n5. **智能合约**：区块链支持智能合约，可以自动执行预先设定的规则和条件，实现自动化的交易和执行。\\n\\n区块链的主要特征包括：\\n\\n1. **去中心化**：区块链没有中央控制点，所有节点都参与数据的验证和记录，确保数据的安全性和可靠性。\\n2. **透明性**：区块链中的交易数据对所有节点都是公开的，这使得交易过程更加透明和公正。\\n3. **不可篡改性**：一旦数据被记录在区块链上，就很难被篡改，因为每个区块都包含了前一个区块的哈希值，形成了一个不可篡改的链条。\\n4. **匿名性**：区块链中的交易可以匿名进行，保护了用户的隐私权。\\n5. **安全性**：区块链使用了密码学技术保证数据的安全性和完整性，使得数据难以被篡改或攻击。\\n\\n区块链的应用非常广泛，包括但不限于以下几个领域：\\n\\n1. **金融领域**：区块链可以用于实现去中心化的交易、清算和结算，提高了交易效率，降低了交易成本。\\n2. **供应链管理**：区块链可以提供透明的供应链信息，使得供应商、制造商、物流公司等可以更好地协同工作，提高了供应链的效率和透明度。\\n3. **医疗保健**：区块链可以保证医疗数据的不可篡改性和安全性，使得患者和医生可以更好地共享和利用医疗信息。\\n4. **公共服务**：区块链可以提高公共服务的透明度和效率，如身份认证、学历认证等。\\n5. **物联网**：区块链可以用于实现物联网设备的去中心化管理和安全通信。\\n\\n### 共识机制\\n\\nPOW(工作量证明机制)、POS(权益证明机制)、POA(权威证明机制)、POC(容量证明机制)、CPOC(有条件的容量证明机制)\\n\\n### 实例项目\\n\\n[github项目](https:\\\\\\\\github.com\\\\anders94\\\\blockchain-demo)\\n\\n区块：\\n\\n区块的组成\\n\\n1. **区块头**：包含了前一个区块的哈希值、本区块的时间戳以及其他元数据。\\n2. **区块体**：包含了实际的交易数据。\\n\\n区块的作用\\n\\n1. **记录交易信息**：每个区块都记录了一段时间内的交易信息。\\n2. **链接到前一个区块**：通过哈希值链接到前一个区块，形成了区块链的链式结构。\\n3. **保证数据的不可篡改性**：这种结构保证了区块链数据的不可篡改性和安全性\\n\\n![bcd1.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5a6f794c6c500c405b8425bb75c01777.jpg)\\n一个hash对应一个信息，当数据改变时区块的hash就不能对应原数据而爆红，可通过挖矿结局\\n\\n![bcd2.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0a365372a0424a2ee12b76c569feafdb.jpg)\\n![bcd3.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/985df8cefccbdbf47d6a798e3acc93cf.jpg)\\n区块链亦是如此，一个节点出问题就要一直挖\\n\\n![bcd4.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3b2bce2574a075174bf50a4f55d1c4cd.jpg)\\n![bcd5.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/234b8edbf6600d09b269ea6404825efc.jpg)\\n![bcd6.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/4a5f762d46b4f7671a3993055dbc7658.jpg)\\n## 比特币\\n\\n比特币是一种去中心化的数字货币，它基于区块链技术，由中本聪在2008年提出，并于2009年开始运作。比特币的交易记录公开透明，通过点对点的传输实现去中心化的支付系统。比特币不依靠特定货币机构发行，而是通过特定算法，利用大量的计算产生。比特币经济使用整个P2P网络中众多节点构成的分布式数据库来确认并记录所有的交易行为，并使用密码学的设计来确保货币流通各个环节的安全性。比特币的总数量有限，最初设定为2100万个，之后的总数量将被永久限制在这个数量。\\n\\n[官网](https:\\\\\\\\bitcoin.org\\\\en\\\\)  [交易平台](https:\\\\\\\\blockchain.com\\\\en\\\\)\\n\\n## 以太坊\\n\\n以太坊是一个开源的区块链平台，由Vitalik Buterin等人于2015年推出。它不仅是一种加密货币，更是一个支持去中心化应用（dApps）和智能合约的平台。以太坊的核心组件包括以太币（Ether,ETH）、智能合约、去中心化应用（dApps）、以太坊虚拟机（EVM）\\n\\n相关网站：[OpenSea](https://opensea.io/) [Botto](https://botto.com/)\\n\\n## 钱包\\n\\n### 热钱包（HotWallet）\\n\\n热钱包是指与互联网直接连接的钱包。因为随时连接网络，所以它们可以即时进行交易，方便用户快速访问和管理资金。这种钱包通常用于日常的交易和支付，因为它们便于快速转账。常见的热钱包包括：\\n\\n- **Web 钱包**：例如 MetaMask、Coinbase Wallet，它们可以通过浏览器扩展或 Dapp 应用程序与区块链进行互动。\\n- **移动和桌面钱包**：例如 Trust Wallet、Exodus，这类钱包可以直接在手机或电脑上使用，并随时可以连接到互联网。\\n\\n**优点**：\\n\\n- **便利性**：可以随时访问，适合频繁交易的用户。\\n- **集成性**：通常支持与去中心化应用（Dapps）和其他区块链服务的集成。\\n\\n**缺点**：\\n\\n- **安全性较低**：因为始终连接网络，所以容易受到黑客攻击，存在更高的风险。\\n\\n### 冷钱包（ColdWallet）\\n\\n冷钱包指的是不直接连接互联网的钱包，用于长期和大额的加密货币存储。冷钱包一般是离线存储，可以是硬件设备，也可以是纸质钱包等离线形式。常见的冷钱包包括：\\n\\n- **硬件钱包**：例如 Ledger、Trezor，它们是一种USB设备，可以在交易时连接到电脑，平时离线保存。\\n- **纸钱包**：将私钥或助记词写在纸上，作为物理备份，但管理不便。\\n\\n**优点**：\\n\\n- **安全性高**：因为离线存储，不易受到网络攻击，适合储存较大金额的加密资产。\\n- **风险分散**：通过隔离网络连接，降低了被盗风险。\\n\\n**缺点**：\\n\\n- **不便于交易**：使用过程较复杂，不适合频繁交易。\\n- **物理风险**：丢失或损坏纸质冷钱包或硬件设备可能导致资产永久丢失。\\n\\n## 智能合约\\n\\n智能合约是一种旨在以信息化方式传播、验证或执行合同的计算机协议。它允许在没有第三方的情况下进行可信交易，这些交易可追踪且不可逆转。智能合约的概念由尼克·萨博（Nick Szabo）在1994年首次提出\\n\\n## 附录\\n\\n### SHA256加密算法\\n\\n#### SHA256 哈希算法概述\\n\\nSHA256（Secure Hash Algorithm 256-bit）是一种广泛使用的密码学哈希函数，它能够将任意长度的输入数据转换为固定长度的输出，通常为256位的哈希值。这种哈希函数的设计旨在提供高度的安全性，特别是在数字签名、数据完整性验证和密码存储等领域。\\n\\n#### SHA256 哈希算法的特点\\n\\nSHA256算法具有以下几个关键特点：\\n\\n1. **抗碰撞性**：SHA256算法具有很强的抗碰撞性，即很难找到两个不同的输入数据，它们的哈希值相同。这意味着即使攻击者知道哈希值，也很难找到对应的原始数据。\\n2. **不可逆性**：SHA256算法是单向的，即无法从哈希值反推出原始数据。这使得哈希值可以安全地用于验证数据的完整性，而不必担心数据被泄露。\\n3. **固定长度输出**：SHA256算法总是输出固定长度的哈希值，这使得它易于在不同的应用场景中使用，并且可以方便地进行比较和验证。\\n4. **高效性**：SHA256算法的计算速度快，适合处理大量数据。这使得它在需要快速验证数据完整性的场景中非常有用。\\n\\n#### SHA256 哈希算法的应用\\n\\nSHA256算法在多个领域都有广泛的应用，包括但不限于：\\n\\n- **数字签名**：SHA256算法常用于生成数字签名，以确保数据的来源和完整性。\\n- **数据完整性验证**：在数据传输或存储过程中，SHA256算法可以用于验证数据是否被篡改。\\n- **密码存储**：在存储用户密码时，通常不会直接存储明文密码，而是存储密码的SHA256哈希值。这样即使数据库被泄露，攻击者也无法直接获取用户的密码。\\n- **区块链**：SHA256算法是比特币等加密货币中用于工作量证明（Proof-of-Work）机制的核心算法之一。\\n\\n#### SHA256 哈希算法的实现\\n\\nSHA256算法的实现通常涉及以下几个步骤：\\n\\n1. **预处理**：将输入数据填充到512位的块中，并添加一个64位的长度字段。\\n\\n2. **初始化哈希值**：定义一个256位的初始哈希值，称为“工作变量”。\\n\\n3. 处理每个块\\n\\n   ：将数据块分成512位的块，并对每个块进行以下步骤： \\n\\n   - 定义四个32位的初始值，称为“圆周率”。\\n   - 消息扩展：将512位的数据块扩展为1600位的消息扩展。\\n   - 压缩函数：使用压缩函数对消息扩展和初始值进行64轮迭代，生成新的哈希值。\\n\\n4. **输出**：将最终哈希值输出为256位的散列值。\\n\\n#### SHA256 哈希算法的安全性\\n\\nSHA256算法自2001年发布以来，一直被认为是安全的，并且没有已知的有效碰撞攻击。然而，随着计算能力的不断提升，未来可能会出现新的攻击方法。因此，定期评估和更新使用的哈希算法是非常重要的。\\n![sha256.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/aff28e916b6b70e394974e346b190312.jpg)\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/7ee679a6dea94655f7f20f4e2063bb4d.jpeg\",\"articleTitle\":\"Web3基础概念：走向去中心化的未来\",\"categoryName\":\"web3\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"web3\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:44:17', NULL);
INSERT INTO `t_operation_log` VALUES (1722, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/e660b25578cfd437c8d1db95a4521b90.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:51:20', NULL);
INSERT INTO `t_operation_log` VALUES (1723, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"Git 是一种分布式版本控制系统，用于跟踪文件的变更并协作开发。它可以帮助开发者管理代码历史，记录每次修改的差异，并允许多个开发者并行工作而不冲突。与传统的版本控制系统不同，Git 允许每个开发者都拥有项目的完整本地副本，从而提高了工作效率和容错能力。通过 Git，开发者可以轻松地查看、比较和恢复代码的不同版本，进行分支操作以实现并行开发，最终通过合并（merge）将工作整合。它是现代软件开发中不可或缺的工具，尤其在开源项目和团队合作中发挥着重要作用。\",\"articleContent\":\" \\n\\n# 1、认识git\\n\\n------\\n\\n​        Git是一个开源的分布式版本控制系统，用于高效地处理从小型到大型的项目版本管理。它最初由Linux操作系统内核的创造者Linus Torvalds在2005年开发。Git的设计注重性能、安全性和灵活性，允许开发者在本地提交更改，并通过克隆整个仓库来在本地机器上保持项目的完整历史记录。Git的核心优势在于其分布式架构，这意味着每个开发者的工作副本都是一个完整的存储库，包含了所有变更的完整历史记录.\\n\\n[Git官网](https://git-scm.com/)\\n\\n------\\n\\n# 2、git功能\\n\\n## 2.1、功能\\n\\n------\\n\\n1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。\\n\\n2、在自己的机器上根据不同的开发目的，创建分支，修改代码。\\n\\n3、在单机上自己创建的分支上提交代码。\\n\\n4、在单机上合并分支。\\n\\n5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。\\n\\n6、生成补丁（patch），把补丁发送给主开发者。\\n\\n7、看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。\\n\\n8、一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。\\n\\n从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能：\\n\\n1、查看邮件或者通过其它方式查看一般开发者的提交状态。\\n\\n2、打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是[开源项目](https://baike.baidu.com/item/开源项目/3406069?fromModule=lemma_inlink)，还要决定哪些补丁有用，哪些不用）。\\n\\n3、向公共服务器提交结果，然后通知所有开发人员。\\n\\n## 2.2、优缺点\\n\\n优点：\\n\\n适合[分布式开发](https://baike.baidu.com/item/分布式开发/4143301?fromModule=lemma_inlink)，强调个体。\\n\\n公共服务器压力和数据量都不会太大。\\n\\n速度快、灵活。\\n\\n任意两个开发者之间可以很容易的解决冲突。\\n\\n离线工作。\\n\\n缺点：\\n\\n资料少（起码中文资料很少）。\\n\\n学习周期相对而言比较长。\\n\\n不符合[常规思维](https://baike.baidu.com/item/常规思维/9532113?fromModule=lemma_inlink)。\\n\\n代码[保密性](https://baike.baidu.com/item/保密性/4928247?fromModule=lemma_inlink)差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。\\n\\n------\\n\\n# 3、基础操作\\n\\n## 3.1、配置git\\n\\n------\\n\\n​        在使用Git之前，通常需要进行一些基本配置。通常包括设置用户名和电子邮件地址：\\n\\n```bash\\ngit config --global user.name \\\"Your Name\\\"\\ngit config --global user.email \\\"your_email@example.com\\\"\\n```\\n\\n\\n## 3.2、创建git仓库\\n\\n> 下载并配置完成Git后会有相应的Bash\\n>\\n> [鼠标右击] => [显示更多选项] => [Git Bash Here]\\n>\\n\\n### **3.2.1、初始化新仓库**\\n\\n------\\n\\n​        在项目目录下执行 `git init` 命令来初始化一个新的Git仓库。\\n\\n```bash\\ngit init\\n```\\n\\n\\n​        使用init创建出仓库后文件夹会创建出.git文件夹【默认是隐藏的需打开文件夹的\\n\\n[查看]=>[显示]=>[隐藏的项目]】，并且默认分支为master。\\n\\n------\\n\\n### **3.2.2、克隆现有仓库**\\n\\n------\\n\\n​         使用 `git clone [repository URL]` 命令来克隆一个远程仓库到本地。\\n\\n```bash\\ngit clone [repository URL]\\n```\\n\\n 例如：\\n\\n```bash\\ngit clone https://github.com/heyqing/git.git\\n\\n# 或者使用 SSH 地址：\\ngit clone git@github.com:heyqing/git.git\\n```\\n\\n## 3.3、文件操作\\n\\n### **3.3.1、查看文件状态**\\n\\n------\\n\\n​        使用 `git status` 命令来查看当前文件的状态，包括新增、修改、删除等。\\n\\n```bash\\ngit status\\n```\\n\\n### **3.3.2、跟踪新文件**\\n\\n------\\n\\n​        使用 `git add [filename]` 命令来跟踪新文件或已修改的文件。\\n\\n```bash\\ngit add [filename]\\n```\\n\\n### **3.3.3、提交更新**\\n\\n------\\n\\n​        使用 `git commit -m \\\"Commit message\\\"` 命令来提交已跟踪的文件到本地仓库。\\n\\n```bash\\ngit commit -m \\\"Commit message\\\"\\n```\\n\\n------\\n\\n>\\n> ​         文件夹中想创建一个文本，直接查看状态为提示需要 add 的有README.md ，使用 add 添加过后再次查看提示可以提交的有README.md，commit 提交过后提示无可commit文件。\\n\\n## 3.4、查看提交历史\\n\\n------\\n\\n​        使用 `git log` 命令来查看提交历史记录。\\n\\n```bash\\ngit log\\n```\\n\\n\\n​        显示commit的id，提交的分支，提交的作者信息，时间，提交的信息\\n\\n------\\n\\n## 3.5、远程仓库操作\\n\\n> ​        Git 远程仓库是指托管在因特网或其他网络中的你的项目的版本库。它允许你与其他开发者协作开发和共享代码，也可以作为你的代码的备份和发布的平台。你可以有多个远程仓库，有些是只读的，有些是可读写的。\\n>\\n> Git 远程仓库的主要作用包括：\\n>\\n> 1. **分享和协作**：你可以将你的代码推送到远程仓库，让其他人能够看到你的工作，或者邀请其他人参与你的项目。你也可以从远程仓库拉取或合并其他人的修改，实现代码的同步和协作。\\n> 2. **备份和恢复**：你可以将你的代码存储在远程仓库，作为你本地仓库的一个备份。这样，即使你的本地仓库丢失或损坏，你也可以从远程仓库恢复你的代码。\\n> 3. **分支和标签**：你可以在远程仓库创建和管理分支和标签，用来表示你的项目的不同阶段或功能。你可以在不同的分支上进行并行的开发，或者在不同的标签上进行版本的发布。\\n> 4. **审查和质量**：你可以在远程仓库进行代码的审查和质量检查，用来保证你的代码的质量和风格。你可以使用远程仓库的一些功能，如pull request，code review，issue，merge request等，来进行代码的评审和反馈。\\n>\\n> 常见的远程仓库有：\\n>\\n> [Github](https://github.com/):被称为世界最大的代码托管平台\\n>\\n> [Gitee](https://gitee.com/):提供中国本土化的代码托管服务\\n\\n### **3.5.1、查看远程仓库**\\n\\n------\\n\\n​        使用 `git remote -v` 命令来查看已配置的远程仓库。\\n\\n```bash\\ngit remote -v\\n\\n```\\n\\n### **3.5.2、添加远程仓库**\\n\\n------\\n\\n​        使用 `git remote add [remote name] [repository URL]` 命令来添加一个新的远程仓库。\\n\\n```bash\\ngit remote add [remote name] [repository URL]\\n\\n```\\n\\n### 3.5.3、**从远程仓库获取数据**\\n\\n------\\n\\n​        使用 `git fetch [remote name]` 命令从远程仓库获取最新数据。\\n\\n```bash\\ngit fetch [remote name]\\n\\n```\\n\\n### **3.5.4、推送数据到远程仓库**\\n\\n------\\n\\n​        使用 `git push [remote name] [branch name]` 命令推送本地分支到远程仓库。\\n\\n```bash\\ngit push [remote name] [branch name]\\n\\n```\\n\\n------\\n\\n## 3.6、分支管理\\n\\n### **3.6.1、创建分支**\\n\\n------\\n\\n​        使用 `git branch [branch name]` 命令创建一个新分支。\\n\\n```bash\\ngit branch [branch name]\\n\\n```\\n\\n### 3.6.2、 **切换分支**\\n\\n------\\n\\n​        使用 `git checkout [branch name]` 命令切换到指定分支。\\n\\n```bash\\ngit checkout [branch name]\\n\\n```\\n\\n### 3.6.3、**合并分支**\\n\\n------\\n\\n​        使用 `git merge [branch name]` 命令合并指定分支到当前分支。\\n\\n```bash\\ngit merge [branch name]\\n\\n```\\n\\n------\\n\\n>\\n> ​        创建和切换可合并为:\\n>\\n> ```bash\\n> git checkout -b [branch name]\\n> \\n> ```\\n>\\n>\\n> ​        谁需要合并谁，在谁那使用，如这里 master 需要合并 br ，则需要在 master 下使用 merge\\n\\n## 3.7、标签管理\\n\\n> ​        Git标签（Tag）是Git版本库的一个标记，用来指向某个特定的提交（Commit）。它类似于书签，可以帮助你快速定位到项目的关键版本或里程碑。Git标签主要分为两种类型：轻量级标签（Lightweight Tag）和附注标签（Annotated Tag）。轻量级标签仅仅是一个引用，指向特定的提交，而附注标签则是一个完整的Git对象，包含作者信息、标签信息、日期等，并且可以被签名和验证。\\n>\\n> Git标签的用途主要包括：\\n>\\n> 1. **版本管理**：通过为每个发布的版本打上标签，可以清晰地追踪项目的历史版本。\\n> 2. **快速定位**：使用标签可以快速检查或恢复到特定的版本，而无需查找复杂的提交哈希值。\\n> 3. **发布管理**：在软件发布时，通常会创建一个新的标签，以便于识别和分发特定的版本。\\n> 4. **协作沟通**：在团队合作中，标签可以作为讨论和参照的基准，帮助团队成员理解项目的状态和进展。\\n\\n### **3.7.1、创建标签**\\n\\n​        使用 `git tag [tag name]` 命令创建一个新的标签。\\n\\n```bash\\ngit tag [tag name]\\n\\n```\\n\\n### **3.7.2、查看标签**\\n\\n​        使用 `git tag` 命令查看所有标签。\\n\\n```bash\\ngit tag\\n\\n```\\n\\n\\n## 3.8、撤销操作\\n\\n### **3.8.1、撤销提交**\\n\\n------\\n\\n​        使用 `git reset HEAD~` 命令撤销最近一次提交。\\n\\n```bash\\ngit reset HEAD~\\n\\n```\\n\\n### **3.8.2、撤销对文件的修改**\\n\\n------\\n\\n​        使用 `git checkout -- [filename]` 命令撤销对文件的修改。\\n\\n```bash\\ngit checkout -- [filename]\\n\\n```\\n\\n# 4、完！\\n\\n\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/e660b25578cfd437c8d1db95a4521b90.png\",\"articleTitle\":\"Git版本控制\",\"categoryName\":\"基础\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"git\",\"基础\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:51:25', NULL);
INSERT INTO `t_operation_log` VALUES (1724, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/67f2c1aa268e1e99c907c0410b2d10a7.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:55:10', NULL);
INSERT INTO `t_operation_log` VALUES (1725, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/76958463afef76796d4ef612385f73fb.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:55:35', NULL);
INSERT INTO `t_operation_log` VALUES (1726, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6fe3dadf31572b61334b9d6fc4c72ef5.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:55:52', NULL);
INSERT INTO `t_operation_log` VALUES (1727, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/106f1c00c17ac23099a5ccd001ec3498.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:58:05', NULL);
INSERT INTO `t_operation_log` VALUES (1728, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6ad7440070b074ad1b3d59c083731a40.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:58:20', NULL);
INSERT INTO `t_operation_log` VALUES (1729, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5075af5b78148066ebcb49c35f5bdb4a.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:58:41', NULL);
INSERT INTO `t_operation_log` VALUES (1730, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ef0b396c749c36e9b97124a8f16c2f2f.jpeg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:59:12', NULL);
INSERT INTO `t_operation_log` VALUES (1731, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/9e78c3e9e31ebacb6b4a1f8213669fed.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 11:59:21', NULL);
INSERT INTO `t_operation_log` VALUES (1732, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/67f2c1aa268e1e99c907c0410b2d10a7.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:01:06', NULL);
INSERT INTO `t_operation_log` VALUES (1733, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"Docker 是一个开源的应用容器化平台，它允许开发者将应用及其依赖项打包成一个可移植的容器，然后在任何支持 Docker 的环境中运行。通过 Docker，开发者可以轻松地在不同系统和环境中创建、部署和管理应用，而无需担心配置差异。Docker 的核心优势在于其轻量级、快速启动和一致的运行环境。通过 Docker 容器，应用可以在开发、测试、生产等环境中无缝迁移，减少了“在我电脑上能跑”的问题。本文将带你从 Docker 的安装开始，逐步掌握如何使用 Docker 容器化你的应用，提升开发与部署效率。\",\"articleContent\":\"# 1、Docker是什么？\\n\\n![1.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/67f2c1aa268e1e99c907c0410b2d10a7.png)\\n\\nDocker是一个开源的应用容器引擎，它允许开发者将他们的应用及其依赖包打包到一个可移植的容器中。这些容器可以在任何支持Docker的Linux或Windows机器上运行，无需担心环境差异。Docker容器是完全使用沙箱机制，相互之间不会有任何接口，从而保证了应用的独立性和安全性。\\n\\nDocker的主要组成部分包括：\\n\\n```\\nDocker Client：用于与Docker守护进程通信的客户端。\\n\\nDocker Daemon：作为服务端接受客户端的命令，管理镜像、容器、容器网络、数据卷等。\\n\\nDocker Image：用于创建Docker容器的模板，通常通过Dockerfile文件定义。\\n\\nDocker Container：镜像运行的实例，即容器本身。\\n\\nDocker Registry：用于存储和管理镜像的仓库，可以是公共的也可以是私有的。\\n```\\n\\nDocker的优势在于它提供了一种标准化的方式来打包、分发和运行应用，简化了软件的集成和交付过程，使得开发、测试和生产环境更加一致。此外，Docker容器相比传统虚拟机具有更轻量级、更快启动和更高效资源利用率的特点\\n\\n\\n\\n# 2、安装Docker\\n\\n清除原有的docker，如果你的操作系统没有安装过Docker , 就不需要执行卸载命令。\\n\\n```bash\\nyum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine\\n```\\n\\n安装依赖包\\n\\n```bash\\nyum install -y yum-utils\\n```\\n\\n建立Docker仓库 (映射仓库地址)\\n\\n```bash\\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\\n```\\n\\n安装Docker引擎\\n\\n```bash\\nyum install docker-ce docker-ce-cli containerd.io\\n```\\n\\n启动docker\\n\\n```bash\\nsystemctl start docker\\nsystemctl enable docker\\n```\\n\\n查看版本-验证是否安装成功\\n\\n```bash\\ndocker version\\n```\\n\\n# 3、配置阿里云镜像加速\\n\\n阿里云官网地址: [www.aliyun.com](https://www.aliyun.com/)\\n\\n登录后点击：[控制台] => 搜索[容器镜像服务]\\n![2.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/76958463afef76796d4ef612385f73fb.png)\\n![3.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6fe3dadf31572b61334b9d6fc4c72ef5.png)\\n\\n如果镜像源无法使用（报错超时的可使用这些试试）\\n```bash\\n{\\n  \\\"registry-mirrors\\\": [\\n    \\\"https://docker.registry.cyou\\\",\\n    \\\"https://docker-cf.registry.cyou\\\",\\n    \\\"https://dockercf.jsdelivr.fyi\\\",\\n    \\\"https://docker.jsdelivr.fyi\\\",\\n    \\\"https://dockertest.jsdelivr.fyi\\\",\\n    \\\"https://mirror.aliyuncs.com\\\",\\n    \\\"https://dockerproxy.com\\\",\\n    \\\"https://mirror.baidubce.com\\\",\\n    \\\"https://docker.m.daocloud.io\\\",\\n    \\\"https://docker.nju.edu.cn\\\",\\n    \\\"https://docker.mirrors.sjtug.sjtu.edu.cn\\\",\\n    \\\"https://docker.mirrors.ustc.edu.cn\\\",\\n    \\\"https://mirror.iscas.ac.cn\\\",\\n    \\\"https://docker.rainbond.cc\\\"\\n  ]\\n}\\n\\n````\\n\\n\\n\\n```bash\\n#创建docker目录\\nsudo mkdir -p /etc/docker\\n#配置阿里云镜像加速\\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\\n{\\n  \\\"registry-mirrors\\\": [\\\"https://XXXX.mirror.aliyuncs.com\\\"]\\n}\\nEOF\\n#重启docker\\nsudo systemctl daemon-reload\\nsudo systemctl restart docker\\n```\\n\\n检查\\n\\n```bash\\n#1、\\ncat  /etc/docker/daemon.json\\n\\n```\\n\\n结果出现：\\n\\n```bash\\n[root@localhost ~]# cat  /etc/docker/daemon.json\\n{\\n  \\\"registry-mirrors\\\": [\\\"https://XXXX.mirror.aliyuncs.com\\\"]\\n}\\n\\n```\\n\\n```bash\\n#2、\\ndocker info\\n\\n```\\n\\n结果出现：\\n\\n![4.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/106f1c00c17ac23099a5ccd001ec3498.png)\\n# 4、主要组件\\n\\n- **Docker镜像（Image）**：镜像是一个只读模板，包含了应用程序及其运行环境的所有必要信息。它类似于虚拟机的磁盘映像，但更小且更高效。\\n![5.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6ad7440070b074ad1b3d59c083731a40.png)\\n\\n- **Docker容器（Container）**：容器是镜像的运行实例。它们包含了应用程序及其运行环境，并且可以被启动、停止、重启、删除等。容器之间是相互隔离的，每个容器都有自己的文件系统、网络配置和资源分配。\\n- **Docker宿主机（Host）**：安装了Docker引擎的机器，容器在宿主机上运行。\\n- **Docker客户端（Client）**：用于与Docker守护进程通信的工具，可以通过命令行界面或API与Docker引擎交互。\\n\\n![6.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5075af5b78148066ebcb49c35f5bdb4a.png)\\n- **Docker仓库（Registry）**：用于存储和分发Docker镜像的服务。Docker Hub是最常用的公共仓库，用户可以从中拉取（pull）或推送（push）镜像。\\n\\n# 5、常用命令\\n\\n```bash\\nsystemctl start docker\\t#启动docker\\nsystemctl stop docker\\t#关闭docker\\nsystemctl restart docker\\t#重启docker\\nsystemctl enable docker\\t\\t#docker设置随服务启动而自启动\\nsystemctl status docker\\t\\t#查看docker 运行状态 active为运行\\n#查看docker 版本号信息\\ndocker version\\t\\t\\t\\t\\ndocker info\\t\\n\\ndocker --help\\t\\t\\t\\t#docker 帮助命令\\n#拉取镜像 不加tag(版本号) 即拉取docker仓库中 该镜像的最新版本latest 加:tag 则是拉取指定版本\\ndocker pull 镜像名 \\ndocker pull 镜像名:tag\\n\\ndocker images\\t\\t\\t\\t#查看自己服务器中docker 镜像列表\\n#搜索镜像\\ndocker search 镜像名\\ndocker search --filter=STARS=9000 mysql 搜索 STARS >9000的 mysql 镜像\\n\\n#运行镜像\\ndocker run 镜像名\\ndocker run 镜像名:Tag\\n\\n#删除一个\\ndocker rmi -f 镜像名/镜像ID\\n\\n#删除多个 其镜像ID或镜像用用空格隔开即可 \\ndocker rmi -f 镜像名/镜像ID 镜像名/镜像ID 镜像名/镜像ID\\n\\n#删除全部镜像  -a 意思为显示全部, -q 意思为只显示ID\\ndocker rmi -f $(docker images -aq)\\n\\n#强制删除镜像\\ndocker image rm 镜像名称/镜像ID\\n\\n#保存镜像\\ndocker save 镜像名/镜像ID -o 镜像保存在哪个位置与名字\\n\\n#加载镜像\\ndocker load -i 镜像保存文件位置\\n\\n#镜像标签\\napp:1.0.0 基础镜像\\n# 分离为开发环境\\napp:develop-1.0.0   \\n# 分离为alpha环境\\napp:alpha-1.0.0   \\n\\ndocker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\\n\\ndocker tag 源镜像名:TAG 想要生成新的镜像名:新的TAG\\n\\n# 如果省略TAG 则会为镜像默认打上latest TAG\\ndocker tag aaa bbb\\n# 上方操作等于 docker tag aaa:latest bbb:test\\n\\ndocker ps\\t\\t\\t\\t#查看正在运行容器列表\\ndocker ps -a\\t\\t\\t#查看所有容器\\n# -it 表示 与容器进行交互式启动  /bin/bash  交互路径\\ndocker run -it -d --name 要取的别名 镜像名:Tag /bin/bash #运行一个容器\\n\\n# netstat是控制台命令,是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息\\nnetstat -untlp\\n\\n#进入容器\\ndocker exec -it 容器名/容器ID /bin/bash\\ndocker attach 容器名/容器ID\\n\\n#退出容器\\n#-----直接退出  未添加 -d(持久化运行容器) 时 执行此参数 容器会被关闭  \\nexit\\n# 优雅退出 --- 无论是否添加-d 参数 执行此命令容器都不会被关闭\\nCtrl + p + q\\n\\ndocker stop 容器ID/容器名\\t\\t#停止容器\\ndocker restart 容器ID/容器名\\t\\t#重启容器\\ndocker start 容器ID/容器名\\t\\t#启动容器\\ndocker kill 容器ID/容器名\\t\\t#删除容器\\n\\n#容器文件拷贝 —无论容器是否开启 都可以进行拷贝\\n#docker cp 容器ID/名称:文件路径 要拷贝到外部的路径| 要拷贝到外部的路径 容器ID/名称:文件路径\\n#从容器内 拷出\\ndocker cp 容器ID/名称: 容器内路径  容器外路径\\n#从外部 拷贝文件到容器内\\ndocker  cp 容器外路径 容器ID/名称: 容器内路径\\n\\ndocker logs -f --tail=要查看末尾多少行 默认all 容器ID\\t#查看容器日志\\n\\n\\n```\\n\\n`-d`:后台运行\\n\\n`--name`: 容器名\\n\\n`-p`: 端口映射\\n\\n`-e`: 环境变量 Key:Value\\n\\n`-v`: 数据卷参数 Volume:Contents\\n\\n# 6、Docker数据卷\\n\\nDocker 数据卷是一种轻量级的、持久化的存储方式，用于存储容器的数据。数据卷的生命周期独立于容器，即使容器被删除，数据卷中的数据也不会丢失。数据卷可以被多个容器挂载，实现数据的共享，也方便进行数据的备份、恢复和迁移。\\n\\n## 6.1、数据卷的类型\\n\\n1. **卷 (Volume)**：这是 Docker 管理的宿主机文件系统的一部分，通常位于 `/var/lib/docker/volumes` 目录下。卷是最常用的数据卷类型，它们是 Docker 管理的，并且可以跨容器共享。\\n2. **绑定挂载 (Bind Mounts)**：这种方式允许将宿主机的任意目录或文件挂载到容器中。绑定挂载是非持久化的，因为它们依赖于宿主机的文件系统。\\n3. **tmpfs 挂载 (Tmpfs Mounts)**：这种方式将数据挂载到宿主机的内存中，不会写入宿主机的文件系统。容器关闭后，数据会丢失。\\n\\n## 6.2、数据卷的使用\\n\\n### 6.2.1、 创建数据卷\\n\\n可以使用 `docker volume create` 命令来创建一个新的数据卷。例如：\\n\\n```bash\\ndocker volume create my-volume\\n\\n```\\n\\n### 6.2.2、挂载数据卷到容器\\n\\n可以在运行容器时使用 `-v` 或 `--mount` 标志来挂载数据卷。例如：\\n\\n```bash\\ndocker run -d -v my-volume:/path/to/container/dir my-image\\n\\n```\\n\\n或者\\n\\n```bash\\ndocker run --mount type=bind,source=/host/path,target=/container/path,other-options my-image\\n\\n```\\n\\n### 6.2.3、查看数据卷\\n\\n可以使用 `docker volume ls` 命令来列出所有的数据卷，以及 `docker volume inspect` 命令来查看特定数据卷的详细信息。\\n\\n### 6.2.4、删除数据卷\\n\\n可以使用 `docker volume rm` 命令来删除不再需要的数据卷。\\n\\n# 7、Docker 网络设置\\n\\nDocker 网络是指 Docker 容器之间以及容器与宿主机之间的通信机制。Docker 提供了多种网络模式，以适应不同的应用场景和需求。\\n\\n## 7.1、Docker 网络模式\\n\\nDocker 的网络模式主要包括以下几种类型：\\n\\n- **Bridge (桥接)**：这是 Docker 的默认网络模式。在这种模式下，Docker 会创建一个虚拟的网桥 `docker0`，并将新创建的容器连接到这个网桥上。容器之间可以通过 IP 地址直接通信。\\n- **Host (主机)**：在这种模式下，容器不会获得独立的 IP 地址，而是与宿主机共享网络堆栈。容器使用宿主机的 IP 地址和端口，适合需要高性能网络通信的场景。\\n- **None (无)**：在这种模式下，容器没有网络接口，完全隔离，适合不需要网络的容器。\\n- **Overlay (覆盖)**：这种网络模式用于 Docker Swarm 集群，可以跨多个主机创建虚拟网络，适合分布式应用和服务。\\n- **Macvlan (MAC 虚拟化)**：为每个容器分配一个 MAC 地址，使其像宿主机上的物理设备一样工作，适合需要与物理网络直接交互的场景。\\n\\n## 7.2、Docker 网络操作\\n\\nDocker 提供了一系列命令来管理网络，包括：\\n\\n![7.jpeg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ef0b396c749c36e9b97124a8f16c2f2f.jpeg)\\n`docker network ls`:列出所有可用的网络。\\n\\n`docker network create`：创建新的网络。\\n\\n`docker network connect`：将容器连接到网络。\\n\\n`docker network disconnect`：从网络断开会话。\\n\\n`docker network inspect`：查看网络的详细信息。\\n\\n`docker network rm`：删除网络。\\n\\n![7.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/9e78c3e9e31ebacb6b4a1f8213669fed.png)\\n## 7.3、Docker 网络配置\\n\\n在配置 Docker 网络时，可以使用 `--network` 参数来指定容器应该连接到哪个网络。此外，还可以通过 `-p` 或 `--publish` 选项来设置端口映射，允许外部网络访问容器内部的服务。\\n\\n# 完！！！\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/67f2c1aa268e1e99c907c0410b2d10a7.png\",\"articleTitle\":\"Docker入门指南：从安装到容器化应用的快速上手\",\"categoryName\":\"容器\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:01:28', NULL);
INSERT INTO `t_operation_log` VALUES (1734, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"内网穿透（NAT traversal）是一种技术手段，使得位于内网或防火墙后面的设备能够通过外网访问。例如，如果你的计算机、服务器等设备处于公司或家庭的路由器后面，通常只有同一内网中的设备能够直接访问它，外网用户无法直接连接。内网穿透通过创建外部访问通道，使得外网用户能够与这些内网资源交互。\",\"articleContent\":\"## 什么是内网穿透，内网穿透有什么用\\n\\n**内网穿透**（NAT traversal）是一种技术手段，使得位于内网或防火墙后面的设备能够通过外网访问。例如，如果你的计算机、服务器等设备处于公司或家庭的路由器后面，通常只有同一内网中的设备能够直接访问它，外网用户无法直接连接。内网穿透通过创建外部访问通道，使得外网用户能够与这些内网资源交互。\\n\\n**内网穿透的用途**\\n\\n1. **远程访问内网服务**：在外网环境中，用户可以远程访问自己家里或公司内网中的电脑、服务器、摄像头等设备，进行文件传输、桌面控制等操作。\\n2. **服务器部署**：个人或企业可以将某些服务部署在内网中，通过内网穿透将这些服务发布到互联网上，使得它们无需复杂的公网 IP 配置即可被外界访问。\\n3. **内网开发调试**：开发者在本地搭建服务后，可以通过内网穿透提供给外网的同事或客户测试访问，便于调试和演示，尤其在展示网站或应用时十分便捷。\\n\\n## 下载并注册\\n\\n[ngork官网](https://ngrok.com/)\\n\\n```\\nhttps://ngrok.com/\\n```\\n\\n打不开网址可前往 [科学上网]()\\n\\n点击右上角 【sign up】注册可使用（Google 或 Github 账号登录）\\n\\n![1.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/424f6c0410a2b943a4a7db496e46d6e3.png)\\n\\n账号注册登录成功后，点击【Windows】来到下载界面 [下载界面](https://download.ngrok.com/windows)\\n\\n![2.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ff4622c79a3d04297b5bb112ca681f12.png)\\n发现下载有两种方法\\n\\n一种是使用命令行\\n\\n```dos\\nchoco install ngrok\\n```\\n\\n安装，但我不建议这样，点击【Download】\\n\\n![3.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/1908d285ab72d077bbbd3893005c8138.png)\\n\\n下载好后解压，来到【ngork.exe】级目录，打开【cmd】或【PowerShell】，然后到官网找到【Authtoken】，复制粘贴你的Authtoken，到本机执行\\n\\n![4.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/285034254a19bcfcc498edd990f4b830.png)\\n\\n我这【ngork】放在D盘了\\n\\n![5.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/c5e6ba099bb2e54b49cf0ca86e02caaa.png)\\n\\n配置完成后就可以使用了\\n\\n还是在刚刚的命令框输入命令\\n\\n```dos\\nngork http 你本机端口号\\n```\\n\\n输入回车后，出现一下界面即成功\\n\\n![6.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3b9037ec8bc1f8f56f75114e6123d4e9.png)\\n【Forwarding】即公网可访问域名\\n\\n\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cf5de98941120246c3330fd89bdd5cf3.jpg\",\"articleTitle\":\"Ngrok实现内网穿透（Windows）\",\"categoryName\":\"网络\",\"id\":137,\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:02:55', NULL);
INSERT INTO `t_operation_log` VALUES (1735, '分类模块', '删除', '/admin/categories', 'top.heyqing.heyblog.controller.CategoryController.deleteCategories', '删除分类', '[[219]]', 'DELETE', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:03:07', NULL);
INSERT INTO `t_operation_log` VALUES (1736, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/909127db9db1738430ac57c1044dee1b.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:07:16', NULL);
INSERT INTO `t_operation_log` VALUES (1737, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"SQL Server 是微软公司推出的关系型数据库管理系统（RDBMS），广泛应用于企业级应用和数据管理。它提供了强大的数据存储、查询和处理功能，支持多种数据类型和复杂的查询操作。SQL Server 使用结构化查询语言（SQL）来操作数据，具有高效的事务管理、数据安全性和备份恢复功能。它不仅适用于中小型应用，也能应对大规模企业级数据处理需求。SQL Server 提供了图形化界面的管理工具（如 SQL Server Management Studio）和强大的开发功能，帮助开发者和数据库管理员高效管理数据库系统。通过本文，你将了解 SQL Server 的基础功能、安装配置及常见使用场景，帮助你快速掌握这款强大的数据库管理工具。\",\"articleContent\":\"# 前言\\n\\n​\\t\\t本篇主要讲述的是关系型数据库Sql Server，原因也很简单，因为大部分学校还在以sql server 为教学材料，不过没关系无论是sql server 、mysql 还是oracle,只要是关系型数据库，概念都是相通的，语句也大差不差。\\n\\n​\\t\\t关系型数据库是一种采用关系模型来组织数据的数据库系统。它将数据存储在表格形式的结构中，通常称为表。这些表由行和列组成，每一行代表一条记录，每一列代表一个字段。关系型数据库的核心是表之间的关系，这些关系可以是一对一、一对多或多对多的形式。关系型数据库的设计允许用户通过查询语言（如SQL）来检索、更新和管理数据。\\n\\n​\\t\\t关系型数据库主要用于存储、检索和管理结构化数据。它们在企业级应用中非常流行，因为它们提供了数据一致性、完整性和并发控制的保障。关系型数据库可以处理复杂的事务处理，支持多种数据类型，并且可以高效地查询数据。此外，它们还提供了安全可靠的数据访问机制。关系型数据库广泛应用于银行、零售、电信、互联网等领域，例如亚马逊的AWS和谷歌的GCP都是基于关系型数据库构建的。\\n\\n# 1、数据库系统概述\\n\\n## 1.1、数据库基础知识\\n\\n1. **信息与数据**\\n\\n- *数据（Data*）：数据是原始的、未经处理的数字、文字、图像或其他形式的输入，它们本身没有意义。例如，一个人的姓名、年龄、性别等信息单独存在时，只是数据。\\n- *信息（Information）*：信息是经过处理、组织或分析后的数据，它具有一定的意义和目的。例如，将一个人的姓名、年龄、性别组合起来，形成了一个人的基本信息。\\n\\n2. **数据库（Database）**\\n\\n- *数据库*：数据库是一个有组织的、可共享的数据集合，这些数据按照特定的模式存储，以便于管理和检索。数据库可以是关系型的，也可以是非关系型的，如文档型、键值型、图形型等。\\n\\n3. **数据库管理系统（Database Management System, DBMS）**\\n\\n- *数据库管理系统*：DBMS 是一种软件系统，用于创建、维护和使用数据库。它允许用户定义、查询、更新和管理数据库中的数据。常见的 DBMS 包括 MySQL、Oracle、SQL Server、PostgreSQL 和 MongoDB 等。\\n\\n4. **数据库系统（Database System）**\\n\\n- *数据库系统*：数据库系统是指由数据库、数据库管理系统以及相关的软件、硬件和人员组成的整体。它不仅包括数据的存储和管理，还包括数据的处理、维护、安全和备份等功能。\\n\\n**联系**\\n\\n- **数据与信息**：数据是信息的原材料，信息是数据处理后的产物。在数据库系统中，原始数据被收集、存储，并通过各种操作转化为有用的信息。\\n- **DB与DBMS**：数据库是数据的物理存储，而DBMS 是管理和操作这些数据的软件工具。DBMS 提供了用户与数据库之间的接口，使得用户可以方便地进行数据的增删改查等操作。\\n- **DBMS与DBS**：DBMS 是数据库系统的核心组成部分，负责数据库的逻辑和物理层面的管理。数据库系统则包含了DBMS，同时还包括了支持DBMS运行的硬件、软件环境，以及管理和使用数据库的人员。DBS(DB + DBMS)。\\n- **数据库系统与信息**：数据库系统通过对数据的组织和管理，使得数据能够有效地转化为信息，从而支持决策制定、业务流程和其他各种应用。\\n\\n## 1.2、数据库系统的结构\\n\\n### 1.2.1、相关概念\\n\\n1. **型**\\n   - 数据的“型”指的是*数据的结构*，数据的结构指的是*数据的内部构成和对外联系*。\\n   - 例如：图书的数据 = 图书编号 + 书名 + 作者 等属性组成\\n2. **值**\\n   - 数据的“值”指的是*数据的具体取值*\\n   - 例如： “CSDN0001,数据库期末法典，heyqings” 就是图书的一个具体值\\n3. **模式和实例**\\n   - 模式（schema）指的是对一个事物的图解、框架之意，目的是进一步认识这个事物。\\n   - 数据库的描述称之为数据库模式，模式是数据库中全体数据逻辑结构和特征的描述，不涉及具体的值\\n   - 模式是静态的，反映数据的结构及其联系，数据库设计阶段确定，一般不会频繁修改\\n   - 实例，模式的一个具体值，反映数据库在某一刻的状态，因此是动态的\\n   - 同一模式可以有多个实例\\n\\n### 1.2.2、数据库系统的内部体系结构\\n\\n1. **数据抽象**\\n\\n   - 物理层抽象\\n   - 逻辑层抽象\\n   - 视图层抽象\\n\\n2. **数据库系统的三级模式结构**\\n\\n   ***应用程序 => 外模式(用户级) => 模式(概念级) => 内模式(物理级) => 数据库***\\n\\n   - *模式（Schema）*：也称为概念模式或逻辑模式，它是数据库中全体数据的逻辑结构和特征描述，是所有用户的公共数据视图。\\n\\n\\n   - *外模式（External Schema）*：也称为子模式（Subschema）或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征描述，是与某一应用有关的数据的逻辑表示。\\n\\n\\n   - *内模式（Internal Schema）*：也称为存储模式（Storage Schema），它是对数据库中数据物理结构和存储方式的描述。\\n\\n\\n3. **两层映象与数据独立性**\\n\\n   - *外模式/模式映像*：定义了各个外模式与概念模式之间的映像关系，这些映像定义通常在各自的外模式中加以描述。\\n     - 对于同一个模式可以有多个外模式\\n     - 对于一个外模式，数据库都有一个外模式/模式映像\\n   - *模式/内模式映像*：定义了数据库全局逻辑结构与物理存储之间的关系，这种模式定义通常在模式中加以描述。\\n     - 模式/内模式映像是唯一的\\n\\n4. **三级模式结构与两层映像的优点**\\n\\n   - 保证数据的独立性\\n   - 方便用户使用，简化用户接口\\n   - 保证数据库安全性\\n\\n### 1.2.3、数据库系统的外部体系结构\\n\\n1. **三层架构**\\n\\n   界面表示层 => 业务处理层 => 数据访问层\\n\\n   - 界面表示层（用户界面层）\\n   - 业务处理层（应用层）\\n   - 数据访问层\\n\\n2. **结构类型**\\n\\n   - 单用户数据库系统：整个数据库系统（应用程序、DBMS、数据）装在一台计算机上，为一个用户独占，不同机器之间不能共享数据。\\n   - 主从式数据库系统：也称为集中式结构，是一个主机带多个终端用户结构的数据库系统。所有处理任务都由主机来完成，用户通过主机的终端可同时或并发地存取数据库。\\n   - 分布式数据库系统：数据库中的数据在逻辑上是一个整体，但物理地分布在计算机网络的不同结点上。网络中的每个结点都可以独立处理本地数据库中的数据，执行局部应用，同时也可以存取和处理多个异地数据库中的数据，执行全局应用。\\n   - 客户机/服务器（C/S）结构的数据库系统：将数据库系统看作由两个非常简单的部分组成，一个服务器（后端）和一组客户（前端）。服务器指DBMS本身，客户指在DBMS上运行的各种应用程序。\\n   - 浏览器/服务器（B/S）结构的数据库系统：用户通过浏览器来访问数据库，服务器负责处理数据库的请求并返回结果给用户。\\n\\n\\n\\n# 2、关系数据库基础理论\\n\\n## 2.1、关系的概念\\n\\n1. **域**：关系中每个属性的取值范围称为域。\\n2. **笛卡尔积**：关系中的所有可能元组的集合称为笛卡尔积。\\n3. **元组**：笛卡尔积中的每一个元素称为一个元组。\\n4. **关系**：在某个域上的笛卡尔积的子集称为关系。\\n\\n相关的术语\\n\\n- 元组与属性\\n  - 表中每一行对应关系的一个元组\\n  - 表中每一列对应一个域，多列的域可以相同，为了加以区分将每一列称属性，即n元关系必须有n个属性\\n- 候选码与主码\\n  - 候选码：关系中某*属性或属性组* 可以唯一标识一个元组，而其子集不能\\n  - 主码：候选码中最小属性组\\n- 主属性与非主属性\\n  - 主属性：候选码中属性\\n  - 非主属性：不包含任何候选码中的属性\\n\\n## 2.2、关系数据模型\\n\\n1. **关系模型及其要素**\\n   - 关系的描述称之为关系模式，关系模式即关系的框架或结构：***R(U,D,dom,F)***\\n   - R:关系名，U:关系的属性集，D:属性组中属性所来的域，dom：属性向域的映射集合，F:属性间的依赖关系\\n   - 完整性约束：域完整性，实体完整性，参照完整性（引用完整性），用户定义完整性\\n2. **关系的性质和类型**\\n   - 性质\\n     - 同一列的数据具有同质性\\n     - 关系中所有属性都是原子的\\n     - 同一关系中每一列对应一个属性\\n     - 关系中不允许有完全相同的元组\\n     - 在一个关系中元组的次序是无关紧要的\\n     - 在一个关系中属性的次序是无关紧要的\\n   - 类型\\n     - 基本表\\n     - 查询表\\n     - 视图表\\n\\n## 2.3、关系代数\\n\\n1. **关系操作集合**\\n   - 关系操作集合包括一系列用于处理关系数据的操作，这些操作可以分为查询操作和更新操作。\\n   - 查询操作包括选择、投影、连接、除、并、交、差、笛卡尔积等，其中***选择、投影、并、差、笛卡尔积***是五种基本操作。\\n   - 更新操作包括插入、删除、修改等。\\n2. **专门的关系运算**\\n   - 选择（限制），符号：σ\\n     - 单价大于45\\n     - σ单价 > 45(图书)\\n   - 投影，符号：Π\\n     - 所有图书的书名和作者\\n     - Π书名，作者（图书）\\n   - 连接，符号：⋈\\n   - 除法，符号：÷\\n\\n## 2.4、关系演算\\n\\n- R ⋃ S = { t | t∈R ∧ t ∈S}\\n- R − S = { t | t ∈R ∧ ┐ t ∈ S}\\n- R(A) × S(B) = { t | ∃ (u ∈R) ∃(s ∈S)(t[A] = u[A] ∧ t[B] = s[B])}\\n- σcon(R）={ t | t ∈ R ∧ F(con) }\\n- ∏A( R ) = { t[A] | t ∈ R }\\n\\n## 2.5、关系数据库的查询优化\\n\\n代数优化、物理优化\\n\\n# 3、数据库设计\\n\\n**基本步骤**\\n\\n需求分析 => 概念结构设计 => 逻辑结构设计 => 物理结构设计 => 数据库实施 => 数据库运行和维护\\n\\n## 3.1、需求分析\\n\\n### 3.1.1、需求分析任务\\n\\n1. 获取需求\\n   - 功能性需求\\n   - 非功能性需求\\n2. 确定对象以及对象之间的关系\\n\\n### 3.1.2、用例建模\\n\\n- 确定系统参与者\\n- 确定需求用例\\n- 构造用例图\\n- 用例规约\\n\\n### 3.1.3、对象模型\\n\\n- 识别对象和类\\n- 确定属性\\n- 确定对象之间的关系（1-1，1-n，m-n）\\n- 确定服务\\n\\n## 3.2、概念结构设计\\n\\n### 3.2.1、概念数据模型\\n\\n- **E-R图**\\n\\n  ```mermaid\\n  graph LR\\n      A[实体] --- C\\n      B((属性)) \\n      C{关系} --- B\\n  \\n  ```\\n\\n  \\n\\n## 3.3、逻辑结构设计\\n\\n1. **概念模型设计**：首先，需要将用户需求抽象成信息结构，通常使用实体-关系（E-R）模型来描述。\\n2. **逻辑模型转换**：将概念模型转换为适合特定数据库管理系统（DBMS）的逻辑模型，如关系模型、网状模型或层次模型。\\n3. **规范化**：通过分解或合并关系模式，按照规范化理论的指导，至少达到第三范式（3NF），以消除部分函数依赖和传递依赖，减少数据冗余。\\n4. **设计用户子模式**：根据局部应用需求，结合具体DBMS，设计用户的外模式，以便用户能够方便地访问和更新数据\\n\\n## 3.4、物理结构设计\\n\\n1. **确定数据的存储结构**：这包括选择合适的数据文件组织方式，如堆文件、排序文件或哈希文件，以及决定数据的存储布局，如行存储或列存储。\\n2. **设计数据的存取路径**：主要是通过建立索引来实现，索引可以显著加快数据检索速度。需要决定哪些属性列应该被索引，以及是否创建单一索引或组合索引。\\n3. **确定数据的存放位置**：为了提高系统性能，数据应该根据其访问频率和变化频率进行分区，以便于管理和优化。\\n4. **确定系统配置**：包括选择合适的硬件资源，如磁盘、内存和处理器，以及配置数据库管理系统（DBMS）的存储分配参数。\\n\\n# 4、规范化理论\\n\\n## 4.1、函数依赖及关系范式\\n\\n### 4.1.1、函数依赖\\n\\n函数依赖是指在关系模式中，一个或一组属性（称为决定因素）能够决定另一个或一组属性（称为依赖因素）的关系。函数依赖通常用 X→Y来表示，其中X 是决定因素，Y 是依赖因素。\\n\\n- **平凡函数依赖**：如果 X包含了所有可能的值，那么X→Y 总是成立的，这种依赖被称为平凡函数依赖。\\n- **非平凡函数依赖**：如果 X不包含所有可能的值，但仍然能够决定Y，这种依赖被称为非平凡函数依赖。\\n- **完全函数依赖**：如果 X的任何真子集都不能决定Y，那么 X→ (f)Y 被称为完全函数依赖。\\n- **部分函数依赖**：如果 X的某个真子集可以决定Y，那么 X→(p)Y 被称为部分函数依赖。\\n- **传递函数依赖**：如果存在 X→Y和Y→Z，但 Y不能决定X，那么 X→(t )Z 被称为传递函数依赖。\\n\\n### 4.1.2、关系范式\\n\\n关系范式是用来衡量关系模式是否规范化的标准。常见的关系范式包括：\\n\\n- **第一范式（1NF）**：要求关系模式中的每个属性都是原子的，即不可再分。\\n- **第二范式（2NF）**：要求关系模式中的每个非主属性完全函数依赖于主键。\\n- **第三范式（3NF）**：要求关系模式中的每个非主属性既不部分依赖于主键，也不传递依赖于主键。\\n- **博伊斯-科得范式（BCNF）**：要求关系模式中的每个决定因素都是超键。\\n- **第四范式（4NF）**：要求关系模式中的每个非平凡多值依赖都包含码。\\n\\n## 4.2、函数依赖公理系统\\n\\n### 4.2.1、Armstrong公理系统\\n\\n- 逻辑蕴含:如果从给定的F能推导出X→Y，则称F逻辑蕴含X→Y\\n- 函数依赖集的闭包：F逻辑蕴含的所有函数依赖集合，记作F+\\n\\nArmstrong公理系统的基本规则包括：\\n\\n1. **自反律**：如果属性集Y是属性集X的子集，并且X是U的子集，那么X→Y是R上成立的。\\n2. **增广律**：如果X→Y在R上成立，并且Z是U的子集，那么XZ→YZ在R上成立。\\n3. **传递律**：如果X→Y和Y→Z在R上成立，那么X→Z在R上成立。\\n\\nArmstrong公理系统还包括一些推论规则，例如：\\n\\n1. **合并规则**：如果X→Y和X→Z在R上成立，那么X→YZ在R上也成立。\\n2. **伪传递律**：如果X→Y和WY→Z在R上成立，那么XW→Z在R上也成立。\\n3. **分解规则**：如果X→Y在R上成立，并且Z是Y的子集，那么X→Z在R上也成立。\\n\\n### 4.2.2、函数依赖集的等价和最小化\\n\\n1. 函数依赖集的等价\\n   - F+ = G+的充分必要条件是G+包含F,F+包含G\\n   - 两个函数依赖集等价的定义是：如果它们的闭包相等，即一个函数依赖集能够推导出另一个函数依赖集中的所有函数依赖，反之亦然。这种等价关系允许我们在不同的函数依赖集中进行转换，而不会改变关系模式的本质特征。\\n2. 函数依赖集的最小化\\n   - 函数依赖集的最小化是指找到一个包含最少函数依赖的集合，同时保持与原集合等价。最小化的函数依赖集有助于简化关系模式，减少存储空间和提高查询效率。最小化通常通过逐步移除不必要的函数依赖来实现，这些依赖要么是冗余的，要么可以通过其他依赖间接推导出来。\\n\\n# 5、sql语句（T-SQL为例）\\n\\n## 5.1、基础知识\\n\\n### 5.1.1、语法格式约定\\n\\nT-SQL（Transact-SQL）是Microsoft SQL  Server中使用的扩展版本的SQL语言。在T-SQL中，命令和语句的书写通常不区分大小写，但是为了提高代码的可读性，建议使用统一的命名规范，例如使用大写字母表示关键字，小写字母表示变量和列名。\\n\\n### 5.1.2、运算符\\n\\nT-SQL中的运算符分为几类：\\n\\n1. **算术运算符**：包括加（+）、减（-）、乘（*）、除（/）和取模（%）。\\n2. **比较运算符**：用于比较两个值是否相等或不等，包括等于（=）、不等（<> 或 !=）、大于（>）、小于（<）、大于等于（>=）和小于等于（<=）。\\n3. **逻辑运算符**：用于组合多个条件判断，包括AND、OR、NOT、IN、BETWEEN、EXISTS、ANY、ALL、SOME、LIKE等。\\n4. **字符串连接运算符**：用于连接两个字符串，通常使用加号（+）。\\n5. **位运算符**：包括按位与（&）、按位或（|）、按位异或（^）和按位取反（~）。\\n\\n### 5.1.3、批处理和脚本\\n\\n- 批处理\\n  - 批处理是T-SQL语句集合的逻辑单元。在批处理中，所有的语句要么被放在一起通过解析，要么没有一句能够执行。批处理内部的语句被整合成一个执行计划，这意味着批处理中的语句是一起提交给服务器的，可以节省系统开销。如果批处理中的任何一条语句存在语法错误，整个批处理都无法通过编译，也不会执行。\\n- 脚本\\n  - 脚本则是由一系列的SQL命令组成的文本文件，它可以包含多个批处理。脚本中的每个批处理都是独立执行的，一个批处理的错误不会阻止其他批处理的运行。脚本中常用的控制语句包括变量声明、分支、循环等，这些控制语句使得脚本能够实现一些复杂的任务。\\n\\n## 5.2、数据操作语言（DDL）\\n\\n### 5.2.1、定义语言\\n\\n- 数据库定义\\n\\n  ```sql\\n  -- 通常情况下只需要以下语句\\n  CREATE DATABASE MyDataBase;\\n  ```\\n\\n- 基本表定义\\n\\n  ```sql\\n  -- 定义语法\\n  CREATE TABLE table_name (\\n      column1 datatype constraint1,\\n      column2 datatype constraint2,\\n      column3 datatype constraint3,\\n      ...\\n      columnN datatype constraintN\\n  );\\n  -- 例如\\n  CREATE TABLE Students (\\n      StudentID INT PRIMARY KEY,\\n      Name VARCHAR(50) NOT NULL,\\n      Age INT,\\n      Gender CHAR(1),\\n      Major VARCHAR(100)\\n  );\\n  ```\\n\\n  1. 数据属性约束\\n\\n  - **主键约束（PRIMARY KEY）**：确保主键列唯一且不允许为空。\\n  - **唯一约束(UNIQUE)**：确保列或列组合中的数据唯一，允许为空，但每个空值只能出现一次。\\n  - **检查约束(CHECK(?))**：限制列可接受的值范围或格式，通常通过逻辑表达式来定义。\\n  - **默认约束(DEFAULT)**：为列设置默认值，当插入新记录时，如果未指定该列的值，则会使用默认值。\\n  - **外键约束(FOREIGN KEY)**：在两个表之间建立关系，确保参照完整性，即一个表中的外键值必须在另一个表的主键中存在。\\n\\n  2. 数据的基本类型有：\\n\\n  **数值数据类型**\\n\\n  - `INT`：可以存储4个字节的整数值，范围从-2,147,483,648到2,147,483,647。\\n  - `SMALLINT`：可以存储2个字节的整数值，范围从-32,768到32,767。\\n  - `TINYINT`：可以存储1个字节的整数值，范围从0到255。\\n  - `BIGINT`：可以存储8个字节的整数值，范围从-263到263-1。\\n  - `DECIMAL` 和 `NUMERIC`：用于存储精确的小数值，可以指定精度和小数位数。\\n  - `FLOAT`：用于存储浮点数值，可以指定精度。\\n  - `MONEY` 和 `SMALLMONEY`：用于存储货币值，通常有四位小数。\\n\\n  **字符数据类型**\\n\\n  - `CHAR`：存储固定长度的字符串，不足部分会用空格填充。\\n  - `VARCHAR`：存储可变长度的字符串，不需要额外的空格填充。\\n  - `NCHAR` 和 `NVARCHAR`：类似于 `CHAR` 和 `VARCHAR`，但用于存储Unicode字符数据，`NCHAR` 是固定长度，`NVARCHAR` 是可变长度。\\n\\n  **日期和时间数据类型**\\n\\n  - `DATETIME`：用于存储日期和时间值，范围从1753年1月1日到9999年12月31日。\\n\\n  **其他数据类型**\\n\\n  - `TEXT`、`NTEXT`、`IMAGE`、`VARBINARY(MAX)` 和 `XML`：用于存储大量文本或二进制数据。\\n\\n- 修改基本表\\n\\n  ```sql\\n  -- 新增新列\\n  ALTER TABLE <表名>\\n  ADD <列名> <数据类型> [<列级完整性约束>]\\n  -- 修改原列\\n  ALTER TABLE <表名>\\n  ALTER COLUMN <列名> <新数据类型> [<列级别完整性约束>]\\n  -- 删除列\\n  ALTER TABLE <表名>\\n  DROP COLUMN <列名>\\n  -- 添加或删除完整性约束\\n  ALTER TABLE <表名>\\n  ADD CONSTRAINT <约束名> <约束定义>\\n  \\n  ALTER TABLE <表名>\\n  DROP CONSTRAINT <约束名>\\n  ```\\n\\n  \\n\\n- 索引定义\\n\\n  ```sql\\n  -- 创建\\n  CREATE [UNIQUE][CLUSTERED | NONCLUSTERED] INDEX index_name\\n  ON {table_name | view_name} [WITH [index_property [,....n]]]\\n  ```\\n\\n  - `UNIQUE`：表示创建的是唯一索引，不允许有重复的键值。\\n  - `CLUSTERED`：表示创建的是聚集索引。\\n  - `NONCLUSTERED`：表示创建的是非聚集索引。\\n  - `index_name`：索引的名称。\\n  - `table_name | view_name`：要在其上创建索引的表或视图的名称。\\n  - `index_property`：索引属性，用于定义索引的额外特性，如填充因子等。\\n\\n  ```sql\\n  -- 删除\\n  DROP INDEX table_name.index_name[,table_name.index_name]\\n  ```\\n\\n  ```sql\\n  -- 显示\\n  EXEC sp_helpindex table_name\\n  ```\\n\\n- 索引修改\\n\\n  ```sql\\n  -- 添加或删除索引列\\n  -- 假设已经存在一个名为IX_WorkOrder_ProductID的非聚集索引\\n  -- 现在想要添加一个新列Column3到索引中\\n  \\n  CREATE NONCLUSTERED INDEX IX_WorkOrder_ProductID ON Production.WorkOrder(ProductID)\\n  WITH (DROP_EXISTING = ON, FILLFACTOR = 80, PAD_INDEX = ON)\\n  INCLUDE (Column3);\\n  ```\\n\\n  ```sql\\n  -- 修改索引属性\\n  -- 修改名为AK_SalesOrderHeader_SalesOrderNumber的唯一索引的属性\\n  \\n  ALTER INDEX AK_SalesOrderHeader_SalesOrderNumber ON Sales.SalesOrderHeader\\n  SET (STATISTICS_NORECOMPUTE = ON, IGNORE_DUP_KEY = ON, ALLOW_PAGE_LOCKS = ON);\\n  \\n  ```\\n\\n  ```sql\\n  -- 重建或重组索引\\n  -- 重建名为IX_WorkOrder_ProductID的非聚集索引\\n  \\n  ALTER INDEX IX_WorkOrder_ProductID ON Production.WorkOrder REBUILD;\\n  \\n  -- 重组名为IX_WorkOrder_ProductID的非聚集索引\\n  \\n  ALTER INDEX IX_WorkOrder_ProductID ON Production.WorkOrder REORGANIZE;\\n  \\n  ```\\n\\n  \\n\\n- 视图定义\\n\\n  ```sql\\n  -- 创建\\n  CREATE [OR ALTER] VIEW [schema_name.]view_name [(column [,...n])]\\n  AS\\n  SELECT_statement\\n  [WITH <view_attribute> [,...n]]\\n  \\n  ```\\n\\n  其中 `<view_attribute>` 可以是以下选项之一：\\n\\n  - `ENCRYPTION`：加密视图定义，防止未授权的用户查看。\\n  - `SCHEMABINDING`：绑定视图，阻止对基表进行某些更改，除非先删除视图。\\n  - `VIEW_METADATA`：返回视图的元数据，而不是基表的元数据。\\n\\n- 修改视图\\n\\n  ```sql\\n  -- 假设我们有一个名为MyView的视图，我们想要修改它\\n  ALTER VIEW MyView\\n  AS\\n  SELECT Column1, Column2\\n  FROM MyTable\\n  WHERE SomeCondition = True;\\n  \\n  ```\\n\\n### 5.2.2、操作语言\\n\\n- 增\\n\\n  ```sql\\n  INSERT INTO 表名 (列名 [, 列名...])\\n  VALUES (值 [, 值...])\\n  \\n  ```\\n\\n- 删\\n\\n  ```sql\\n  DELETE FROM 表名\\n  WHERE 条件\\n  \\n  ```\\n\\n- 改\\n\\n  ```sql\\n  UPDATE 表名\\n  SET 列名 = 新值 [, 列名 = 新值...]\\n  WHERE 条件\\n  \\n  ```\\n\\n- 查\\n\\n  ```sql\\n  SELECT [ALL | DISTINCT] 列名 [AS 别名]\\n  FROM 表名\\n  [WHERE 条件]\\n  [GROUP BY 列名]\\n  [HAVING 条件]\\n  [ORDER BY 列 [ASC | DESC]]\\n  \\n  ```\\n\\n  - 简单查询\\n\\n    ```sql\\n    -- 查询所有列\\n    SELECT * FROM TableName;\\n    -- 查询特定列\\n    SELECT Column1, Column2 FROM TableName;\\n    -- 条件查询\\n    SELECT * FROM TableName WHERE Condition;\\n    -- 模糊查询\\n    SELECT * FROM TableName WHERE Column LIKE Pattern;\\n    \\t-- 使用 % 作为通配符来匹配任意数量的字符\\n    \\tSELECT * FROM TableName WHERE Column LIKE \'Pattern%\';\\n    -- 排序查询\\n    SELECT * FROM TableName ORDER BY Column ASC/DESC;\\n    -- 统计查询\\n    SELECT COUNT(*), SUM(Column), AVG(Column), MIN(Column), MAX(Column) FROM TableName;\\n    -- 分组查询\\n    SELECT Column, COUNT(*) FROM TableName GROUP BY Column HAVING Condition;\\n    \\n    ```\\n\\n  - 连接查询\\n\\n    ```sql\\n    -- 内连接\\n    SELECT column_list\\n    FROM table1\\n    INNER JOIN table2\\n    ON table1.column_name = table2.column_name;\\n    -- 外连接(OUTER JOIN)\\n    -- 左外(LEFT OUTER JOIN)，右外(RIGHT OUTER JOIN)\\n    SELECT column_list\\n    FROM table1\\n    LEFT OUTER JOIN table2\\n    ON table1.column_name = table2.column_name;\\n    -- 全连接\\n    SELECT column_list\\n    FROM table1\\n    FULL OUTER JOIN table2\\n    ON table1.column_name = table2.column_name;\\n    -- 交叉连接\\n    SELECT column_list\\n    FROM table1\\n    CROSS JOIN table2;\\n    -- 自连接\\n    SELECT column_list\\n    FROM table1\\n    SELF JOIN table2;\\n    \\n    ```\\n\\n  - 嵌套查询\\n\\n    ```sql\\n    SELECT column_list\\n    FROM outer_table\\n    WHERE condition\\n        AND (SELECT column_list\\n             FROM inner_table\\n             WHERE another_condition);\\n    \\n    ```\\n\\n    *常见的嵌套查询类型*\\n\\n    1. **IN子查询**：用于检查某个值是否存在于子查询返回的结果集中。\\n    2. **EXISTS子查询**：用于检查子查询是否返回至少一行数据。\\n    3. **NOT IN和NOT EXISTS**：用于排除某个值或数据集。\\n    4. **比较运算符**：如 `>`, `<`, `=` 等，用于比较子查询返回的值。\\n\\n  - 组合查询\\n\\n    ```sql\\n    -- 获取所有员工及其所在部门的信息\\n    SELECT Employees.EmployeeID, Employees.Name, Departments.DepartmentName\\n    FROM Employees\\n    INNER JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;\\n    \\n    ```\\n\\n### 5.2.3、权限控制语言\\n\\n权限控制通常涉及以下几个关键概念：\\n\\n- **用户**：指在数据库中拥有账户的个体或实体。\\n- **角色**：一组权限的集合，可以被分配给一个或多个用户。\\n- **权限**：允许用户执行特定操作的许可，如SELECT（选择）、INSERT（插入）、UPDATE（更新）、DELETE（删除）等。\\n- **对象**：数据库中的实体，如表、视图、存储过程等。\\n\\n1. 授予权限\\n\\n   ```sql\\n   GRANT SELECT, INSERT ON ObjectName TO UserOrRoleName;\\n   \\n   ```\\n\\n2. 撤销权限\\n\\n   ```sql\\n   REVOKE SELECT ON ObjectName FROM UserOrRoleName;\\n   \\n   ```\\n\\n3. 查看权限\\n\\n   使用 `EXEC sp_helprotect` 或 `EXEC sp_helprolemember` 等系统存储过程来查看对象的权限信息或用户或角色的权限信息。\\n\\n# 6、数据库编程\\n\\n## 6.1、常用语言元素\\n\\n### 6.1.1、变量\\n\\n- 声明\\n\\n  ```sql\\n  DECLARE @局部变量名|@@全局变量 数据类型[ = 初值];\\n  DECLARE @id INT;\\n  \\n  ```\\n\\n- 赋值和查询\\n\\n  ```sql\\n  -- 赋值\\n  -- 单值\\n  SET @id = 1;\\n  -- 多值\\n  SELECT @name = name FROM students WHERE id = @id;\\n  \\n  ```\\n\\n- 输出\\n\\n  ```sql\\n  PRINT @id; -- 打印输出\\n  \\n  ```\\n\\n### 6.1.2、流程控制语句\\n\\n- 语句块\\n\\n  ```sql\\n  BEGIN\\n  \\t语句\\n  \\t...\\n  END;\\n  \\n  ```\\n\\n- IF…ELSE条件语句\\n\\n  ```sql\\n  IF 条件表达式\\n  \\t语句\\n  ELSE\\n  \\t语句\\n  \\n  ```\\n\\n- WHILE循环语句\\n\\n  ```sql\\n  WHILE 条件表达式\\n  \\t语句 | BREAK | CONTINUE\\n  \\n  ```\\n\\n- CASE多条件函数\\n\\n  ```sql\\n  CASE 输入表达式\\n  \\tWHEN 比较表达式 THEN 结果\\t\\n  \\tWHEN 比较表达式 THEN 结果\\n  \\tWHEN 比较表达式 THEN 结果\\t\\n  \\tElSE\\n  \\t\\t语句\\n  \\tEND\\n  \\n  ```\\n\\n- WAITFOR语句\\n\\n  ```sql\\n  WAITFOR {DELAY | TIME}\\n  \\n  ```\\n\\n- GOTO语句\\n\\n  ```sql\\n  标签名称\\n  \\t语句组\\n  GOTO 标签名称\\n  \\n  ```\\n\\n- RETURN语句\\n\\n  ```sql\\n  RETURN [<整数表达式>]\\n  \\n  ```\\n\\n- 注释语句\\n\\n  ```sql\\n  /*多行注释*/\\n  -- 单行注释\\n  \\n  ```\\n\\n## 6.2、创建和执行存储过程\\n\\n### 6.2.1、创建\\n\\n```sql\\nCREATE PROCEDURE MyProcedure\\nAS\\nBEGIN\\n    -- 这里放置您的SQL语句\\n    SELECT * FROM MyTable WHERE MyColumn = \'SomeValue\';\\nEND\\nGO\\n\\n```\\n\\n```sql\\n-- 创建带有参数的存储过程\\nCREATE PROCEDURE MyProcedureWithParam @MyParam INT\\nAS\\nBEGIN\\n    -- 这里放置您的SQL语句，使用@MyParam作为参数\\n    SELECT * FROM MyTable WHERE MyColumn = @MyParam;\\nEND\\nGO\\n\\n```\\n\\n\\n\\n### 6.2.2、执行\\n\\n```sql\\nEXEC MyProcedure;\\n-- 或者\\nEXECUTE MyProcedure;\\n\\n```\\n\\n```sql\\n-- 执行带有参数的存储过程\\nEXEC MyProcedureWithParam @MyParam = 10;\\n-- 或者\\nEXECUTE MyProcedureWithParam 10;\\n\\n```\\n\\n## 6.3、触发器\\n\\n### 6.3.1、DML触发器\\n\\nDML 触发器是在执行 DML 操作（如 INSERT、UPDATE 或 DELETE）时自动触发的存储过程。它们用于在数据更改之前或之后执行某些操作，例如记录更改、强制业务规则或同步多个表之间的数据。\\n\\n```sql\\n-- 创建 DML 触发器的示例\\nCREATE TRIGGER trg_AfterInsert ON YourTable\\nAFTER INSERT\\nAS\\nBEGIN\\n    -- 在这里编写触发器逻辑\\n    -- 例如，记录插入的数据到另一个表\\n    INSERT INTO AuditLogTable (ColumnName, OperationType)\\n    SELECT ColumnName, \'INSERT\' FROM inserted\\nEND;\\n\\n```\\n\\n### 6.3.2、DDL触发器\\n\\nDDL 触发器与 DML 触发器类似，但它们响应的是 DDL 事件，如 CREATE、ALTER 或 DROP 语句。DDL 触发器通常用于审计数据库架构的变化，或者防止对某些对象的修改或删除。\\n\\n```sql\\n-- 创建 DDL 触发器的示例\\nCREATE TRIGGER trg_PreventTableDrop ON DATABASE\\nFOR DROP_TABLE\\nAS\\nBEGIN\\n    -- 阻止 DROP TABLE 操作\\n    RAISERROR (\'不允许删除表。\', 16, 1)\\n    ROLLBACK\\nEND;\\n\\n```\\n\\n## 6.4、函数\\n\\n```sql\\n-- 创建函数\\nCREATE FUNCTION [schema_name].function_name ([{ @parameter_name [ AS ] [ type_schema_name. ] parameter_data_type [ NULL ] [ = default ] [ READONLY ] } [ , ...n ] ])\\nRETURNS return_data_type [ WITH <function_option> [ , ...n ] ]\\n[ AS ]\\nBEGIN\\n    function_body\\n    RETURN scalar_expression\\nEND;\\n\\n```\\n\\n\\n\\n### 6.4.1、标量函数\\n\\n标量函数返回单个确定类型的值。它们可以接受零个或多个参数，并执行计算后返回结果。标量函数通常用于执行简单的数学运算、字符串处理或日期时间处理等操作。\\n\\n```sql\\n-- 标量函数示例，它计算两个数的平均值\\nCREATE FUNCTION dbo.AverageNumbers (@num1 INT, @num2 INT)\\nRETURNS FLOAT\\nAS\\nBEGIN\\n    DECLARE @result FLOAT\\n    SET @result = (@num1 + @num2) / 2.0\\n    RETURN @result\\nEND\\n\\n```\\n\\n```sql\\n-- 使用这个函数的SQL语句如下\\nSELECT dbo.AverageNumbers(10, 20) AS AverageResult\\n\\n```\\n\\n\\n\\n### 6.4.2、表值函数\\n\\n表值函数则返回一个表格数据结构，即一组行和列。它们可以接受参数，并根据这些参数执行查询或计算，最终返回一个结果集。表值函数通常用于处理复杂的数据检索或聚合操作。\\n\\n```sql\\n-- 表值函数，以下是一个简单的例子，它返回一个部门的所有员工信息\\nCREATE FUNCTION dbo.GetEmployeesByDepartment (@deptID INT)\\nRETURNS TABLE\\nAS\\nRETURN (\\n    SELECT EmployeeID, Name, BirthDate\\n    FROM Employees\\n    WHERE DepartmentID = @deptID\\n)\\n\\n```\\n\\n```sql\\n-- 使用这个函数的SQL语句如下\\nSELECT * FROM dbo.GetEmployeesByDepartment(1)\\n\\n```\\n\\n## 6.5、游标\\n\\n游标是一种数据访问机制，它允许您在SQL Server数据库中逐行访问结果集。游标的实质是一种能从包括多条数据记录的结果集中每次取出一条记录的缓冲区。游标通常用于处理那些不适合用单一SQL语句一次性处理完毕的复杂逻辑。\\n\\n在T-SQL中，使用游标通常涉及以下几个步骤：\\n\\n1. **声明游标**：使用`DECLARE CURSOR`语句定义游标，并指定其属性，如方向（正向、反向、静态等）、类型（只读、可更新等）以及作用域（局部或全局）。\\n2. **打开游标**：使用`OPEN`语句激活游标，此时游标会准备好开始遍历结果集。\\n3. **获取数据**：使用`FETCH`语句从游标中检索数据。可以选择`FETCH NEXT`来获取下一条记录，或者使用其他选项如`FIRST`、`LAST`、`PRIOR`等来获取特定位置的记录。\\n4. **处理数据**：在`FETCH`之后，可以执行各种SQL语句来处理检索到的数据，例如更新、插入或删除操作。\\n5. **关闭游标**：使用`CLOSE`语句关闭游标，释放与之相关的资源。\\n6. **释放游标**：使用`DEALLOCATE`语句彻底移除游标，释放内存空间。\\n\\n```sql\\n/*\\n我们首先声明了一个名为myCursor的游标，它用于检索employees表中属于Sales部门的员工记录。然后我们打开游标，并使用FETCH NEXT来获取第一条记录。接着，我们进入一个WHILE循环，直到@@FETCH_STATUS指示没有更多的记录可以获取为止。在循环体内，我们打印出每条记录的ID和姓名，并可以根据需要添加其他业务逻辑。最后，我们关闭并释放游标。\\n*/\\nDECLARE myCursor CURSOR FOR\\n    SELECT id, name FROM employees\\n    WHERE department = \'Sales\';\\n\\nOPEN myCursor;\\n\\nFETCH NEXT FROM myCursor INTO @id, @name;\\n\\nWHILE @@FETCH_STATUS = 0\\nBEGIN\\n    -- 处理每条记录\\n    PRINT \'ID: \' + CAST(@id AS VARCHAR) + \', Name: \' + @name;\\n    \\n    -- 可以在这里添加更多的业务逻辑\\n\\n    FETCH NEXT FROM myCursor INTO @id, @name;\\nEND;\\n\\nCLOSE myCursor;\\nDEALLOCATE myCursor;\\n\\n```\\n\\n# 7、安全性和完整性控制\\n\\n## 7.1、安全性控制\\n\\n- **数据库安全性控制的方法**\\n\\n1. 用户标识和鉴别\\n2. 存取控制\\n3. 视图\\n4. 跟踪审计\\n5. 数据加密\\n\\n```sql\\n-- 创建新的服务器角色\\nCREATE SERVER ROLE server_role_name;\\n-- 向服务器角色添加成员\\nEXEC sp_addrolerolemember \'server_role_name\', \'member_name\';\\n-- 授予权限\\nGRANT permission_name TO server_role_name;\\n-- 撤销权限\\nREVOKE permission_name FROM server_role_name;\\n\\n```\\n\\n## 7.2、完整性控制\\n\\n完整性控制类型，主要包括以下几种：\\n\\n1. **实体完整性**：确保每个表中的记录都是唯一的，通常通过主键约束来实现。\\n2. **域完整性**：限制列中可以接受的值的类型和范围，例如通过NOT NULL约束、CHECK约束、数据类型约束等。\\n3. **参照完整性**：维护表之间的关系，确保一个表中的外键值在另一个表中有对应的主键值。\\n4. **用户定义完整性**：允许用户根据特定业务规则定义额外的约束条件。\\n\\n实现完整性控制的方法包括：\\n\\n1. **约束**：在表定义中直接指定约束条件，如PRIMARY KEY、FOREIGN KEY、UNIQUE、CHECK等。\\n2. **规则**：定义一组规则，然后将这些规则应用到表或列上。\\n3. **默认值**：为列指定默认值，当插入新记录时，如果未指定该列的值，则会使用默认值。\\n4. **存储过程**：编写存储过程来执行复杂的数据校验逻辑。\\n5. **触发器**：创建触发器来自动执行某些操作，如在插入、更新或删除数据时检查完整性约束。\\n\\n# 8、事务管理与并发控制\\n\\n## 8.1、事务（transaction）控制\\n\\n数据库事务管理是数据库管理系统中的一个重要组成部分，它确保了数据库操作的一致性和可靠性。事务是一系列对数据库的操作，这些操作要么全部执行，要么全部不执行，是一个不可分割的工作单位。事务管理必须满足以下四个基本特性，通常称为ACID属性：\\n\\n- **原子性（Atomicity）**：事务中的所有操作要么全部完成，要么全部不执行，不允许部分执行。\\n- **一致性（Consistency）**：事务必须使数据库从一个一致的状态转变到另一个一致的状态。\\n- **隔离性（Isolation）**：并发执行的事务之间互不干扰，每个事务都认为自己独占了数据库资源。\\n- **持久性（Durability）**：一旦事务提交，其对数据库的更改就永久保存在数据库中，即使系统发生故障也不会丢失。\\n\\n```sql\\n-- 开始一个新的事务。在事务开始后，所有后续的数据库操作都会包含在这个事务中，直到事务被提交或回滚。\\nBEGIN TRANSACTION;\\n-- 这里放置一系列的数据库操作\\nCOMMIT TRANSACTION;\\n\\n-- 提交当前事务，使所有自事务开始以来所做的更改永久保存到数据库中。\\nBEGIN TRANSACTION;\\n-- 这里放置一系列的数据库操作\\nCOMMIT TRANSACTION;\\n\\n-- 撤销当前事务中所做的所有更改，将数据库恢复到事务开始前的状态。\\nBEGIN TRANSACTION;\\n-- 这里放置一系列的数据库操作\\nROLLBACK TRANSACTION;\\n\\n-- 创建一个保存点，允许在事务中回滚到该特定点，而不是整个事务。\\nBEGIN TRANSACTION;\\n-- 这里放置一系列的数据库操作\\nSAVE TRANSACTION savepoint_name;\\n-- 如果发生错误，可以回滚到savepoint_name\\nROLLBACK TRANSACTION savepoint_name;\\n\\n-- 回滚到指定的保存点，撤销该保存点之后的所有更改。\\nBEGIN TRANSACTION;\\n-- 这里放置一系列的数据库操作\\nSAVE TRANSACTION savepoint_name;\\n-- 如果发生错误，可以回滚到savepoint_name\\nROLLBACK TRANSACTION TO savepoint_name;\\n\\n```\\n\\n## 8.2、并发控制\\n\\n并发控制是指在多个用户或进程同时访问和修改数据库时，确保数据的一致性和完整性。并发操作可能导致以下几种问题：\\n\\n1. **丢失修改**：当两个事务尝试修改同一个数据项时，如果第一个事务尚未提交，第二个事务的修改可能会覆盖第一个事务的修改，导致第一个事务的修改丢失。\\n2. **不可重复读**：如果一个事务在读取数据后，另一个事务修改了这些数据，然后第一个事务再次读取这些数据，它可能会得到不同的结果，因为数据已经被改变。\\n3. **读脏数据**：如果一个事务读取了正在被另一个事务修改的数据，然后第一个事务提交或回滚，导致读取的数据变得无效，这种现象称为读脏数据。\\n\\n### 8.2.1、锁\\n\\n***锁类型***\\n\\n1. **共享锁 (S)**：允许多个事务同时读取同一资源，但不允许修改。一旦所有读取操作完成，共享锁会被释放。\\n2. **排他锁 (X)**：只允许一个事务对数据进行读写操作，阻止其他事务同时访问。\\n3. **更新锁 (U)**：在修改操作的初始阶段用来锁定可能要被修改的资源，避免死锁。更新锁在数据修改时升级为排他锁。\\n4. **意向锁**：包括意向共享锁 (IS)、意向排他锁 (IX)、意向更新锁 (IU) 等，它们表示事务对资源的意图，以便其他事务了解当前事务的锁定状态。\\n5. **键范围锁**：在使用可序列化事务隔离级别时，锁定整个键范围，防止其他事务插入或更新该范围内的数据。\\n\\n# 完！\\n\\n有异议、意见等等欢迎评论区留言反馈！\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/909127db9db1738430ac57c1044dee1b.jpg\",\"articleTitle\":\"SQL Server入门指南：从数据库管理到高效查询的全方位了解\",\"categoryName\":\"数据库\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"sql\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:07:25', NULL);
INSERT INTO `t_operation_log` VALUES (1738, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/d8a7839b36f1c3ce4e1f5d4ccef58aeb.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:11:43', NULL);
INSERT INTO `t_operation_log` VALUES (1739, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"Markdown 是一种轻量级的标记语言，广泛应用于文档编写和内容格式化。除了基本的文本格式化，Markdown 还支持插入图片、链接、代码块以及绘制流程图等。通过使用一些简单的语法和插件，用户可以在 Markdown 文档中轻松绘制流程图，帮助清晰地展示复杂的过程和逻辑关系。本文将介绍如何在 Markdown 中使用流程图插件，如 Mermaid，绘制各种常见的流程图，包括顺序图、流程图、类图等，让你的文档更具可读性和专业性。\",\"articleContent\":\"# 前言\\n\\n在Markdown中，可以使用特定的语法来绘制简单的流程图。这种语法通常是通过Mermaid插件实现的，它允许你在Markdown文档中创建图表，包括流程图、序列图和甘特图等。\\n\\n\\n\\n> **因版本或编辑器不同等等原因部分语法不普遍适用** \\n\\n\\n\\n# 1、基础讲解\\n\\n## 1.1、mermaid定义\\n\\n~~~markdown\\n```mermaid\\n\\t语句\\n```\\n~~~\\n\\n## 1.2、基础语法\\n\\n### 1.2.1、节点类型\\n\\n- 默认\\n- 圆角矩形:`()`\\n- 方角矩形:`[]`\\n- 菱形:`{}`\\n- 圆形:`(())`\\n- 非对称:`>]`\\n\\n_节点名称（节点显示内容）_\\n\\n~~~markdown\\n```mermaid\\n\\tgraph TB\\n\\t默认\\n\\tA(圆角矩形)\\n\\tB[方角矩形]\\n\\tC{菱形}\\n\\tD((圆形))\\n\\tE>非对称]\\n```\\n~~~\\n\\n```mermaid\\ngraph TB\\n\\t默认\\n\\tA(圆角矩形)\\n\\tB[方角矩形]\\n\\tC{菱形}\\n\\tD((圆形))\\n\\tE>非对称]\\n```\\n\\n### 1.2.2、流程方向\\n\\n|  符号  |                含义                 |\\n| :----: | :---------------------------------: |\\n| TB /TD | 从上到下（Top to Bottom）的流程方向 |\\n|   BT   | 从下到上（Bottom to Top）的流程方向 |\\n|   LR   | 从左到右（Left to Right）的流程方向 |\\n|   RL   | 从右到左（Right to Left）的流程方向 |\\n|   HZ   |  水平方向（Horizontal）的流程方向   |\\n|   VT   |   垂直方向（Vertical）的流程方向    |\\n\\n### 1.2.3、连线方式\\n\\n- 线条\\n  - 直线:`---`\\n  - 虚线:`-.-`\\n  - 粗线:`===`\\n- 箭头\\n  - 单向箭头:`-->`\\n  - 单向圆点:`--o`\\n  - 单向叉号:`--x`\\n  - 双向箭头:`<-->`\\n  - 双向圆点:`o--o`\\n  - 双向叉号:`x--x`\\n- 标签\\n  - \\n\\n_节点名称 - - -节点名称_ \\n\\n~~~markdown\\n``mermaid\\n\\tgraph TB\\n\\t默认  --标签--- A\\n\\tA(圆角矩形) -.- B\\n\\tB[方角矩形] === C\\n\\tC{菱形} --> D\\n\\tD((圆形)) ==> E\\n\\tE>非对称] -.->A\\n```\\n~~~\\n\\n\\n\\n```mermaid\\n\\tgraph TB\\n\\t默认  --标签--- A\\n\\tA(圆角矩形) -.- B\\n\\tB[方角矩形] === C\\n\\tC{菱形} --> D\\n\\tD((圆形)) ==> E\\n\\tE>非对称] -.->A\\n```\\n\\n### 1.2.4、节点样式\\n\\n**节点类型**\\n\\n|           属性            |    类型    |\\n| :-----------------------: | :--------: |\\n|        开始：start        |   椭圆形   |\\n|         结束：end         |   椭圆形   |\\n|      操作：operation      |    矩形    |\\n|   多输入操作：parallel    |    矩形    |\\n|    条件判断：condition    |    菱形    |\\n|   输入输出：in/out put    | 平行四边形 |\\n| 预处理/子程序：subroutine |   圣旨型   |\\n\\n\\n\\n```\\nstyle 节点 样式\\n```\\n\\n~~~markdown\\n````mermaid\\n\\tgraph TB\\n\\tA(圆角矩形)\\n\\tB[方角矩形]\\n\\tstyle A fill:#f9f,stroke:#333,stroke-width:4px\\n\\tstyle B fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\\n```\\n~~~\\n\\n\\n\\n```mermaid\\n\\tgraph TB\\n\\tA(圆角矩形)\\n\\tB[方角矩形]\\n\\tstyle A fill:#f9f,stroke:#333,stroke-width:4px\\n\\tstyle B fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\\n```\\n\\n​\\t\\n\\n# 2、graph\\n\\n~~~markdown\\n```mermaid\\ngraph LR\\nA[这是graph]\\n​```\\n\\n~~~\\n\\n```mermaid\\ngraph LR\\nA[这是graph]\\n```\\n\\n```markdown\\n    graph TB\\n        c1-->a2\\n        subgraph one\\n        a1-->a2\\n        end\\n        subgraph two\\n        b1-->b2\\n        end\\n        subgraph three\\n        c1-->c2\\n        end\\n        one --> two\\n        three --> two\\n        two --> c2\\n\\n```\\n\\n\\n\\n```mermaid\\ngraph TB\\n\\tc1-->a2\\n    subgraph one\\n    a1-->a2\\n    end\\n    subgraph two\\n    b1-->b2\\n    end\\n    subgraph three\\n    c1-->c2\\n    end\\n    one --> two\\n    three --> two\\n    two --> c2\\n```\\n\\n# 3、flowchart\\n\\n~~~markdown\\n```mermaid\\n\\tflowchart LR\\n    s=>start: 开始\\n    s->\\n​```\\n如果使用flowchart未成功：\\n​```flow\\n    s=>start: 开始\\n    s->\\n​```\\n\\n~~~\\n\\n```flow\\n    s=>start: 开始\\n    s->\\n```\\n\\n```markdown\\n\\ts=>start: 开始\\n\\te=>end: 结束\\n\\top1=>operation: 操作1 \\n\\top2=>operation: 操作2 \\n\\top3=>operation: 操作3 \\n\\tpa=>parallel: 多输出操作4 \\n\\tcond=>condition: 确认？\\n\\t\\n\\ts->op1->cond\\n\\tcond(true)->op3\\n\\tcond(no)->op2(right)->op1\\n\\top3->pa\\n\\tpa(path3,right) ->e\\n\\ts@>op1({\\\"stroke\\\":\\\"Pink\\\"})@>cond({\\\"stroke\\\":\\\"Blue\\\",\\\"stroke-width\\\":10})@>op3({\\\"stroke\\\":\\\"Green\\\"})@>pa({\\\"stroke\\\":\\\"yellow\\\"})@>e({\\\"stroke\\\":\\\"red\\\",\\\"arrow-end\\\":\\\"classic-wide-long\\\"})\\n\\n```\\n\\n\\n\\n```flow\\n\\ts=>start: 开始\\n\\te=>end: 结束\\n\\top1=>operation: 操作1 \\n\\top2=>operation: 操作2 \\n\\top3=>operation: 操作3 \\n\\tpa=>parallel: 多输出操作4 \\n\\tcond=>condition: 确认？\\n\\t\\n\\ts->op1->cond\\n\\tcond(true)->op3\\n\\tcond(no)->op2(right)->op1\\n\\top3->pa\\n\\tpa(path3,right) ->e\\n\\ts@>op1({\\\"stroke\\\":\\\"Pink\\\"})@>cond({\\\"stroke\\\":\\\"Blue\\\",\\\"stroke-width\\\":10})@>op3({\\\"stroke\\\":\\\"Green\\\"})@>pa({\\\"stroke\\\":\\\"yellow\\\"})@>e({\\\"stroke\\\":\\\"red\\\",\\\"arrow-end\\\":\\\"classic-wide-long\\\"})\\n```\\n\\n- 节点定义\\n\\n  ```\\n  变量名=>节点标识: 节点显示名\\n  \\n  ```\\n\\n- 节点连线\\n\\n  ```\\n  变量名1->变量名2->...->变量名n\\n  \\n  ```\\n\\n- 连线样式\\n\\n  ```\\n  变量名m@>变量名n({\\\"key\\\":\\\"value\\\"})\\n  \\n  ```\\n\\n- 关键字\\n\\n  - yes/true：condition类型变量连接时，用于分别表示yes条件的流向\\n  - no/false：同上，表示否定条件的流向\\n  - left/right：表示连线出口在节点位置（默认下面是出口，如op3），可以跟condition变量一起用：cond(yes,right)\\n  - path1/path2/path3：parallel变量的三个出口路径（默认下面是出口）\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/d8a7839b36f1c3ce4e1f5d4ccef58aeb.jpg\",\"articleTitle\":\"使用Markdown绘制流程图：轻松可视化你的思路\",\"categoryName\":\"基础\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"markdown\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:11:57', NULL);
INSERT INTO `t_operation_log` VALUES (1740, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5b90a9d64567b6336bfad71022e89de3.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:15:49', NULL);
INSERT INTO `t_operation_log` VALUES (1741, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/333d616d82bd18e8cdd8bdea324c3702.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:16:05', NULL);
INSERT INTO `t_operation_log` VALUES (1742, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3429f5965b08a5c497cf149166641085.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:16:15', NULL);
INSERT INTO `t_operation_log` VALUES (1743, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cda7fec6ac108820e6f7428176261fee.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:18:04', NULL);
INSERT INTO `t_operation_log` VALUES (1744, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"二维码生成器，简直是信息共享的秘密武器。只需轻松输入网址、文本或联系方式，几秒钟后，你的内容就能化身为一个小小的二维码，随时随地分享。想要快速让别人获取链接？扫一扫，一切搞定！想把活动信息、优惠券、社交资料直接传递？二维码轻松解决。它将繁琐的信息转化为一个简洁、便于存储的图形，让分享变得毫不费力。随着二维码的普及，我们的交流变得更加直接和高效。本文将带你快速了解如何生成二维码，提升信息传递的便捷性。\",\"articleContent\":\"[国标](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=452EB59E906021D3BEA11419CA96FA9A)\\n\\n> 简单示例\\n>\\n> [相关资源下载](https://github.com/heyqing/practice)\\n\\n## zxing 实现\\n\\n**生成**\\n\\n```java\\n\\t/**\\n     * 生成二维码\\n     *\\n     * @param width\\n     * @param height\\n     * @param name\\n     * @param format\\n     * @param content\\n     */\\n    public static String generateQRCodeByZxing(int width, int height, String name, String format, String content) {\\n        /**\\n         * 定义二维码参数\\n         */\\n        Map<EncodeHintType, Object> hints = new HashMap<>();\\n        hints.put(EncodeHintType.CHARACTER_SET, \\\"utf-8\\\");\\n        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);\\n        hints.put(EncodeHintType.MARGIN, 2);\\n\\n        //生成二维码\\n        try {\\n            BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height);\\n            String filename = name + \\\".\\\" + format;\\n            Path filepath = Paths.get(\\\"QRCode\\\", \\\"src\\\", \\\"com\\\", \\\"heyqing\\\", \\\"generate\\\", filename);\\n            MatrixToImageWriter.writeToPath(bitMatrix, format, filepath);\\n            MatrixToImageWriter.writeToPath(bitMatrix, format, filepath);\\n            System.out.println(\\\"二维码生成完成！！！ \\\\n请前往【\\\" + filepath.toString() + \\\"】查看\\\");\\n            return filepath.toString();\\n        } catch (WriterException e) {\\n            throw new RuntimeException(e);\\n        } catch (IOException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n```\\n\\n**解析**\\n\\n```java\\n \\t/**\\n     * 解析二维码\\n     *\\n     * @param filepath\\n     * @return\\n     */\\n    public static Result parserQRCodeByZxing(String filepath) {\\n        MultiFormatReader formatReader = new MultiFormatReader();\\n        File file = new File(filepath);\\n        try {\\n            BufferedImage image = ImageIO.read(file);\\n            BinaryBitmap binaryBitmap = new BinaryBitmap(\\n                    new HybridBinarizer(new BufferedImageLuminanceSource(image)));\\n            /**\\n             * 定义二维码参数\\n             */\\n            Map<DecodeHintType, Object> hints = new HashMap<>();\\n            hints.put(DecodeHintType.CHARACTER_SET, \\\"utf-8\\\");\\n\\n            Result result = formatReader.decode(binaryBitmap, hints);\\n            System.out.println(\\\"解析结果：\\\" + result.toString());\\n            System.out.println(\\\"二维码格式：\\\" + result.getBarcodeFormat());\\n            System.out.println(\\\"二维码文本内容：\\\" + result.getText());\\n            image.flush();\\n            return result;\\n        } catch (IOException e) {\\n            throw new RuntimeException(e);\\n        } catch (NotFoundException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n```\\n\\n**测试**\\n\\n```java\\n\\t/**\\n     * zxing\\n     */\\n    private static void zxingTest() {\\n        String filepath = QRCodeByZxing.generateQRCodeByZxing(300, 300,\\n                \\\"github\\\", \\\"png\\\", \\\"https://github.com/heyqing\\\");\\n        Result result = QRCodeByZxing.parserQRCodeByZxing(filepath);\\n        System.out.println(result.toString());\\n    }\\n```\\n\\n![1.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5b90a9d64567b6336bfad71022e89de3.png)\\n## QR code 实现\\n\\n**生成**\\n\\n```java\\n\\t/**\\n     * 生成二维码\\n     *\\n     * @param name\\n     * @param format\\n     * @param content\\n     * @return\\n     */\\n    public static String generateQRCodeByQRCode(String name, String format, String content) {\\n        Qrcode qrcode = new Qrcode();\\n        /**\\n         * 纠错等级，建议 M\\n         */\\n        qrcode.setQrcodeErrorCorrect(\'M\');\\n        /**\\n         * 字符类型，A：代表字母，N：代表数字，B:代表其他字符\\n         */\\n        qrcode.setQrcodeEncodeMode(\'B\');\\n        /**\\n         * 版本，建议 7\\n         */\\n        int version = 7;\\n        qrcode.setQrcodeVersion(version);\\n\\n        int width = 67 + 12 * (version - 1);\\n        int height = 67 + 12 * (version - 1);\\n        /**\\n         * 设置绘图基础面板\\n         */\\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\\n        Graphics2D graphics = image.createGraphics();\\n        graphics.setBackground(Color.WHITE);\\n        graphics.setColor(Color.BLACK);\\n        graphics.clearRect(0, 0, width, height);\\n        /**\\n         * 偏移量\\n         */\\n        int pixoff = 2;\\n        byte[] contentBytes = content.getBytes();\\n        /**\\n         * 字节填充绘图\\n         */\\n        if (contentBytes.length > 0 && contentBytes.length < 120) {\\n            boolean[][] s = qrcode.calQrcode(contentBytes);\\n            for (int i = 0; i < s.length; i++) {\\n                for (int j = 0; j < s.length; j++) {\\n                    if (s[j][i]) {\\n                        graphics.fillRect(j * 3 + pixoff, i * 3 + pixoff, 3, 3);\\n                    }\\n                }\\n            }\\n        }\\n        graphics.dispose();\\n        image.flush();\\n        String filename = name + \\\".\\\" + format;\\n        String path = Paths.get(\\\"QRCode\\\", \\\"src\\\", \\\"com\\\", \\\"heyqing\\\", \\\"generate\\\", filename).toString();\\n        File filepath = new File(path);\\n        try {\\n            ImageIO.write(image, format, filepath);\\n        } catch (IOException e) {\\n            throw new RuntimeException(e);\\n        }\\n        System.out.println(\\\"二维码生成完成！！！ \\\\n请前往【\\\" + filepath.toString() + \\\"】查看\\\");\\n        return filepath.toString();\\n    }\\n\\n```\\n\\n\\n\\n**解析**\\n\\n```java\\n\\t/**\\n     * 解析二维码\\n     *\\n     * @param filepath\\n     * @return\\n     */\\n    public static String parserQRCodeByQRCode(String filepath) {\\n        File file = new File(filepath);\\n        try {\\n            BufferedImage bufferedImage = ImageIO.read(file);\\n            QRCodeDecoder qrCodeDecoder = new QRCodeDecoder();\\n            String result = new String(qrCodeDecoder.decode(new MyQRCodeImage(bufferedImage)), \\\"gb2312\\\");\\n            System.out.println(\\\"解析结果：\\\" + result);\\n            bufferedImage.flush();\\n            return result;\\n        } catch (IOException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n```\\n\\n\\n\\n**测试**\\n\\n```java\\n/**\\n     * qrcode\\n     */\\n    private static void qrcodeTest() {\\n        String filepath = QRCodeByQRCode.generateQRCodeByQRCode(\\\"gitee\\\", \\\"png\\\", \\\"https://gitee.com/heyqing\\\");\\n        String res = QRCodeByQRCode.parserQRCodeByQRCode(filepath);\\n        System.out.println(res);\\n    }\\n```\\n\\n![2.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/333d616d82bd18e8cdd8bdea324c3702.png)\\n## jQuery 实现\\n\\n```jsp\\n<%@ page language=\\\"java\\\" contentType=\\\"text/html; charset=UTF-8\\\" pageEncoding=\\\"UTF-8\\\" %>\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>jQuery-generate-qrcode</title>\\n    <script type=\\\"text/javascript\\\" src=\\\"<%=request.getContextPath() %> /js/jquery.min.js\\\"></script>\\n    <script type=\\\"text/javascript\\\" src=\\\"<%=request.getContextPath() %> /js/jquery.qrcode.min.js\\\"></script>\\n</head>\\n<body>\\n<h1>生成的二维码如下：</h1><br>\\n<div id=\\\"qrcode\\\"></div>\\n<script type=\\\"text/javascript\\\">\\n    jQuery(\'#qrcode\').qrcode(\\\"https://blog.csdn.net/heyiqingsong\\\")\\n</script>\\n</body>\\n</html>\\n```\\n\\n![3.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3429f5965b08a5c497cf149166641085.png)\\n## 更多\\n\\n二维的生成还有众多的样式可选择，敬请期待更多！！！\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cda7fec6ac108820e6f7428176261fee.jpg\",\"articleTitle\":\"生成二维码：把链接变成小方块，轻松分享一切！\",\"categoryName\":\"基础\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"二维码\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:20:08', NULL);
INSERT INTO `t_operation_log` VALUES (1745, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5d46b8df7ab2d1276af7d9871b36d353.gif\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:23:29', NULL);
INSERT INTO `t_operation_log` VALUES (1746, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cb0d3f51a90665db2a84ab4d67437059.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:24:00', NULL);
INSERT INTO `t_operation_log` VALUES (1747, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/d84f4206dbe76de6dc3d64794f860ee5.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:28:32', NULL);
INSERT INTO `t_operation_log` VALUES (1748, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"排序算法是计算机科学中的基础概念，用于将一组数据按照特定的顺序排列。经典的排序算法有很多，其中每一种都有其独特的特点和应用场景。从简单易懂的冒泡排序到高效快速的快速排序，这些算法在不同的数据量和需求下展现出不同的表现。尽管它们的时间复杂度各异，但每种排序方法都在算法学习和实际开发中占据重要地位。本文将为你介绍几种经典排序算法，包括冒泡排序、选择排序、插入排序、快速排序等，帮助你理解每种算法的原理、优缺点及其适用场景。\",\"articleContent\":\"# 十大经典排序\\n\\n## 简介\\n\\n  这里所说的十大经典排序指的分别为：冒泡排序（Bubble Sort）、选择排序（Selection Sort）、插入排序（Insertion Sort）、快速排序（Quick Sort）、归并排序（Merge Sort）、堆排序（Heap Sort）、希尔排序（Shell Sort）、计数排序（Counting Sort）、基数排序（Radix Sort）、桶排序（Bucket Sort）\\n\\n这些排序算法根据不同的特点可以被分为以下几类：\\n\\n- **比较排序**：通过比较元素之间的大小关系来进行排序。包括冒泡排序、选择排序、插入排序、快速排序、归并排序、堆排序、希尔排序。\\n- **非比较排序**：不通过比较元素的大小关系来进行排序，而是通过其他方法确定元素的顺序。包括计数排序、基数排序、桶排序。\\n\\n下面我会对这十种算法依次进行说明\\n\\n> 文中提到代码具体见 :\\n> [Code](https://github.com/heyqing/csdn/tree/master/Algorithm/sort)\\n>\\n\\n\\n\\n## 冒泡排序（Bubble Sort）\\n\\n### 算法描述\\n\\n冒泡排序是一种简单的排序算法，它通过重复地遍历要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。遍历数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。\\n\\n### 算法步骤\\n\\n1. 比较相邻的元素。如果第一个比第二个大（升序排序），就交换它们两个。\\n2. 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\\n3. 针对所有的元素重复以上的步骤，除了最后一个。\\n4. 重复步骤1~3，直到排序完成。\\n\\n### 时间复杂度\\n\\n- 最好情况（已排序）：$O(n)$，当输入的数组已经是正序时，冒泡排序只需遍历一次数组即可。\\n- 最坏情况（逆序）：$O(n^2)$，当输入的数组是逆序时，需要进行最大次数的比较和交换。\\n- 平均情况：$O(n^2)$，平均情况下，冒泡排序的时间复杂度也是$O(n^2)$。\\n\\n### 空间复杂度\\n\\n- 常数额外空间：$O(1)$，冒泡排序只需要一个用于交换的临时变量，所以它的空间复杂度是$O(1)$。\\n\\n### 动态解释\\n\\n![bubble.gif](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5d46b8df7ab2d1276af7d9871b36d353.gif)\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:BubbleSort\\n * Package:com.heyqing\\n * Description:\\n * 冒泡排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class BubbleSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        bubble(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void bubble(int[] nums) {\\n        boolean flag; // 内层是否有序标志\\n        //第一层 不用判断最后一个数\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            flag = false;\\n            //第二层 不用判断最后i躺个数\\n            for (int j = 0; j < nums.length - 1 - i; j++) {\\n                //如果前一个数 大于 后一个数\\n                if (nums[j] > nums[j + 1]) {\\n                    //交换两个数\\n                    swap(nums, j);\\n                    flag = true;\\n                }\\n            }\\n            // 如果内层循环没有进行交换，说明数组已经有序，可以提前结束排序\\n            if (!flag) break;\\n        }\\n    }\\n\\n    /**\\n     * 交换两个数\\n     * <p>\\n     * index 与 index + 1 进行交换\\n     *\\n     * @param nums\\n     * @param index\\n     */\\n    private static void swap(int[] nums, int index) {\\n        /*\\n         若 a = nums[index] , b = nums[index + 1]\\n         第一行： a = a ^ b 此时： a = a ^ b ,b = b\\n         第二行： b = (a ^ b) ^ b = a 此时： a = a ^ b , b = a\\n         第三行： a = (a ^ b) ^ a = b 此时： a = b , b = a 完成交换\\n         此算法实现了不使用额外空间完成两数交换\\n         注意：使用此算法时要保证 a , b 不同内存空间，错误用例见附录\\n         */\\n        nums[index] = nums[index] ^ nums[index + 1];\\n        nums[index + 1] = nums[index] ^ nums[index + 1];\\n        nums[index] = nums[index] ^ nums[index + 1];\\n    }\\n}\\n```\\n\\n## 选择排序（Selection Sort）\\n\\n### 算法描述\\n\\n选择排序是一种简单直观的排序算法。该算法每次循环从未排序的部分找到最小（或最大）的元素，将其放到已排序部分的末尾。这个过程重复进行，直到整个数组排序完成。\\n\\n### 算法步骤\\n\\n1. 在未排序序列中找到最小（或最大）元素的索引。\\n2. 将最小（或最大）元素与未排序序列的第一个元素交换位置。\\n3. 在剩下的未排序元素中重复步骤1和2，直到所有元素均排序完毕。\\n\\n### 时间复杂度\\n\\n- 最好、最坏和平均情况的时间复杂度都是$ O(n^2)$，因为选择排序需要进行大约 $n/2$ 次的交换操作，并且每次交换操作都需要遍历剩余的未排序部分。\\n\\n### 空间复杂度\\n\\n- 空间复杂度是 $O(1)$，因为选择排序是在原地进行的，不需要额外的存储空间。\\n\\n### 动态解释\\n\\n数组：[64, 25, 12, 22, 11]\\n\\n1. 第一轮找到最小元素11，与第一个元素64交换位置，数组变为：[11, 25, 12, 22, 64]\\n2. 第二轮找到除11之外的最小元素12，与第二个元素25交换位置，数组变为：[11, 12, 25, 22, 64]\\n3. 第三轮找到除11和12之外的最小元素22，与第三个元素25交换位置，数组变为：[11, 12, 22, 25, 64]\\n4. 最后一轮，25和64已经是有序的，不需要交换。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:SelectionSort\\n * Package:com.heyqing\\n * Description:\\n * 选择排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class SelectionSort {\\n\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        selection(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void selection(int[] nums) {\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            int minTemp = i; // 找到从i开始到数组末尾的最小元素的索引\\n            for (int j = i + 1; j < nums.length; j++) {\\n                if (nums[j] < nums[minTemp]) minTemp = j;\\n            }\\n            // 将找到的最小元素与第i个位置的元素交换\\n            swap(nums, i, minTemp);\\n        }\\n    }\\n\\n    /**\\n     * 交换两个数 常规做法\\n     *\\n     * @param nums\\n     * @param i\\n     * @param j\\n     */\\n    private static void swap(int[] nums, int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n```\\n\\n## 插入排序（Insertion Sort）\\n\\n### 算法描述\\n\\n插入排序是一种简单的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\\n\\n### 算法步骤\\n\\n1. 从第一个元素开始，该元素可以认为已经被排序。\\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描。\\n3. 如果该元素（已排序）大于新元素，将该元素移到下一位置。\\n4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置。\\n5. 将新元素插入到该位置后。\\n6. 重复步骤2~5。\\n\\n### 时间复杂度\\n\\n- 最好情况（数组已经是有序的）：$O(n)$\\n- 最坏情况（数组是完全逆序的）：$O(n^2)$\\n- 平均情况：$O(n^2)$\\n\\n### 空间复杂度\\n\\n- 空间复杂度是 $O(1)$，因为插入排序是在原地进行的，不需要额外的存储空间。\\n\\n### 动态解释\\n\\n数组：[5, 2, 4, 6, 1, 3]\\n\\n1. 初始状态：[5]（5是第一个元素，已经有序）\\n2. 插入2到5之前：[2, 5]\\n3. 插入4到[2, 5]之前，需要将5向后移动：[2, 4, 5]\\n4. 插入6到[2, 4, 5]之后，因为6比5大：[2, 4, 5, 6]\\n5. 插入1到[2, 4, 5, 6]之前，需要将所有元素向后移动：[1, 2, 4, 5, 6]\\n6. 插入3到[1, 2, 4, 5, 6]之前，需要将4和5向后移动：[1, 2, 3, 4, 5, 6]\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:InsertionSort\\n * Package:com.heyqing\\n * Description:\\n * 插入排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class InsertionSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        insertion(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void insertion(int[] nums) {\\n        for (int i = 1; i < nums.length; i++) {\\n            int key = nums[i];\\n            int j = i - 1;\\n            //将大于key的元素向后移动\\n            while (j >= 0 && nums[j] > key) {\\n                nums[j + 1] = nums[j];\\n                j -= 1;\\n            }\\n            //插入key到正确的位置\\n            nums[j + 1] = key;\\n        }\\n    }\\n}\\n```\\n\\n## 快速排序（Quick Sort）\\n\\n### 算法描述\\n\\n快速排序是一种分而治之的排序算法。它通过选取一个“基准”元素，将数组分成两个子数组，一个包含小于基准的元素，另一个包含大于或等于基准的元素，然后递归地对这两个子数组进行快速排序。\\n\\n### V1.0\\n\\n#### 算法步骤\\n\\n使用最后一个数 n 作为划分值\\n使得n前面的所有数以荷兰国旗式划分开\\n划分完后使用大于区域的第一个数与 n 交换\\n然后对 n 左右区域做递归处理\\n\\n#### 时间复杂度\\n\\n- 最好情况：$O(n log n)$，每次分区操作都能将数组分为两个大小相等的子数组。\\n- 最坏情况：$O(n^2)$，当每次分区操作只减少一个元素时，例如数组已经是有序的。\\n\\n#### 空间复杂度\\n\\n- 空间复杂度是$ O(log n)$，这是因为快速排序的递归性质，需要使用递归栈空间。\\n\\n### V2.0\\n\\n#### 算法步骤\\n\\n使用最后一个数 n 作为划分值\\n使得n前面的所有数以荷兰国旗式划分开\\n划分完后使用大于区域的第一个数与 n 交换\\n然后对 n 左右区域做递归处理\\n与第一版不同的是将等于部分置于中间\\n\\n#### 时间复杂度\\n\\n- 最好情况：$O(n log n)$，每次分区操作都能将数组分为两个大小相等的子数组。\\n- 最坏情况：$O(n^2)$，当每次分区操作只减少一个元素时，例如数组已经是有序的。\\n\\n#### 空间复杂度\\n\\n- 空间复杂度是$ O(log n)$，这是因为快速排序的递归性质，需要使用递归栈空间。\\n\\n### V3.0\\n\\n#### 算法步骤\\n\\n随机选择数组中的一个数作为分界数\\n使得n前面的所有数以荷兰国旗式划分开\\n划分完后使用大于区域的第一个数与 n 交换\\n然后对 n 左右区域做递归处理\\n与第二版不同的是随机选取数EX = n log n\\n\\n#### 时间复杂度\\n\\n- 最好情况：$O(n log n)$，每次分区操作都能将数组分为两个大小相等的子数组。\\n- 最坏情况：$O(n log n)$，当每次分区操作只减少一个元素时，例如数组已经是有序的。\\n\\n#### 空间复杂度\\n\\n- 空间复杂度是$ O(log n)$，这是因为快速排序的递归性质，需要使用递归栈空间。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.Arrays;\\nimport java.util.Random;\\n\\n/**\\n * ClassName:QuickSort\\n * Package:com.heyqing\\n * Description:\\n * 快速排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class QuickSort {\\n\\n    /**\\n     * 外部调用接口 - 第一版本\\n     *\\n     * @param source\\n     */\\n    public static void sortV1(int[] source) {\\n        quickV1(source);\\n    }\\n\\n    /**\\n     * 外部调用接口 - 第二版本\\n     *\\n     * @param source\\n     */\\n    public static void sortV2(int[] source) {\\n        quickV2(source);\\n    }\\n\\n    /**\\n     * 外部调用接口 - 第三版本\\n     *\\n     * @param source\\n     */\\n    public static void sortV3(int[] source) {\\n        quickV3(source);\\n    }\\n\\n    /**\\n     * 外部调用接口 - Java库函数\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        quick(source);\\n    }\\n\\n    /**\\n     * 排序具体实现 - v1\\n     *\\n     * @param nums\\n     */\\n    private static void quickV1(int[] nums) {\\n        /*\\n         使用最后一个数 n 作为划分值\\n         使得n前面的所有数以荷兰国旗式划分开\\n         划分完后使用大于区域的第一个数与 n 交换\\n         然后对 n 左右区域做递归处理\\n         */\\n        int start = 0, end = nums.length;\\n        achieveFunctionQuickV1(nums, start, end);\\n    }\\n\\n    /**\\n     * 实现函数 - v1\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     */\\n    private static void achieveFunctionQuickV1(int[] nums, int start, int end) {\\n        if (start >= end) return;\\n        int position = DutchFlagV1(nums, start, end);\\n        swap(nums, position + 1, end - 1);\\n        //左边\\n        achieveFunctionQuickV1(nums, start, position + 1);\\n        //右边\\n        achieveFunctionQuickV1(nums, position + 2, end);\\n    }\\n\\n\\n    /**\\n     * 排序具体实现 - v2\\n     *\\n     * @param nums\\n     */\\n    private static void quickV2(int[] nums) {\\n        /*\\n         使用最后一个数 n 作为划分值\\n         使得n前面的所有数以荷兰国旗式划分开\\n         划分完后使用大于区域的第一个数与 n 交换\\n         然后对 n 左右区域做递归处理\\n         与第一版不同的是将等于部分置于中间\\n         */\\n        int start = 0, end = nums.length;\\n        achieveFunctionQuickV2(nums, start, end);\\n    }\\n\\n    /**\\n     * 实现函数 - v2\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     */\\n    private static void achieveFunctionQuickV2(int[] nums, int start, int end) {\\n        if (start >= end) return;\\n        //一最后一个数为分界数，返回第一个大于和最后一个小于分界数的下标\\n        int[] positions = DutchFlagV2(nums, start, end);\\n        //左边\\n        achieveFunctionQuickV2(nums, start, positions[0]);\\n        //右边\\n        achieveFunctionQuickV2(nums, positions[1], end);\\n    }\\n\\n\\n    /**\\n     * 排序具体实现 - v3\\n     *\\n     * @param nums\\n     */\\n    private static void quickV3(int[] nums) {\\n        /*\\n         随机选择数组中的一个数作为分界数\\n         使得n前面的所有数以荷兰国旗式划分开\\n         划分完后使用大于区域的第一个数与 n 交换\\n         然后对 n 左右区域做递归处理\\n         与第二版不同的是随机选取数EX = n log n\\n         */\\n        int start = 0, end = nums.length;\\n        achieveFunctionQuickV3(nums, start, end);\\n    }\\n\\n    /**\\n     * 实现函数 - v3\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     */\\n    private static void achieveFunctionQuickV3(int[] nums, int start, int end) {\\n        if (start >= end) return;\\n        //随机选取\\n        Random r = new Random();\\n        int randomIndex = r.nextInt(end - start) + start;\\n        swap(nums, randomIndex, end - 1);\\n        int[] positions = DutchFlagV3(nums, start, end);\\n        //左边\\n        achieveFunctionQuickV3(nums, start, positions[0] + 1);\\n        //右边\\n        achieveFunctionQuickV3(nums, positions[1], end);\\n    }\\n\\n\\n    /**\\n     * 排序具体实现 - java依赖库\\n     * <p>\\n     * 双轴快速排序（Dual-Pivot Quicksort）算法\\n     *\\n     * @param nums\\n     */\\n    private static void quick(int[] nums) {\\n        /*\\n         Java中的Arrays.sort方法底层使用的排序算法依赖于数组的类型和大小。对于基本数据类型数组（如int[], long[]等）\\n         Arrays.sort使用的是双轴快速排序（Dual-Pivot Quicksort）算法，这是一种优化过的快速排序算法\\n         由Vladimir Yaroslavskiy、Jon Bentley和Joshua Bloch提出\\n         它在许多数据集上提供了接近O(n log n)的性能，通常比传统的单轴快速排序更快\\n         */\\n        Arrays.sort(nums);\\n    }\\n\\n\\n    /**\\n     * 荷兰国旗算法 - v1\\n     * <p>\\n     * 给定一个数组 nums 数组中的最后一个数为 target\\n     * <p>\\n     * 要求将数组 nums 中所有小于等于 target 的数置于左侧，大于的数置于右侧\\n     * <p>\\n     * 返回分界值 position ：小于等于 position 的数值为 小于等于 target 的值\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     * @return\\n     */\\n    private static int DutchFlagV1(int[] nums, int start, int end) {\\n        int len = end - start, position = start - 1, target = nums[end - 1];\\n        for (int i = start; i < len - 1; i++) {\\n            if (nums[i] <= target) {\\n                swap(nums, i, position + 1);\\n                position++;\\n            }\\n        }\\n        return position;\\n    }\\n\\n\\n    /**\\n     * 荷兰国旗算法 - v2\\n     * <p>\\n     * 给定一个数组 nums 数组中的最后一个数为 target\\n     * <p>\\n     * 要求将数组 nums 中所有小于 target 的数置于左侧，等于的数置于中间，大于的数置于右侧\\n     * <p>\\n     * 返回分界值 positions ：小于的边界，大于的边界\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     * @return\\n     */\\n    private static int[] DutchFlagV2(int[] nums, int start, int end) {\\n        int target = nums[end - 1];\\n        //初始化边界数组\\n        int[] positions = new int[]{start - 1, end};\\n        for (int i = start; i < positions[1]; i++) {\\n            if (nums[i] < target) {\\n                //小于\\n                swap(nums, i, positions[0] + 1);\\n                positions[0]++;\\n            } else if (nums[i] > target) {\\n                //大于\\n                swap(nums, i, positions[1] - 1);\\n                positions[1]--;\\n                i--;\\n            }\\n        }\\n        return positions;\\n    }\\n\\n    /**\\n     * 荷兰国旗算法 - v3\\n     * <p>\\n     * 给定一个数组 nums 数组中的随机一个数为 target\\n     * <p>\\n     * 要求将数组 nums 中所有小于 target 的数置于左侧，等于的数置于中间，大于的数置于右侧\\n     * <p>\\n     * 返回分界值 positions ：小于的边界，大于的边界\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     * @return\\n     */\\n    private static int[] DutchFlagV3(int[] nums, int start, int end) {\\n        int target = nums[end - 1];\\n        //初始化边界数组\\n        int[] positions = new int[]{start - 1, end};\\n        for (int i = start; i < positions[1]; i++) {\\n            if (nums[i] < target) {\\n                //小于\\n                swap(nums, i, positions[0] + 1);\\n                positions[0]++;\\n            } else if (nums[i] > target) {\\n                //大于\\n                swap(nums, i, positions[1] - 1);\\n                positions[1]--;\\n                i--;\\n            }\\n        }\\n        return positions;\\n    }\\n\\n    /**\\n     * 交换两个数\\n     *\\n     * @param nums\\n     * @param i\\n     * @param j\\n     */\\n    private static void swap(int[] nums, int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n\\n```\\n\\n## 归并排序（Merge Sort）\\n\\n### 算法描述\\n\\n归并排序是一种经典的排序算法，它同样采用分而治之的策略。归并排序将数组分成若干个小组，然后对每个小组进行排序，最后将这些小组合并成一个有序的数组。\\n\\n### 算法步骤\\n\\n1. 将数组分成两半。\\n2. 递归地将这两半分别排序。\\n3. 合并两个已排序的半部分。\\n\\n### 时间复杂度\\n\\n- 最好、最坏和平均情况：$O(n log n)$，因为归并排序总是将数组分成两半，然后合并，合并操作的时间复杂度是线性的，而分治过程的时间复杂度是对数级的。\\n\\n### 空间复杂度\\n\\n- 空间复杂度是 $O(n)$，因为归并排序需要与原数组相同大小的额外空间来存储合并后的数组。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:MergeSort\\n * Package:com.heyqing\\n * Description:\\n * 归并排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class MergeSort {\\n\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        merge(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void merge(int[] nums) {\\n        int start = 0, end = nums.length - 1;\\n        achieveFuncMerge(nums, start, end);\\n    }\\n\\n    /**\\n     * 实现函数\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     */\\n    private static void achieveFuncMerge(int[] nums, int start, int end) {\\n        if (start >= end) return;\\n        //找到中间索引 防止溢出\\n        int mid = start + ((end - start) >> 1);\\n        //分别对左右两部分进行归并排序\\n        //左边\\n        achieveFuncMerge(nums, start, mid);\\n        //右边\\n        achieveFuncMerge(nums, mid + 1, end);\\n        //合并两个已排序的部分\\n        mergeSortNums(nums, start, mid, end);\\n    }\\n\\n    /**\\n     * 合并两个已排序的部分\\n     *\\n     * @param nums\\n     * @param start\\n     * @param mid\\n     * @param end\\n     */\\n    private static void mergeSortNums(int[] nums, int start, int mid, int end) {\\n        //计算两个子数组的长度\\n        int len1 = mid - start + 1;\\n        int len2 = end - mid;\\n        //创建临时数组\\n        int[] L = new int[len1];\\n        int[] R = new int[len2];\\n        //将数据拷贝到临时数组中\\n        System.arraycopy(nums, start, L, 0, len1);\\n        System.arraycopy(nums, mid + 1, R, 0, len2);\\n        //合并临时数组\\n        int i = 0, j = 0;\\n        int k = start;\\n        while (i < len1 && j < len2) {\\n            if (L[i] <= R[j]) {\\n                nums[k] = L[i];\\n                i++;\\n            } else {\\n                nums[k] = R[j];\\n                j++;\\n            }\\n            k++;\\n        }\\n        // 拷贝L中剩余的元素\\n        while (i < len1) {\\n            nums[k] = L[i];\\n            i++;\\n            k++;\\n        }\\n        // 拷贝R中剩余的元素\\n        while (j < len2) {\\n            nums[k] = R[j];\\n            j++;\\n            k++;\\n        }\\n    }\\n}\\n```\\n\\n## 堆排序（Heap Sort）\\n\\n### 算法描述\\n\\n堆排序是一种基于比较的排序算法。它利用堆这种数据结构的特性来进行排序，堆是一种近似完全二叉树的结构，并同时满足堆积的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。\\n\\n### 算法步骤\\n\\n1. **建堆（Heapify）**：将无序的输入数据构造成一个最大堆（或最小堆），确保每个父节点的值都大于或等于其子节点的值（最大堆）。\\n2. **交换和调整**：将堆顶元素（最大值或最小值）与堆的最后一个元素交换，然后减少堆的大小，对剩余的堆进行调整，使其满足堆的性质。\\n3. **重复交换和调整**：重复上述交换和调整步骤，直到堆的大小为1，此时整个数组已经有序。\\n\\n### 时间复杂度\\n\\n- 最好、最坏和平均情况：$O(n log n)$，因为建堆的时间复杂度是$O(n)$，每次调整堆的时间复杂度是$O(log n)$，而需要调整$n-1$次。\\n\\n### 空间复杂度\\n\\n- 空间复杂度是$O(1)$，因为堆排序是在原地进行排序，不需要额外的存储空间。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:HeapSort\\n * Package:com.heyqing\\n * Description:\\n * 堆排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class HeapSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        heap(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void heap(int[] nums) {\\n        int n = nums.length;\\n        //构建堆\\n        for (int i = n / 2 - 1; i >= 0; i--) {\\n            heapify(nums, n, i);\\n        }\\n        //一个个从堆顶取出元素\\n        for (int i = n - 1; i >= 0; i--) {\\n            // 当前堆顶元素（最大值）与最后一个元素交换\\n            swap(nums, i, 0);\\n            //调整剩余堆\\n            heapify(nums, i, 0);\\n        }\\n    }\\n\\n    /**\\n     * 堆化\\n     *\\n     * @param nums\\n     * @param n\\n     * @param i\\n     */\\n    private static void heapify(int[] nums, int n, int i) {\\n        int largest = i; // 初始化最大元素索引为根节点\\n        int left = 2 * i + 1; // 左子节点\\n        int right = 2 * i + 2; // 右子节点\\n        // 如果左子节点大于根节点\\n        if (left < n && nums[left] > nums[largest]) {\\n            largest = left;\\n        }\\n        // 如果右子节点比最大元素还大\\n        if (right < n && nums[right] > nums[largest]) {\\n            largest = right;\\n        }\\n        // 如果最大元素不是根节点\\n        if (largest != i) {\\n            swap(nums, i, largest);\\n            // 递归地调整受影响的子树\\n            heapify(nums, n, largest);\\n        }\\n    }\\n\\n    /**\\n     * 交换两个数\\n     *\\n     * @param nums\\n     * @param i\\n     * @param j\\n     */\\n    private static void swap(int[] nums, int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n```\\n\\n## 希尔排序（Shell Sort）\\n\\n### 算法描述\\n\\n希尔排序，也称为缩小增量排序，是一种插入排序的改进版本。它通过比较距离较远的元素来工作，其核心理念是使数组中任意间隔为h的元素都是有序的。这样的数组被称为h有序数组。希尔排序通过逐渐减小h的值，最终使用插入排序将数组完全排序。\\n\\n### 算法步骤\\n\\n1. 选择一个增量序列t1, t2, …, tk，其中ti > tj，tk = 1。\\n2. 根据当前增量ti，将待排序序列分成若干个长度为m的子序列，所有距离为ti的元素被分为同一个子序列。\\n3. 分别对各子序列进行直接插入排序。\\n4. 然后缩小增量，重复上述子序列划分和排序工作。\\n5. 当增量缩减至1时，整个文件恰被分成一组，算法便终止。\\n\\n### 时间复杂度\\n\\n- 最好情况：$O(n log^2 n)$\\n- 最坏情况：$O(n(log n)^2)$\\n- 平均情况：依赖于增量序列的选择，通常在$O(n^(1.3))$到$O(n^(2))$之间。\\n\\n### 空间复杂度\\n\\n- 空间复杂度是$O(1)$，因为希尔排序是在原地进行排序，不需要额外的存储空间。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:ShellSort\\n * Package:com.heyqing\\n * Description:\\n * 希尔排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class ShellSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        shell(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void shell(int[] nums) {\\n        int n = nums.length;\\n        //初始增量，一般取数组长度的一半\\n        for (int i = n / 2; i > 0; i /= 2) {\\n            //对每个子序列进行插入排序\\n            for (int j = i; j < n; j++) {\\n                int temp = nums[j];\\n                int k;\\n                for (k = j; k >= i && nums[k - i] > temp; k -= i) {\\n                    nums[k] = nums[k - i];\\n                }\\n                nums[k] = temp;\\n            }\\n        }\\n    }\\n}\\n```\\n\\n## 计数排序（Counting Sort）\\n\\n### 算法描述\\n\\n计数排序是一种非比较型的整数排序算法。它将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\\n\\n### 算法步骤\\n\\n1. 找出待排序的数组中最大和最小的元素。\\n2. 统计数组中每个值为i的元素出现的次数，存入数组C的第i项。\\n3. 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）。\\n4. 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。\\n\\n### 时间复杂度\\n\\n- 最好、最坏和平均情况的时间复杂度都是O(n+k)，其中n是数组中元素的个数，k是数组中最大值与最小值的差。\\n\\n### 空间复杂度\\n\\n- 空间复杂度为O(n+k)，需要额外的数组来存储计数和输出数组。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:CountingSort\\n * Package:com.heyqing\\n * Description:\\n * 计数排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class CountingSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        counting(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void counting(int[] nums) {\\n        /*\\n        找出最大值max，然后开辟 max + 1 大小的空间计数\\n        该算法局限与待比较数的大小规模\\n         */\\n        //找出数组中的最大值\\n        int max = findMax(nums);\\n        //初始化计数数组\\n        int[] count = new int[max + 1];\\n        for (int i = 0; i < nums.length; i++) {\\n            count[nums[i]]++;\\n        }\\n        //累加计数数组\\n        for (int i = 1; i < count.length; i++) {\\n            count[i] += count[i - 1];\\n        }\\n        //反向填充目标数组\\n        int[] output = new int[nums.length];\\n        for (int i = nums.length - 1; i >= 0; i--) {\\n            output[count[nums[i]] - 1] = nums[i];\\n            count[nums[i]]--;\\n        }\\n        //将排序后的数组复制回原数组\\n        System.arraycopy(output, 0, nums, 0, nums.length);\\n    }\\n\\n    /**\\n     * 找出数组中的最大数\\n     *\\n     * @param nums\\n     * @return\\n     */\\n    private static int findMax(int[] nums) {\\n        int max = nums[0];\\n        for (int i = 1; i < nums.length; i++) {\\n            if (nums[i] > max) max = nums[i];\\n        }\\n        return max;\\n    }\\n}\\n```\\n\\n## 基数排序（Radix Sort）\\n\\n### 算法描述\\n\\n基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。\\n\\n### 算法步骤\\n\\n1. 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。\\n2. 从最低位开始，依次进行一次排序。\\n3. 从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。\\n\\n### 时间复杂度\\n\\n- 最好、最坏和平均情况的时间复杂度都是$O(n*k)$，其中n是数组中元素的个数，k是数组中最大值的位数。\\n\\n### 空间复杂度\\n\\n- 空间复杂度为$O(n+k)$，其中n是数组中元素的个数，k是基数（例如十进制中k为10，即0-9）。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:RadixSort\\n * Package:com.heyqing\\n * Description:\\n * 基数排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class RadixSort {\\n\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        radix(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void radix(int[] nums) {\\n        int max = findMax(nums), n = nums.length;\\n        for (int i = 1; max / i > 0; i *= 10) {\\n            achieveFuncRadix(nums, n, i);\\n        }\\n    }\\n\\n    /**\\n     * 实现函数\\n     *\\n     * @param nums\\n     * @param n\\n     * @param exp\\n     */\\n    private static void achieveFuncRadix(int[] nums, int n, int exp) {\\n        int[] output = new int[n];\\n        int i;\\n        int[] count = new int[10];\\n        for (i = 0; i < n; i++)\\n            count[(nums[i] / exp) % 10]++;\\n        for (i = 1; i < 10; i++)\\n            count[i] += count[i - 1];\\n        for (i = n - 1; i >= 0; i--) {\\n            output[count[(nums[i] / exp) % 10] - 1] = nums[i];\\n            count[(nums[i] / exp) % 10]--;\\n        }\\n        System.arraycopy(output, 0, nums, 0, nums.length);\\n    }\\n\\n    /**\\n     * 找出数组中的最大数\\n     *\\n     * @param nums\\n     * @return\\n     */\\n    private static int findMax(int[] nums) {\\n        int max = nums[0];\\n        for (int i = 1; i < nums.length; i++) {\\n            if (nums[i] > max) max = nums[i];\\n        }\\n        return max;\\n    }\\n}\\n\\n```\\n\\n## 桶排序（Bucket Sort）\\n\\n### 算法描述\\n\\n桶排序是一种将待排序数据分到几个有序的桶里，每个桶里的数据再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序），最后将各桶的数据依次取出，组成的序列就是有序的了。\\n\\n### 算法步骤\\n\\n1. 设置一个定量的数组当作空桶。\\n2. 遍历输入数据，并且把数据一个一个放到对应的桶里去。\\n3. 对每个不是空的桶进行排序。\\n4. 从不是空的桶里把排好序的数据拼接起来。\\n\\n### 时间复杂度\\n\\n- 最好情况：$O(n + k)$，其中n是数组中元素的个数，k是桶的数量。当输入数据均匀分布时，每个桶的元素数量接近平衡。\\n- 最坏情况：$O(n^2$)，当输入数据极度不均匀分布时，大部分数据都集中在同一个桶中。\\n- 平均情况：$O(n + k)$，在平均情况下，桶排序的时间复杂度是线性的。\\n\\n### 空间复杂度\\n\\n- 空间复杂度为$O(n + k)$，n是数组中元素的个数，k是桶的数量。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\n\\n/**\\n * ClassName:BucketSort\\n * Package:com.heyqing\\n * Description:\\n * 桶排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class BucketSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(float[] source) {\\n        bucket(source);\\n        print(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void bucket(float[] nums) {\\n        int n = nums.length;\\n        List<Float>[] buckets = new ArrayList[n];\\n        for (int i = 0; i < n; i++) {\\n            buckets[i] = new ArrayList<Float>();\\n        }\\n        for (float num : nums) {\\n            int idx = (int) num * n;\\n            buckets[idx].add(num);\\n        }\\n        for (List<Float> bucket : buckets) {\\n            Collections.sort(bucket);\\n        }\\n        int index = 0;\\n        for (List<Float> bucket : buckets) {\\n            for (float num : bucket) {\\n                nums[index++] = num;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * 桶排序-内置打印\\n     *\\n     * @param nums\\n     */\\n    private static void print(float[] nums) {\\n        System.out.println(\\\"桶排序-内置打印\\\");\\n        System.out.print(\\\"\\\\t\\\");\\n        for (float num : nums) {\\n            System.out.print(num + \\\" \\\");\\n        }\\n    }\\n\\n}\\n\\n```\\n\\n## 附录\\n\\n### swap交换错误示例\\n\\n#### 代码示例\\n\\n```c\\n#include<stdio.h>\\n\\nvoid swap();\\n\\nint main() {\\n\\tswap();\\n\\treturn 0;\\n}\\n\\nvoid swap() {\\n\\tint a = 42;\\t\\t//定义变量 a\\n\\tint* pa = &a;\\t//定义指针 pa 指向变量 a 的存储地址\\n \\tint* pb = pa;\\t//定义指针 pb 等于 pa 同变量 a 的存储地址\\n\\tprintf(\\\"before the swap a = %d ,b = %d \\\\n\\\", a, *pb);\\t//打印运行前 a ，b 的值\\n\\ta = a ^ (*pb);\\t\\t\\t//由于a和b是相同的，这里实际上执行的是 a = a ^ a\\n\\t(*pb) = a ^ (*pb);\\t\\t//现在a是0即*pb也为0，所以 b = 0 ^ b = 0 ^ 0 = 0\\n\\ta = a ^ (*pb);\\t\\t\\t//现在a是0,*pb也为0，所以 a = 0 ^ 0 = 0\\n\\tprintf(\\\"after the swap a = %d ,b = %d\\\", a, *pb);\\t\\t//打印运行后 a ，b 的值\\n}\\n\\n```\\n\\n#### 运行结果\\n\\n![swaperror.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cb0d3f51a90665db2a84ab4d67437059.jpg)\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/d84f4206dbe76de6dc3d64794f860ee5.jpg\",\"articleTitle\":\"经典排序算法大揭秘：从冒泡到快速，了解每种算法的独特魅力\",\"categoryName\":\"算法\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"算法\",\"java\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:28:52', NULL);
INSERT INTO `t_operation_log` VALUES (1749, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3dbc7381c6dcba70b53c4ff64bcf479b.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:33:14', NULL);
INSERT INTO `t_operation_log` VALUES (1750, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"链表是一种灵活且高效的线性数据结构，它由一系列节点组成，每个节点包含数据和指向下一个节点的指针。与数组不同，链表的元素不需要连续存储，因此在进行插入和删除操作时，链表具有更高的效率。根据节点之间的连接方式，链表可以分为单向链表、双向链表和循环链表。单向链表的节点只指向下一个节点，双向链表的节点则既指向前一个节点也指向后一个节点，而循环链表则将尾节点与头节点相连，形成一个闭环。链表在动态内存管理和实现复杂数据结构（如队列、栈等）时，发挥着重要作用。\",\"articleContent\":\"package com.heyqing;\\n\\nimport java.util.*;\\n\\n/**\\n * ClassName:HasCycle\\n * Package:com.heyqing\\n * Description:\\n * 环形链表\\n *\\n * @Date:2024/10/19\\n * @Author:Heyqing\\n */\\npublic class HasCycle {\\n\\n    /**\\n     * 判断成环 -集合\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean hasCycleV1(ListNode head) {\\n        /*\\n        使用hashcode与set\\n         */\\n        Set<Integer> set = new HashSet<>();\\n        while (Objects.nonNull(head)) {\\n            if (!set.add(head.hashCode())) return true;\\n            head = head.next;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 判断成环 -快慢指针\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean hasCycleV2(ListNode head) {\\n        ListNode quick = head;\\n        ListNode slow = head;\\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\\n            quick = quick.next.next;\\n            slow = slow.next;\\n            if (Objects.equals(quick, slow)) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 获取入环节点\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static List<Integer> getEnterCycleNode(ListNode head) {\\n        /*\\n        获取入环节点有多种解，这里只说明快慢指针的方式\\n        快指针一次两步，慢指针一次一步\\n        相遇后，慢指针不动，快指针指向头部\\n        再次相遇节点为入环节点\\n         */\\n        if (Objects.isNull(head)) return null;\\n        List<Integer> list = new ArrayList<>(3);\\n        ListNode quick = head;\\n        ListNode slow = head;\\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\\n            quick = quick.next.next;\\n            slow = slow.next;\\n            if (Objects.equals(quick, slow)) break;\\n        }\\n        quick = head;\\n        int count = 1;\\n        while (Objects.nonNull(quick)) {\\n            count++;\\n            quick = quick.next;\\n            slow = slow.next;\\n            if (Objects.equals(quick, slow)) break;\\n        }\\n        list.add(count);\\n        list.add(quick.val);\\n        list.add(quick.hashCode());\\n        return list;\\n    }\\n\\n    /**\\n     * 判断相交链表\\n     * <p>\\n     * 成环 - 相交 / 不相交\\n     * 不成环 - 相交 / 不相交\\n     *\\n     * @param head1\\n     * @param head2\\n     * @return\\n     */\\n    public static boolean intersectLinked(ListNode head1, ListNode head2) {\\n        //判断有无环\\n        boolean isCycleByHead1 = hasCycleV2(head1);\\n        boolean isCycleByHead2 = hasCycleV2(head2);\\n        if ((isCycleByHead1 && !isCycleByHead2) || (!isCycleByHead1 && isCycleByHead2)) {\\n            //一个成环一个不成环 - 必不相交\\n            return false;\\n        }\\n        //不成环\\n        if (!isCycleByHead1) {\\n            return intersectLinkedByNoCycle(head1, head2);\\n        }\\n        //成环\\n        return intersectLinkedByCycle(head1, head2);\\n    }\\n\\n    /**\\n     * 判断相交 - 成环\\n     *\\n     * @param head1\\n     * @param head2\\n     * @return\\n     */\\n    private static boolean intersectLinkedByCycle(ListNode head1, ListNode head2) {\\n        /*\\n        获取其入环节点\\n        如果其入环节点相等必相交\\n        如果不等分各自成环（2个环），共成环（1个环）\\n        入环后一个不动，一个走一圈，若期间碰到相交反之不相交\\n         */\\n        ListNode cur2 = head2;\\n        List<Integer> enterCycleNodeByHead1 = getEnterCycleNode(head1);\\n        List<Integer> enterCycleNodeByHead2 = getEnterCycleNode(head2);\\n        Integer head1Point = enterCycleNodeByHead1.get(2);\\n        Integer head2Point = enterCycleNodeByHead2.get(2);\\n        //让 cur1不动\\n        while (cur2.hashCode() != head2Point) {\\n            cur2 = cur2.next;\\n        }\\n        cur2 = cur2.next;\\n        while (cur2.hashCode() != head2Point) {\\n            if (cur2.hashCode() == head1Point) return true;\\n            cur2 = cur2.next;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 判断相交 - 无环\\n     *\\n     * @param head1\\n     * @param head2\\n     * @return\\n     */\\n    private static boolean intersectLinkedByNoCycle(ListNode head1, ListNode head2) {\\n        ListNode cur1 = head1, cur2 = head2;\\n        while (Objects.nonNull(cur1.next)) {\\n            cur1 = cur1.next;\\n        }\\n        while (Objects.nonNull(cur2.next)) {\\n            cur2 = cur2.next;\\n        }\\n        /*\\n        如果相交，最后必有相等部分，其中最后一个比相等\\n        若不等就不相交\\n         */\\n        return cur1.hashCode() == cur2.hashCode();\\n    }\\n}\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3dbc7381c6dcba70b53c4ff64bcf479b.jpg\",\"articleTitle\":\"链表解析：灵活高效的数据结构背后的秘密\",\"categoryName\":\"算法\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"刷题\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:33:21', NULL);
INSERT INTO `t_operation_log` VALUES (1751, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"排序算法是计算机科学中的基础概念，用于将一组数据按照特定的顺序排列。经典的排序算法有很多，其中每一种都有其独特的特点和应用场景。从简单易懂的冒泡排序到高效快速的快速排序，这些算法在不同的数据量和需求下展现出不同的表现。尽管它们的时间复杂度各异，但每种排序方法都在算法学习和实际开发中占据重要地位。本文将为你介绍几种经典排序算法，包括冒泡排序、选择排序、插入排序、快速排序等，帮助你理解每种算法的原理、优缺点及其适用场景。\",\"articleContent\":\"# 十大经典排序\\n\\n## 简介\\n\\n  这里所说的十大经典排序指的分别为：冒泡排序（Bubble Sort）、选择排序（Selection Sort）、插入排序（Insertion Sort）、快速排序（Quick Sort）、归并排序（Merge Sort）、堆排序（Heap Sort）、希尔排序（Shell Sort）、计数排序（Counting Sort）、基数排序（Radix Sort）、桶排序（Bucket Sort）\\n\\n这些排序算法根据不同的特点可以被分为以下几类：\\n\\n- **比较排序**：通过比较元素之间的大小关系来进行排序。包括冒泡排序、选择排序、插入排序、快速排序、归并排序、堆排序、希尔排序。\\n- **非比较排序**：不通过比较元素的大小关系来进行排序，而是通过其他方法确定元素的顺序。包括计数排序、基数排序、桶排序。\\n\\n下面我会对这十种算法依次进行说明\\n\\n> 文中提到代码具体见 :\\n> [Code](https://github.com/heyqing/csdn/tree/master/Algorithm/sort)\\n>\\n\\n\\n\\n## 冒泡排序（Bubble Sort）\\n\\n### 算法描述\\n\\n冒泡排序是一种简单的排序算法，它通过重复地遍历要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。遍历数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。\\n\\n### 算法步骤\\n\\n1. 比较相邻的元素。如果第一个比第二个大（升序排序），就交换它们两个。\\n2. 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\\n3. 针对所有的元素重复以上的步骤，除了最后一个。\\n4. 重复步骤1~3，直到排序完成。\\n\\n### 时间复杂度\\n\\n- 最好情况（已排序）：$O(n)$，当输入的数组已经是正序时，冒泡排序只需遍历一次数组即可。\\n- 最坏情况（逆序）：$O(n^2)$，当输入的数组是逆序时，需要进行最大次数的比较和交换。\\n- 平均情况：$O(n^2)$，平均情况下，冒泡排序的时间复杂度也是$O(n^2)$。\\n\\n### 空间复杂度\\n\\n- 常数额外空间：$O(1)$，冒泡排序只需要一个用于交换的临时变量，所以它的空间复杂度是$O(1)$。\\n\\n### 动态解释\\n\\n![bubble.gif](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5d46b8df7ab2d1276af7d9871b36d353.gif)\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:BubbleSort\\n * Package:com.heyqing\\n * Description:\\n * 冒泡排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class BubbleSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        bubble(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void bubble(int[] nums) {\\n        boolean flag; // 内层是否有序标志\\n        //第一层 不用判断最后一个数\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            flag = false;\\n            //第二层 不用判断最后i躺个数\\n            for (int j = 0; j < nums.length - 1 - i; j++) {\\n                //如果前一个数 大于 后一个数\\n                if (nums[j] > nums[j + 1]) {\\n                    //交换两个数\\n                    swap(nums, j);\\n                    flag = true;\\n                }\\n            }\\n            // 如果内层循环没有进行交换，说明数组已经有序，可以提前结束排序\\n            if (!flag) break;\\n        }\\n    }\\n\\n    /**\\n     * 交换两个数\\n     * <p>\\n     * index 与 index + 1 进行交换\\n     *\\n     * @param nums\\n     * @param index\\n     */\\n    private static void swap(int[] nums, int index) {\\n        /*\\n         若 a = nums[index] , b = nums[index + 1]\\n         第一行： a = a ^ b 此时： a = a ^ b ,b = b\\n         第二行： b = (a ^ b) ^ b = a 此时： a = a ^ b , b = a\\n         第三行： a = (a ^ b) ^ a = b 此时： a = b , b = a 完成交换\\n         此算法实现了不使用额外空间完成两数交换\\n         注意：使用此算法时要保证 a , b 不同内存空间，错误用例见附录\\n         */\\n        nums[index] = nums[index] ^ nums[index + 1];\\n        nums[index + 1] = nums[index] ^ nums[index + 1];\\n        nums[index] = nums[index] ^ nums[index + 1];\\n    }\\n}\\n```\\n\\n## 选择排序（Selection Sort）\\n\\n### 算法描述\\n\\n选择排序是一种简单直观的排序算法。该算法每次循环从未排序的部分找到最小（或最大）的元素，将其放到已排序部分的末尾。这个过程重复进行，直到整个数组排序完成。\\n\\n### 算法步骤\\n\\n1. 在未排序序列中找到最小（或最大）元素的索引。\\n2. 将最小（或最大）元素与未排序序列的第一个元素交换位置。\\n3. 在剩下的未排序元素中重复步骤1和2，直到所有元素均排序完毕。\\n\\n### 时间复杂度\\n\\n- 最好、最坏和平均情况的时间复杂度都是$ O(n^2)$，因为选择排序需要进行大约 $n/2$ 次的交换操作，并且每次交换操作都需要遍历剩余的未排序部分。\\n\\n### 空间复杂度\\n\\n- 空间复杂度是 $O(1)$，因为选择排序是在原地进行的，不需要额外的存储空间。\\n\\n### 动态解释\\n\\n数组：[64, 25, 12, 22, 11]\\n\\n1. 第一轮找到最小元素11，与第一个元素64交换位置，数组变为：[11, 25, 12, 22, 64]\\n2. 第二轮找到除11之外的最小元素12，与第二个元素25交换位置，数组变为：[11, 12, 25, 22, 64]\\n3. 第三轮找到除11和12之外的最小元素22，与第三个元素25交换位置，数组变为：[11, 12, 22, 25, 64]\\n4. 最后一轮，25和64已经是有序的，不需要交换。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:SelectionSort\\n * Package:com.heyqing\\n * Description:\\n * 选择排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class SelectionSort {\\n\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        selection(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void selection(int[] nums) {\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            int minTemp = i; // 找到从i开始到数组末尾的最小元素的索引\\n            for (int j = i + 1; j < nums.length; j++) {\\n                if (nums[j] < nums[minTemp]) minTemp = j;\\n            }\\n            // 将找到的最小元素与第i个位置的元素交换\\n            swap(nums, i, minTemp);\\n        }\\n    }\\n\\n    /**\\n     * 交换两个数 常规做法\\n     *\\n     * @param nums\\n     * @param i\\n     * @param j\\n     */\\n    private static void swap(int[] nums, int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n```\\n\\n## 插入排序（Insertion Sort）\\n\\n### 算法描述\\n\\n插入排序是一种简单的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\\n\\n### 算法步骤\\n\\n1. 从第一个元素开始，该元素可以认为已经被排序。\\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描。\\n3. 如果该元素（已排序）大于新元素，将该元素移到下一位置。\\n4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置。\\n5. 将新元素插入到该位置后。\\n6. 重复步骤2~5。\\n\\n### 时间复杂度\\n\\n- 最好情况（数组已经是有序的）：$O(n)$\\n- 最坏情况（数组是完全逆序的）：$O(n^2)$\\n- 平均情况：$O(n^2)$\\n\\n### 空间复杂度\\n\\n- 空间复杂度是 $O(1)$，因为插入排序是在原地进行的，不需要额外的存储空间。\\n\\n### 动态解释\\n\\n数组：[5, 2, 4, 6, 1, 3]\\n\\n1. 初始状态：[5]（5是第一个元素，已经有序）\\n2. 插入2到5之前：[2, 5]\\n3. 插入4到[2, 5]之前，需要将5向后移动：[2, 4, 5]\\n4. 插入6到[2, 4, 5]之后，因为6比5大：[2, 4, 5, 6]\\n5. 插入1到[2, 4, 5, 6]之前，需要将所有元素向后移动：[1, 2, 4, 5, 6]\\n6. 插入3到[1, 2, 4, 5, 6]之前，需要将4和5向后移动：[1, 2, 3, 4, 5, 6]\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:InsertionSort\\n * Package:com.heyqing\\n * Description:\\n * 插入排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class InsertionSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        insertion(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void insertion(int[] nums) {\\n        for (int i = 1; i < nums.length; i++) {\\n            int key = nums[i];\\n            int j = i - 1;\\n            //将大于key的元素向后移动\\n            while (j >= 0 && nums[j] > key) {\\n                nums[j + 1] = nums[j];\\n                j -= 1;\\n            }\\n            //插入key到正确的位置\\n            nums[j + 1] = key;\\n        }\\n    }\\n}\\n```\\n\\n## 快速排序（Quick Sort）\\n\\n### 算法描述\\n\\n快速排序是一种分而治之的排序算法。它通过选取一个“基准”元素，将数组分成两个子数组，一个包含小于基准的元素，另一个包含大于或等于基准的元素，然后递归地对这两个子数组进行快速排序。\\n\\n### V1.0\\n\\n#### 算法步骤\\n\\n使用最后一个数 n 作为划分值\\n使得n前面的所有数以荷兰国旗式划分开\\n划分完后使用大于区域的第一个数与 n 交换\\n然后对 n 左右区域做递归处理\\n\\n#### 时间复杂度\\n\\n- 最好情况：$O(n log n)$，每次分区操作都能将数组分为两个大小相等的子数组。\\n- 最坏情况：$O(n^2)$，当每次分区操作只减少一个元素时，例如数组已经是有序的。\\n\\n#### 空间复杂度\\n\\n- 空间复杂度是$ O(log n)$，这是因为快速排序的递归性质，需要使用递归栈空间。\\n\\n### V2.0\\n\\n#### 算法步骤\\n\\n使用最后一个数 n 作为划分值\\n使得n前面的所有数以荷兰国旗式划分开\\n划分完后使用大于区域的第一个数与 n 交换\\n然后对 n 左右区域做递归处理\\n与第一版不同的是将等于部分置于中间\\n\\n#### 时间复杂度\\n\\n- 最好情况：$O(n log n)$，每次分区操作都能将数组分为两个大小相等的子数组。\\n- 最坏情况：$O(n^2)$，当每次分区操作只减少一个元素时，例如数组已经是有序的。\\n\\n#### 空间复杂度\\n\\n- 空间复杂度是$ O(log n)$，这是因为快速排序的递归性质，需要使用递归栈空间。\\n\\n### V3.0\\n\\n#### 算法步骤\\n\\n随机选择数组中的一个数作为分界数\\n使得n前面的所有数以荷兰国旗式划分开\\n划分完后使用大于区域的第一个数与 n 交换\\n然后对 n 左右区域做递归处理\\n与第二版不同的是随机选取数EX = n log n\\n\\n#### 时间复杂度\\n\\n- 最好情况：$O(n log n)$，每次分区操作都能将数组分为两个大小相等的子数组。\\n- 最坏情况：$O(n log n)$，当每次分区操作只减少一个元素时，例如数组已经是有序的。\\n\\n#### 空间复杂度\\n\\n- 空间复杂度是$ O(log n)$，这是因为快速排序的递归性质，需要使用递归栈空间。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.Arrays;\\nimport java.util.Random;\\n\\n/**\\n * ClassName:QuickSort\\n * Package:com.heyqing\\n * Description:\\n * 快速排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class QuickSort {\\n\\n    /**\\n     * 外部调用接口 - 第一版本\\n     *\\n     * @param source\\n     */\\n    public static void sortV1(int[] source) {\\n        quickV1(source);\\n    }\\n\\n    /**\\n     * 外部调用接口 - 第二版本\\n     *\\n     * @param source\\n     */\\n    public static void sortV2(int[] source) {\\n        quickV2(source);\\n    }\\n\\n    /**\\n     * 外部调用接口 - 第三版本\\n     *\\n     * @param source\\n     */\\n    public static void sortV3(int[] source) {\\n        quickV3(source);\\n    }\\n\\n    /**\\n     * 外部调用接口 - Java库函数\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        quick(source);\\n    }\\n\\n    /**\\n     * 排序具体实现 - v1\\n     *\\n     * @param nums\\n     */\\n    private static void quickV1(int[] nums) {\\n        /*\\n         使用最后一个数 n 作为划分值\\n         使得n前面的所有数以荷兰国旗式划分开\\n         划分完后使用大于区域的第一个数与 n 交换\\n         然后对 n 左右区域做递归处理\\n         */\\n        int start = 0, end = nums.length;\\n        achieveFunctionQuickV1(nums, start, end);\\n    }\\n\\n    /**\\n     * 实现函数 - v1\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     */\\n    private static void achieveFunctionQuickV1(int[] nums, int start, int end) {\\n        if (start >= end) return;\\n        int position = DutchFlagV1(nums, start, end);\\n        swap(nums, position + 1, end - 1);\\n        //左边\\n        achieveFunctionQuickV1(nums, start, position + 1);\\n        //右边\\n        achieveFunctionQuickV1(nums, position + 2, end);\\n    }\\n\\n\\n    /**\\n     * 排序具体实现 - v2\\n     *\\n     * @param nums\\n     */\\n    private static void quickV2(int[] nums) {\\n        /*\\n         使用最后一个数 n 作为划分值\\n         使得n前面的所有数以荷兰国旗式划分开\\n         划分完后使用大于区域的第一个数与 n 交换\\n         然后对 n 左右区域做递归处理\\n         与第一版不同的是将等于部分置于中间\\n         */\\n        int start = 0, end = nums.length;\\n        achieveFunctionQuickV2(nums, start, end);\\n    }\\n\\n    /**\\n     * 实现函数 - v2\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     */\\n    private static void achieveFunctionQuickV2(int[] nums, int start, int end) {\\n        if (start >= end) return;\\n        //一最后一个数为分界数，返回第一个大于和最后一个小于分界数的下标\\n        int[] positions = DutchFlagV2(nums, start, end);\\n        //左边\\n        achieveFunctionQuickV2(nums, start, positions[0]);\\n        //右边\\n        achieveFunctionQuickV2(nums, positions[1], end);\\n    }\\n\\n\\n    /**\\n     * 排序具体实现 - v3\\n     *\\n     * @param nums\\n     */\\n    private static void quickV3(int[] nums) {\\n        /*\\n         随机选择数组中的一个数作为分界数\\n         使得n前面的所有数以荷兰国旗式划分开\\n         划分完后使用大于区域的第一个数与 n 交换\\n         然后对 n 左右区域做递归处理\\n         与第二版不同的是随机选取数EX = n log n\\n         */\\n        int start = 0, end = nums.length;\\n        achieveFunctionQuickV3(nums, start, end);\\n    }\\n\\n    /**\\n     * 实现函数 - v3\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     */\\n    private static void achieveFunctionQuickV3(int[] nums, int start, int end) {\\n        if (start >= end) return;\\n        //随机选取\\n        Random r = new Random();\\n        int randomIndex = r.nextInt(end - start) + start;\\n        swap(nums, randomIndex, end - 1);\\n        int[] positions = DutchFlagV3(nums, start, end);\\n        //左边\\n        achieveFunctionQuickV3(nums, start, positions[0] + 1);\\n        //右边\\n        achieveFunctionQuickV3(nums, positions[1], end);\\n    }\\n\\n\\n    /**\\n     * 排序具体实现 - java依赖库\\n     * <p>\\n     * 双轴快速排序（Dual-Pivot Quicksort）算法\\n     *\\n     * @param nums\\n     */\\n    private static void quick(int[] nums) {\\n        /*\\n         Java中的Arrays.sort方法底层使用的排序算法依赖于数组的类型和大小。对于基本数据类型数组（如int[], long[]等）\\n         Arrays.sort使用的是双轴快速排序（Dual-Pivot Quicksort）算法，这是一种优化过的快速排序算法\\n         由Vladimir Yaroslavskiy、Jon Bentley和Joshua Bloch提出\\n         它在许多数据集上提供了接近O(n log n)的性能，通常比传统的单轴快速排序更快\\n         */\\n        Arrays.sort(nums);\\n    }\\n\\n\\n    /**\\n     * 荷兰国旗算法 - v1\\n     * <p>\\n     * 给定一个数组 nums 数组中的最后一个数为 target\\n     * <p>\\n     * 要求将数组 nums 中所有小于等于 target 的数置于左侧，大于的数置于右侧\\n     * <p>\\n     * 返回分界值 position ：小于等于 position 的数值为 小于等于 target 的值\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     * @return\\n     */\\n    private static int DutchFlagV1(int[] nums, int start, int end) {\\n        int len = end - start, position = start - 1, target = nums[end - 1];\\n        for (int i = start; i < len - 1; i++) {\\n            if (nums[i] <= target) {\\n                swap(nums, i, position + 1);\\n                position++;\\n            }\\n        }\\n        return position;\\n    }\\n\\n\\n    /**\\n     * 荷兰国旗算法 - v2\\n     * <p>\\n     * 给定一个数组 nums 数组中的最后一个数为 target\\n     * <p>\\n     * 要求将数组 nums 中所有小于 target 的数置于左侧，等于的数置于中间，大于的数置于右侧\\n     * <p>\\n     * 返回分界值 positions ：小于的边界，大于的边界\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     * @return\\n     */\\n    private static int[] DutchFlagV2(int[] nums, int start, int end) {\\n        int target = nums[end - 1];\\n        //初始化边界数组\\n        int[] positions = new int[]{start - 1, end};\\n        for (int i = start; i < positions[1]; i++) {\\n            if (nums[i] < target) {\\n                //小于\\n                swap(nums, i, positions[0] + 1);\\n                positions[0]++;\\n            } else if (nums[i] > target) {\\n                //大于\\n                swap(nums, i, positions[1] - 1);\\n                positions[1]--;\\n                i--;\\n            }\\n        }\\n        return positions;\\n    }\\n\\n    /**\\n     * 荷兰国旗算法 - v3\\n     * <p>\\n     * 给定一个数组 nums 数组中的随机一个数为 target\\n     * <p>\\n     * 要求将数组 nums 中所有小于 target 的数置于左侧，等于的数置于中间，大于的数置于右侧\\n     * <p>\\n     * 返回分界值 positions ：小于的边界，大于的边界\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     * @return\\n     */\\n    private static int[] DutchFlagV3(int[] nums, int start, int end) {\\n        int target = nums[end - 1];\\n        //初始化边界数组\\n        int[] positions = new int[]{start - 1, end};\\n        for (int i = start; i < positions[1]; i++) {\\n            if (nums[i] < target) {\\n                //小于\\n                swap(nums, i, positions[0] + 1);\\n                positions[0]++;\\n            } else if (nums[i] > target) {\\n                //大于\\n                swap(nums, i, positions[1] - 1);\\n                positions[1]--;\\n                i--;\\n            }\\n        }\\n        return positions;\\n    }\\n\\n    /**\\n     * 交换两个数\\n     *\\n     * @param nums\\n     * @param i\\n     * @param j\\n     */\\n    private static void swap(int[] nums, int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n\\n```\\n\\n## 归并排序（Merge Sort）\\n\\n### 算法描述\\n\\n归并排序是一种经典的排序算法，它同样采用分而治之的策略。归并排序将数组分成若干个小组，然后对每个小组进行排序，最后将这些小组合并成一个有序的数组。\\n\\n### 算法步骤\\n\\n1. 将数组分成两半。\\n2. 递归地将这两半分别排序。\\n3. 合并两个已排序的半部分。\\n\\n### 时间复杂度\\n\\n- 最好、最坏和平均情况：$O(n log n)$，因为归并排序总是将数组分成两半，然后合并，合并操作的时间复杂度是线性的，而分治过程的时间复杂度是对数级的。\\n\\n### 空间复杂度\\n\\n- 空间复杂度是 $O(n)$，因为归并排序需要与原数组相同大小的额外空间来存储合并后的数组。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:MergeSort\\n * Package:com.heyqing\\n * Description:\\n * 归并排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class MergeSort {\\n\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        merge(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void merge(int[] nums) {\\n        int start = 0, end = nums.length - 1;\\n        achieveFuncMerge(nums, start, end);\\n    }\\n\\n    /**\\n     * 实现函数\\n     *\\n     * @param nums\\n     * @param start\\n     * @param end\\n     */\\n    private static void achieveFuncMerge(int[] nums, int start, int end) {\\n        if (start >= end) return;\\n        //找到中间索引 防止溢出\\n        int mid = start + ((end - start) >> 1);\\n        //分别对左右两部分进行归并排序\\n        //左边\\n        achieveFuncMerge(nums, start, mid);\\n        //右边\\n        achieveFuncMerge(nums, mid + 1, end);\\n        //合并两个已排序的部分\\n        mergeSortNums(nums, start, mid, end);\\n    }\\n\\n    /**\\n     * 合并两个已排序的部分\\n     *\\n     * @param nums\\n     * @param start\\n     * @param mid\\n     * @param end\\n     */\\n    private static void mergeSortNums(int[] nums, int start, int mid, int end) {\\n        //计算两个子数组的长度\\n        int len1 = mid - start + 1;\\n        int len2 = end - mid;\\n        //创建临时数组\\n        int[] L = new int[len1];\\n        int[] R = new int[len2];\\n        //将数据拷贝到临时数组中\\n        System.arraycopy(nums, start, L, 0, len1);\\n        System.arraycopy(nums, mid + 1, R, 0, len2);\\n        //合并临时数组\\n        int i = 0, j = 0;\\n        int k = start;\\n        while (i < len1 && j < len2) {\\n            if (L[i] <= R[j]) {\\n                nums[k] = L[i];\\n                i++;\\n            } else {\\n                nums[k] = R[j];\\n                j++;\\n            }\\n            k++;\\n        }\\n        // 拷贝L中剩余的元素\\n        while (i < len1) {\\n            nums[k] = L[i];\\n            i++;\\n            k++;\\n        }\\n        // 拷贝R中剩余的元素\\n        while (j < len2) {\\n            nums[k] = R[j];\\n            j++;\\n            k++;\\n        }\\n    }\\n}\\n```\\n\\n## 堆排序（Heap Sort）\\n\\n### 算法描述\\n\\n堆排序是一种基于比较的排序算法。它利用堆这种数据结构的特性来进行排序，堆是一种近似完全二叉树的结构，并同时满足堆积的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。\\n\\n### 算法步骤\\n\\n1. **建堆（Heapify）**：将无序的输入数据构造成一个最大堆（或最小堆），确保每个父节点的值都大于或等于其子节点的值（最大堆）。\\n2. **交换和调整**：将堆顶元素（最大值或最小值）与堆的最后一个元素交换，然后减少堆的大小，对剩余的堆进行调整，使其满足堆的性质。\\n3. **重复交换和调整**：重复上述交换和调整步骤，直到堆的大小为1，此时整个数组已经有序。\\n\\n### 时间复杂度\\n\\n- 最好、最坏和平均情况：$O(n log n)$，因为建堆的时间复杂度是$O(n)$，每次调整堆的时间复杂度是$O(log n)$，而需要调整$n-1$次。\\n\\n### 空间复杂度\\n\\n- 空间复杂度是$O(1)$，因为堆排序是在原地进行排序，不需要额外的存储空间。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:HeapSort\\n * Package:com.heyqing\\n * Description:\\n * 堆排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class HeapSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        heap(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void heap(int[] nums) {\\n        int n = nums.length;\\n        //构建堆\\n        for (int i = n / 2 - 1; i >= 0; i--) {\\n            heapify(nums, n, i);\\n        }\\n        //一个个从堆顶取出元素\\n        for (int i = n - 1; i >= 0; i--) {\\n            // 当前堆顶元素（最大值）与最后一个元素交换\\n            swap(nums, i, 0);\\n            //调整剩余堆\\n            heapify(nums, i, 0);\\n        }\\n    }\\n\\n    /**\\n     * 堆化\\n     *\\n     * @param nums\\n     * @param n\\n     * @param i\\n     */\\n    private static void heapify(int[] nums, int n, int i) {\\n        int largest = i; // 初始化最大元素索引为根节点\\n        int left = 2 * i + 1; // 左子节点\\n        int right = 2 * i + 2; // 右子节点\\n        // 如果左子节点大于根节点\\n        if (left < n && nums[left] > nums[largest]) {\\n            largest = left;\\n        }\\n        // 如果右子节点比最大元素还大\\n        if (right < n && nums[right] > nums[largest]) {\\n            largest = right;\\n        }\\n        // 如果最大元素不是根节点\\n        if (largest != i) {\\n            swap(nums, i, largest);\\n            // 递归地调整受影响的子树\\n            heapify(nums, n, largest);\\n        }\\n    }\\n\\n    /**\\n     * 交换两个数\\n     *\\n     * @param nums\\n     * @param i\\n     * @param j\\n     */\\n    private static void swap(int[] nums, int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n```\\n\\n## 希尔排序（Shell Sort）\\n\\n### 算法描述\\n\\n希尔排序，也称为缩小增量排序，是一种插入排序的改进版本。它通过比较距离较远的元素来工作，其核心理念是使数组中任意间隔为h的元素都是有序的。这样的数组被称为h有序数组。希尔排序通过逐渐减小h的值，最终使用插入排序将数组完全排序。\\n\\n### 算法步骤\\n\\n1. 选择一个增量序列t1, t2, …, tk，其中ti > tj，tk = 1。\\n2. 根据当前增量ti，将待排序序列分成若干个长度为m的子序列，所有距离为ti的元素被分为同一个子序列。\\n3. 分别对各子序列进行直接插入排序。\\n4. 然后缩小增量，重复上述子序列划分和排序工作。\\n5. 当增量缩减至1时，整个文件恰被分成一组，算法便终止。\\n\\n### 时间复杂度\\n\\n- 最好情况：$O(n log^2 n)$\\n- 最坏情况：$O(n(log n)^2)$\\n- 平均情况：依赖于增量序列的选择，通常在$O(n^(1.3))$到$O(n^(2))$之间。\\n\\n### 空间复杂度\\n\\n- 空间复杂度是$O(1)$，因为希尔排序是在原地进行排序，不需要额外的存储空间。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:ShellSort\\n * Package:com.heyqing\\n * Description:\\n * 希尔排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class ShellSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        shell(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void shell(int[] nums) {\\n        int n = nums.length;\\n        //初始增量，一般取数组长度的一半\\n        for (int i = n / 2; i > 0; i /= 2) {\\n            //对每个子序列进行插入排序\\n            for (int j = i; j < n; j++) {\\n                int temp = nums[j];\\n                int k;\\n                for (k = j; k >= i && nums[k - i] > temp; k -= i) {\\n                    nums[k] = nums[k - i];\\n                }\\n                nums[k] = temp;\\n            }\\n        }\\n    }\\n}\\n```\\n\\n## 计数排序（Counting Sort）\\n\\n### 算法描述\\n\\n计数排序是一种非比较型的整数排序算法。它将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\\n\\n### 算法步骤\\n\\n1. 找出待排序的数组中最大和最小的元素。\\n2. 统计数组中每个值为i的元素出现的次数，存入数组C的第i项。\\n3. 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）。\\n4. 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。\\n\\n### 时间复杂度\\n\\n- 最好、最坏和平均情况的时间复杂度都是O(n+k)，其中n是数组中元素的个数，k是数组中最大值与最小值的差。\\n\\n### 空间复杂度\\n\\n- 空间复杂度为O(n+k)，需要额外的数组来存储计数和输出数组。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:CountingSort\\n * Package:com.heyqing\\n * Description:\\n * 计数排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class CountingSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        counting(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void counting(int[] nums) {\\n        /*\\n        找出最大值max，然后开辟 max + 1 大小的空间计数\\n        该算法局限与待比较数的大小规模\\n         */\\n        //找出数组中的最大值\\n        int max = findMax(nums);\\n        //初始化计数数组\\n        int[] count = new int[max + 1];\\n        for (int i = 0; i < nums.length; i++) {\\n            count[nums[i]]++;\\n        }\\n        //累加计数数组\\n        for (int i = 1; i < count.length; i++) {\\n            count[i] += count[i - 1];\\n        }\\n        //反向填充目标数组\\n        int[] output = new int[nums.length];\\n        for (int i = nums.length - 1; i >= 0; i--) {\\n            output[count[nums[i]] - 1] = nums[i];\\n            count[nums[i]]--;\\n        }\\n        //将排序后的数组复制回原数组\\n        System.arraycopy(output, 0, nums, 0, nums.length);\\n    }\\n\\n    /**\\n     * 找出数组中的最大数\\n     *\\n     * @param nums\\n     * @return\\n     */\\n    private static int findMax(int[] nums) {\\n        int max = nums[0];\\n        for (int i = 1; i < nums.length; i++) {\\n            if (nums[i] > max) max = nums[i];\\n        }\\n        return max;\\n    }\\n}\\n```\\n\\n## 基数排序（Radix Sort）\\n\\n### 算法描述\\n\\n基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。\\n\\n### 算法步骤\\n\\n1. 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。\\n2. 从最低位开始，依次进行一次排序。\\n3. 从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。\\n\\n### 时间复杂度\\n\\n- 最好、最坏和平均情况的时间复杂度都是$O(n*k)$，其中n是数组中元素的个数，k是数组中最大值的位数。\\n\\n### 空间复杂度\\n\\n- 空间复杂度为$O(n+k)$，其中n是数组中元素的个数，k是基数（例如十进制中k为10，即0-9）。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\n/**\\n * ClassName:RadixSort\\n * Package:com.heyqing\\n * Description:\\n * 基数排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class RadixSort {\\n\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(int[] source) {\\n        radix(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void radix(int[] nums) {\\n        int max = findMax(nums), n = nums.length;\\n        for (int i = 1; max / i > 0; i *= 10) {\\n            achieveFuncRadix(nums, n, i);\\n        }\\n    }\\n\\n    /**\\n     * 实现函数\\n     *\\n     * @param nums\\n     * @param n\\n     * @param exp\\n     */\\n    private static void achieveFuncRadix(int[] nums, int n, int exp) {\\n        int[] output = new int[n];\\n        int i;\\n        int[] count = new int[10];\\n        for (i = 0; i < n; i++)\\n            count[(nums[i] / exp) % 10]++;\\n        for (i = 1; i < 10; i++)\\n            count[i] += count[i - 1];\\n        for (i = n - 1; i >= 0; i--) {\\n            output[count[(nums[i] / exp) % 10] - 1] = nums[i];\\n            count[(nums[i] / exp) % 10]--;\\n        }\\n        System.arraycopy(output, 0, nums, 0, nums.length);\\n    }\\n\\n    /**\\n     * 找出数组中的最大数\\n     *\\n     * @param nums\\n     * @return\\n     */\\n    private static int findMax(int[] nums) {\\n        int max = nums[0];\\n        for (int i = 1; i < nums.length; i++) {\\n            if (nums[i] > max) max = nums[i];\\n        }\\n        return max;\\n    }\\n}\\n\\n```\\n\\n## 桶排序（Bucket Sort）\\n\\n### 算法描述\\n\\n桶排序是一种将待排序数据分到几个有序的桶里，每个桶里的数据再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序），最后将各桶的数据依次取出，组成的序列就是有序的了。\\n\\n### 算法步骤\\n\\n1. 设置一个定量的数组当作空桶。\\n2. 遍历输入数据，并且把数据一个一个放到对应的桶里去。\\n3. 对每个不是空的桶进行排序。\\n4. 从不是空的桶里把排好序的数据拼接起来。\\n\\n### 时间复杂度\\n\\n- 最好情况：$O(n + k)$，其中n是数组中元素的个数，k是桶的数量。当输入数据均匀分布时，每个桶的元素数量接近平衡。\\n- 最坏情况：$O(n^2$)，当输入数据极度不均匀分布时，大部分数据都集中在同一个桶中。\\n- 平均情况：$O(n + k)$，在平均情况下，桶排序的时间复杂度是线性的。\\n\\n### 空间复杂度\\n\\n- 空间复杂度为$O(n + k)$，n是数组中元素的个数，k是桶的数量。\\n\\n### 代码实现\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\n\\n/**\\n * ClassName:BucketSort\\n * Package:com.heyqing\\n * Description:\\n * 桶排序\\n *\\n * @Date:2024/10/16\\n * @Author:Heyqing\\n */\\npublic class BucketSort {\\n    /**\\n     * 外部调用接口\\n     *\\n     * @param source\\n     */\\n    public static void sort(float[] source) {\\n        bucket(source);\\n        print(source);\\n    }\\n\\n    /**\\n     * 排序具体实现\\n     *\\n     * @param nums\\n     */\\n    private static void bucket(float[] nums) {\\n        int n = nums.length;\\n        List<Float>[] buckets = new ArrayList[n];\\n        for (int i = 0; i < n; i++) {\\n            buckets[i] = new ArrayList<Float>();\\n        }\\n        for (float num : nums) {\\n            int idx = (int) num * n;\\n            buckets[idx].add(num);\\n        }\\n        for (List<Float> bucket : buckets) {\\n            Collections.sort(bucket);\\n        }\\n        int index = 0;\\n        for (List<Float> bucket : buckets) {\\n            for (float num : bucket) {\\n                nums[index++] = num;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * 桶排序-内置打印\\n     *\\n     * @param nums\\n     */\\n    private static void print(float[] nums) {\\n        System.out.println(\\\"桶排序-内置打印\\\");\\n        System.out.print(\\\"\\\\t\\\");\\n        for (float num : nums) {\\n            System.out.print(num + \\\" \\\");\\n        }\\n    }\\n\\n}\\n\\n```\\n\\n## 附录\\n\\n### swap交换错误示例\\n\\n#### 代码示例\\n\\n```c\\n#include<stdio.h>\\n\\nvoid swap();\\n\\nint main() {\\n\\tswap();\\n\\treturn 0;\\n}\\n\\nvoid swap() {\\n\\tint a = 42;\\t\\t//定义变量 a\\n\\tint* pa = &a;\\t//定义指针 pa 指向变量 a 的存储地址\\n \\tint* pb = pa;\\t//定义指针 pb 等于 pa 同变量 a 的存储地址\\n\\tprintf(\\\"before the swap a = %d ,b = %d \\\\n\\\", a, *pb);\\t//打印运行前 a ，b 的值\\n\\ta = a ^ (*pb);\\t\\t\\t//由于a和b是相同的，这里实际上执行的是 a = a ^ a\\n\\t(*pb) = a ^ (*pb);\\t\\t//现在a是0即*pb也为0，所以 b = 0 ^ b = 0 ^ 0 = 0\\n\\ta = a ^ (*pb);\\t\\t\\t//现在a是0,*pb也为0，所以 a = 0 ^ 0 = 0\\n\\tprintf(\\\"after the swap a = %d ,b = %d\\\", a, *pb);\\t\\t//打印运行后 a ，b 的值\\n}\\n\\n```\\n\\n#### 运行结果\\n\\n![swaperror.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cb0d3f51a90665db2a84ab4d67437059.jpg)\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/d84f4206dbe76de6dc3d64794f860ee5.jpg\",\"articleTitle\":\"经典排序算法大揭秘：从冒泡到快速，了解每种算法的独特魅力\",\"categoryName\":\"算法\",\"id\":147,\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:33:37', NULL);
INSERT INTO `t_operation_log` VALUES (1752, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"链表是一种灵活且高效的线性数据结构，它由一系列节点组成，每个节点包含数据和指向下一个节点的指针。与数组不同，链表的元素不需要连续存储，因此在进行插入和删除操作时，链表具有更高的效率。根据节点之间的连接方式，链表可以分为单向链表、双向链表和循环链表。单向链表的节点只指向下一个节点，双向链表的节点则既指向前一个节点也指向后一个节点，而循环链表则将尾节点与头节点相连，形成一个闭环。链表在动态内存管理和实现复杂数据结构（如队列、栈等）时，发挥着重要作用。\",\"articleContent\":\"# 链表\\n\\n## 简介\\n\\n链表是一种基本的数据结构，它由一系列节点（或称为元素）组成，这些节点在内存中不一定是连续的。每个节点通常包含两部分：一部分是存储数据的数据域，另一部分是存储指向下一个节点地址的指针域。链表的特点是可以动态地添加和删除节点，而且不需要像数组那样在创建时就确定其大小。链表的头节点是指向链表第一个节点的指针，而头指针是链表的入口点，用于访问链表中的元素。\\n\\n链表有几种类型，包括：\\n\\n- **单向链表**：每个节点只有一个指针，指向链表中的下一个节点。\\n- **双向链表**：每个节点有两个指针，一个指向下一个节点，另一个指向前一个节点，允许双向遍历。\\n- **循环链表**：最后一个节点的指针指向链表的第一个节点，形成一个环状结构。\\n- **静态链表**：使用数组来模拟链表，每个数组元素存储数据的同时，还存储指向下一个元素的索引。\\n\\n下面以几个简单的题目例子来说明\\n\\n> 本文主要说明单向链表\\n>\\n> 更多代码(含运行示例)可前往：[Code](https://github.com/heyqing/csdn/tree/master/Algorithm/link)\\n\\n**注：链表题目一般不会很难，边界条件一定要选对**\\n\\n## 反转链表\\n\\n给定一个链表，返回该链表的逆序\\n\\n### 尾插法\\n\\n即用一个数组存储正向顺序，再逆向输出并尾插法即可(这里就不代码展示了)\\n\\n### 头插法\\n\\n使用递归思想，每次创建的都是后一个\\n\\n代码展示：\\n\\n```java\\n/**\\n* 反转链表\\n*\\n* @param head\\n* @return\\n*/\\npublic static ListNode reverseLinked(ListNode head) {\\n    return achieveFuncReverse(head, null);\\n}\\n\\n/**\\n* 反转链表实现函数\\n*\\n* @param head\\n* @param last\\n* @return\\n*/\\nprivate static ListNode achieveFuncReverse(ListNode head, ListNode last) {\\n    if (Objects.isNull(head)) return last; // 如果需反转链表为空返回\\n    // 将当前head值放入新node，将上一步的node放入next\\n    ListNode cur = new ListNode(head.val, last); \\n    //递归调用创建上一个\\n    return achieveFuncReverse(head.next, cur);\\n}\\n```\\n\\n## 回文链表\\n\\n给定一个链表判断当前链表是否为回文链表\\n\\n回文链表： 正向读等于反向读的链表，1-> 2 -> 3 -> 4 -> 3 -> 2 -> 1, 1 -> 2 -> 3 -> 3 -> 2 -> 1\\n\\n### 辅助空间 - 栈 - 全压栈\\n\\n使用栈将链表中的所有值压入栈中，再从头遍历链表，每遍历一个栈中弹出一个，若全部相等则为回文链表，反之则不然\\n\\n___代码后面统一展示___\\n\\n### 辅助空间 - 栈 - 压一半\\n\\n只将链表中的一半数据压入栈中，然后与另一半进行比较，相当于将链表进行对折\\n\\n如何只压一半，或者说压到哪里就说明已经压了一半了，这里就要介绍一种方法——**快慢指针**\\n\\n使用快慢指针找链表中点，即快指针一次走两步，慢指针一次走一步，当快指针走到最后时慢指针刚刚到达链表中间\\n\\n### 快慢指针 - 反转链表 - 不使用辅助空间\\n\\n第三种方法只使用有限的变量而不去借助栈等辅助空间\\n\\n使用快慢指针，当慢指针到达中点时，将当前慢指针指向空，慢指针后面的逆序，然后一边从头，一边从尾依次遍历比较\\n\\n举例说明一下，元链表为\\n\\n```mermaid\\ngraph LR\\na((1)) --> b((2))\\nb --> c((3))\\nc --> d((4))\\nd --> e((3))\\ne --> f((2))\\nf --> g((1))\\n```\\n\\n转换之后的为\\n\\n```mermaid\\ngraph LR\\na((1)) --> b((2))\\nb --> c((3))\\nc --> d((4))\\nf --> e((3))\\ng((1)) --> f((2))\\ne --> d\\nd --> h((null))\\n```\\n\\n然后从两边同步遍历，过程中若有一步不同则不是回文，若遍历到最后有一处为null，则说明过程中处处相等，即回文\\n\\n### 所有代码展示\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.Objects;\\nimport java.util.Stack;\\n\\nimport static com.heyqing.LinkTools.*;\\n\\n/**\\n * ClassName:IsPalindrome\\n * Package:com.heyqing\\n * Description:\\n * 回文链表\\n *\\n * @Date:2024/10/19\\n * @Author:Heyqing\\n */\\npublic class IsPalindrome {\\n\\n    /**\\n     * 栈 - 全压\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean isPalindromeV1(ListNode head) {\\n        Stack<Integer> stack = new Stack<>();\\n        ListNode p = head;\\n        while (Objects.nonNull(p)) {\\n            stack.push(p.val);\\n            p = p.next;\\n        }\\n        while (Objects.nonNull(head)) {\\n            if (stack.pop() - head.val != 0) return false;\\n            head = head.next;\\n        }\\n        return true;\\n    }\\n\\n\\n    /**\\n     * 栈 - 压一半\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean isPalindromeV2(ListNode head) {\\n        Stack<Integer> stack = new Stack<>();\\n        /*\\n        快慢指针\\n         */\\n        if (Objects.isNull(head) || Objects.isNull(head.next) || Objects.isNull(head.next.next)) {\\n            return judgeLinkedLengthLess3(head);\\n        }\\n        ListNode quick = head.next.next;\\n        ListNode slow = head.next;\\n        stack.push(head.val);\\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\\n            quick = quick.next.next;\\n            stack.push(slow.val);\\n            slow = slow.next;\\n        }\\n        if (Objects.nonNull(quick)) slow = slow.next;\\n        while (Objects.nonNull(slow)) {\\n            if (stack.pop() - slow.val != 0) return false;\\n            slow = slow.next;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * 快慢指针 - 反转后一半\\n     * <p>\\n     * 不使用额外空间（有限的几个变量）\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean isPalindromeV3(ListNode head) {\\n        if (Objects.isNull(head) || Objects.isNull(head.next) || Objects.isNull(head.next.next)) {\\n            return judgeLinkedLengthLess3(head);\\n        }\\n        ListNode quick = head;\\n        ListNode slow = head;\\n        ListNode reverse = null;\\n        while (Objects.nonNull(quick.next) && Objects.nonNull(quick.next.next)) {\\n            slow = slow.next;\\n            quick = quick.next.next;\\n        }\\n        /*\\n         快指针指向慢指针\\n         慢指针指向空\\n         使用reverse反转\\n         */\\n        quick = slow.next;\\n        slow.next = null;\\n        while (Objects.nonNull(quick)) {\\n            //记录下一个\\n            reverse = quick.next;\\n            //反转 指向上一个\\n            quick.next = slow;\\n            //记录当前位置，下一个的上一个\\n            slow = quick;\\n            //跳转至下一个\\n            quick = reverse;\\n        }\\n        quick = head;\\n        while (Objects.nonNull(slow) && Objects.nonNull(quick)) {\\n            if (slow.val != quick.val) return false;\\n            slow = slow.next;\\n            quick = quick.next;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * 长度小于 3 的链表\\n     *\\n     * @param head\\n     * @return\\n     */\\n    private static boolean judgeLinkedLengthLess3(ListNode head) {\\n        if (Objects.isNull(head) || Objects.isNull(head.next)) {\\n            return true;\\n        }\\n        if (Objects.isNull(head.next.next)) {\\n            return head.val == head.next.val;\\n        } else {\\n            return head.val == head.next.next.val;\\n        }\\n    }\\n}\\n```\\n\\n## 划分链表\\n\\n给定一个链表，和一个划分数值 partition，结果将小于partition的node置于左边，等于的放中间，大于的放右边\\n\\n与荷兰国旗问题一致，有关荷兰国旗问题，在 [十大经典排序](https://blog.csdn.net/heyiqingsong/article/details/143024462) 中的**快速**排序**代码**中有所提及\\n\\n```mermaid\\ngraph LR\\na(partition = 5)\\nb((5)) --> c((4))\\nc --> d((7))\\nd --> e((2))\\ne --> f((5))\\nf --> g((8))\\n```\\n\\n划分后的链表为\\n\\n```mermaid\\ngraph LR\\nb((4)) --> c((2))\\nc --> d((5))\\nd --> e((5))\\ne --> f((8))\\nf --> g((7))\\n```\\n\\n小于、大于区域的node顺序不做要求\\n\\n### 辅助空间 - 数组\\n\\n将node存入数组，对数组进行荷兰国旗式的划分，再将node依次串起来\\n\\n### 有限变量 - 不使用辅助空间\\n\\n只是用7个变量实现划分，且保证稳定性\\n\\n定义node变量 小于首sh，小于尾st，等于首eh，等于尾et，大于首mh，大于尾mt，下一节点next\\n\\n从头遍历链表若小于partition，若sh为空将sh指向当前节点，将st的下一节点指向当前节点，然后将st等图当前节点，依次进行，等于大于同理，最后将两条链表串起来\\n\\n举例说明，依次获得三条链表\\n\\n```mermaid\\ngraph LR\\na[...]\\nb[...]\\nc[...]\\nsh --> a\\na --> st\\neh --> b\\nb -->et\\nmh --> c\\nc --> mt\\n```\\n\\n然后将三条链表串起来即可\\n\\n```mermaid\\ngraph LR\\na[...]\\nb[...]\\nc[...]\\nsh --> a\\na --> st\\neh --> b\\nb -->et\\nmh --> c\\nc --> mt\\nst --> eh\\net --> mh\\n```\\n\\n### 所有代码展示\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Objects;\\n\\n/**\\n * ClassName:PartitionLinked\\n * Package:com.heyqing\\n * Description:\\n * 划分链表\\n *\\n * @Date:2024/10/19\\n * @Author:Heyqing\\n */\\npublic class PartitionLinked {\\n\\n    /**\\n     * 划分链表 - 数组\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static ListNode partitionLinkedV1(ListNode head, int target) {\\n        if (Objects.isNull(head)) return null;\\n        List<ListNode> listNodes = new ArrayList<>();\\n        while (Objects.nonNull(head)) {\\n            listNodes.add(head);\\n            head = head.next;\\n        }\\n        //划分\\n        int size = listNodes.size(), min = -1, max = size;\\n        for (int i = 0; i < max; i++) {\\n            if (listNodes.get(i).val < target) {\\n                //小于\\n                swap(listNodes, i, min + 1);\\n                min++;\\n            } else if (listNodes.get(i).val > target) {\\n                //大于\\n                swap(listNodes, i, max - 1);\\n                i--;\\n                max--;\\n            }\\n        }\\n        //串起来\\n        ListNode result = new ListNode();\\n        ListNode p = result;\\n        for (int i = 0; i < size; i++) {\\n            p.next = listNodes.get(i);\\n            p = p.next;\\n        }\\n        p.next = null;\\n        return result.next;\\n    }\\n\\n    /**\\n     * 划分链表 - 有限变量\\n     * <p>\\n     * 保证稳定性\\n     *\\n     * @param head\\n     * @param target\\n     * @return\\n     */\\n    public static ListNode partitionLinkedV2(ListNode head, int target) {\\n        //定义小于 等于 大于 的首位指针\\n        ListNode sh = null, st = null, eh = null, et = null, mh = null, mt = null, next = null;\\n        while (Objects.nonNull(head)) {\\n            next = head.next;\\n            head.next = null;\\n            if (head.val < target) {\\n                //小于\\n                if (Objects.isNull(sh)) {\\n                    sh = head;\\n                } else {\\n                    st.next = head;\\n                }\\n                st = head;\\n            } else if (head.val == target) {\\n                //等于\\n                if (Objects.isNull(eh)) {\\n                    eh = head;\\n                } else {\\n                    et.next = head;\\n                }\\n                et = head;\\n            } else {\\n                //大于\\n                if (Objects.isNull(mh)) {\\n                    mh = head;\\n                } else {\\n                    mt.next = head;\\n                }\\n                mt = head;\\n            }\\n            head = next;\\n        }\\n        if (Objects.nonNull(st)) {\\n            st.next = eh;\\n            et = Objects.isNull(et) ? st : et;\\n        }\\n        if (Objects.nonNull(et)) {\\n            et.next = mh;\\n        }\\n        return Objects.nonNull(sh) ? sh : (Objects.nonNull(eh) ? eh : mh);\\n    }\\n\\n    private static void swap(List<ListNode> listNodes, int i, int j) {\\n        ListNode temp = listNodes.get(i);\\n        listNodes.set(i, listNodes.get(j));\\n        listNodes.set(j, temp);\\n    }\\n\\n}\\n```\\n\\n## 判断成环链表\\n\\n给定一个链表判断链表中是否有环\\n\\n环形链表展示\\n\\n```mermaid\\ngraph LR\\na --> b\\nb --> c\\nc --> d\\nd --> f\\nf --> g\\ng --> h\\nh --> i\\ni --> j\\nj --> f\\n```\\n\\n### 辅助空间 - 集合\\n\\n使用set集合存储节点hashCode或地址，若添加成功继续，否则成环，第一个失败的为入环节点\\n\\n若遍历至空则说明不成环\\n\\n### 快慢指针 - 不使用辅助空间\\n\\n快指针一次走两步，慢指针一次一步，若快指针为空则不成环，否则快慢指针必相遇，相遇即成环\\n\\n相遇后快指针指向头，慢指针不动，然后快慢指针一次都走一步，再相遇时的节点为入环节点\\n\\n___代码在相交链表中一同展示（下一问题）___\\n\\n## 相交链表\\n\\n给定两个链表，有可能成环有可能不成环，判断这两个链表是否相交\\n\\n**两个都不成环**：只有一种情况\\n\\n```mermaid\\ngraph LR\\na --> b\\nb --> c\\nc --> d\\nd --> e\\nf --> g\\ng --> h\\nh --> d\\n```\\n\\n这种情况下相同特征为相交节点后的节点相同（hashCode或地址），也就是说最后一个节点的hashCode或地址必相同 ——相同即相交，不相同即不相交\\n\\n**一个成环一个不成环**：必不相交\\n\\n**两个都成环**:有三种情况\\n\\n- 不相交 - 各自成环 - 入环节点不同\\n\\n  ```mermaid\\n  graph LR\\n   a --> b\\n   b --> c\\n   c --> d\\n   d --> f\\n   f --> e\\n   e --> d\\n   1 -->2\\n   2 -->3\\n   3 -->4\\n   4 -->5\\n   5 -->6\\n   6 -->4\\n  ```\\n\\n- 相交 - 入环节点相同\\n\\n  ```mermaid\\n  graph LR\\n  a --> b\\n  b --> c\\n  c --> d\\n  d --> A\\n  A --> B\\n  B --> C\\n  C --> D\\n  D --> B\\n  1 --> 2\\n  2 --> 3\\n  3 --> 4\\n  4 --> A\\n  ```\\n\\n- 相交 - 入环节点不同\\n\\n  ```mermaid\\n  graph LR\\n  1 --> 2\\n  2 --> 3\\n  3 --> 4\\n  a --> b\\n  b --> c\\n  c --> d\\n  A --> B\\n  B --> C\\n  C --> D\\n  D --> F\\n  F --> A\\n  4 --> A\\n  d --> D\\n  ```\\n\\n相同入环节点，必相交\\n\\n不同入环节点，两链表各自都移动至入环节点，一个不动 (head1)，另一个移动一圈(head2)，若在移动过程中head2的hashCode或地址等于head1则说明相交，反之则不相交\\n\\n### 代码展示\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.*;\\n\\n/**\\n * ClassName:HasCycle\\n * Package:com.heyqing\\n * Description:\\n * 环形链表\\n *\\n * @Date:2024/10/19\\n * @Author:Heyqing\\n */\\npublic class HasCycle {\\n\\n    /**\\n     * 判断成环 -集合\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean hasCycleV1(ListNode head) {\\n        /*\\n        使用hashcode与set\\n         */\\n        Set<Integer> set = new HashSet<>();\\n        while (Objects.nonNull(head)) {\\n            if (!set.add(head.hashCode())) return true;\\n            head = head.next;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 判断成环 -快慢指针\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean hasCycleV2(ListNode head) {\\n        ListNode quick = head;\\n        ListNode slow = head;\\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\\n            quick = quick.next.next;\\n            slow = slow.next;\\n            if (Objects.equals(quick, slow)) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 获取入环节点\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static List<Integer> getEnterCycleNode(ListNode head) {\\n        /*\\n        获取入环节点有多种解，这里只说明快慢指针的方式\\n        快指针一次两步，慢指针一次一步\\n        相遇后，慢指针不动，快指针指向头部\\n        再次相遇节点为入环节点\\n         */\\n        if (Objects.isNull(head)) return null;\\n        List<Integer> list = new ArrayList<>(3);\\n        ListNode quick = head;\\n        ListNode slow = head;\\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\\n            quick = quick.next.next;\\n            slow = slow.next;\\n            if (Objects.equals(quick, slow)) break;\\n        }\\n        quick = head;\\n        int count = 1;\\n        while (Objects.nonNull(quick)) {\\n            count++;\\n            quick = quick.next;\\n            slow = slow.next;\\n            if (Objects.equals(quick, slow)) break;\\n        }\\n        list.add(count);\\n        list.add(quick.val);\\n        list.add(quick.hashCode());\\n        return list;\\n    }\\n\\n    /**\\n     * 判断相交链表\\n     * <p>\\n     * 成环 - 相交 / 不相交\\n     * 不成环 - 相交 / 不相交\\n     *\\n     * @param head1\\n     * @param head2\\n     * @return\\n     */\\n    public static boolean intersectLinked(ListNode head1, ListNode head2) {\\n        //判断有无环\\n        boolean isCycleByHead1 = hasCycleV2(head1);\\n        boolean isCycleByHead2 = hasCycleV2(head2);\\n        if ((isCycleByHead1 && !isCycleByHead2) || (!isCycleByHead1 && isCycleByHead2)) {\\n            //一个成环一个不成环 - 必不相交\\n            return false;\\n        }\\n        //不成环\\n        if (!isCycleByHead1) {\\n            return intersectLinkedByNoCycle(head1, head2);\\n        }\\n        //成环\\n        return intersectLinkedByCycle(head1, head2);\\n    }\\n\\n    /**\\n     * 判断相交 - 成环\\n     *\\n     * @param head1\\n     * @param head2\\n     * @return\\n     */\\n    private static boolean intersectLinkedByCycle(ListNode head1, ListNode head2) {\\n        /*\\n        获取其入环节点\\n        如果其入环节点相等必相交\\n        如果不等分各自成环（2个环），共成环（1个环）\\n        入环后一个不动，一个走一圈，若期间碰到相交反之不相交\\n         */\\n        ListNode cur2 = head2;\\n        List<Integer> enterCycleNodeByHead1 = getEnterCycleNode(head1);\\n        List<Integer> enterCycleNodeByHead2 = getEnterCycleNode(head2);\\n        Integer head1Point = enterCycleNodeByHead1.get(2);\\n        Integer head2Point = enterCycleNodeByHead2.get(2);\\n        //让 cur1不动\\n        while (cur2.hashCode() != head2Point) {\\n            cur2 = cur2.next;\\n        }\\n        cur2 = cur2.next;\\n        while (cur2.hashCode() != head2Point) {\\n            if (cur2.hashCode() == head1Point) return true;\\n            cur2 = cur2.next;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 判断相交 - 无环\\n     *\\n     * @param head1\\n     * @param head2\\n     * @return\\n     */\\n    private static boolean intersectLinkedByNoCycle(ListNode head1, ListNode head2) {\\n        ListNode cur1 = head1, cur2 = head2;\\n        while (Objects.nonNull(cur1.next)) {\\n            cur1 = cur1.next;\\n        }\\n        while (Objects.nonNull(cur2.next)) {\\n            cur2 = cur2.next;\\n        }\\n        /*\\n        如果相交，最后必有相等部分，其中最后一个比相等\\n        若不等就不相交\\n         */\\n        return cur1.hashCode() == cur2.hashCode();\\n    }\\n}\\n```\\n\\n\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3dbc7381c6dcba70b53c4ff64bcf479b.jpg\",\"articleTitle\":\"链表解析：灵活高效的数据结构背后的秘密\",\"categoryName\":\"算法\",\"id\":148,\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:34:30', NULL);
INSERT INTO `t_operation_log` VALUES (1753, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/4be07f5c952b434ce4eafab60e1dd61f.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:38:08', NULL);
INSERT INTO `t_operation_log` VALUES (1754, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"二叉树是一种基础且重要的树形数据结构，其中每个节点最多有两个子节点，通常被称为左子节点和右子节点。它在计算机科学中广泛应用，特别是在数据查找、排序、表达式解析等领域。二叉树的种类繁多，最常见的包括二叉搜索树、平衡二叉树（如AVL树）和堆等。通过不同的遍历方法（前序、中序、后序、层序），二叉树可以以多种方式被操作和访问。由于其结构简单且查找、插入、删除等操作高效，二叉树在很多算法和数据结构中发挥着关键作用。本文将深入探讨二叉树的基本概念、常见类型及其应用，帮助你掌握这一重要的数据结构。\",\"articleContent\":\"## 简介\\n\\n> 本文主要以代码说明为主，若有不理解，或有错误地方可留言指出说明，感谢`^_^`\\n>\\n> 更多代码: [code](https://github.com/heyqing/csdn/tree/master/Algorithm/tree/src/com/heyqing)\\n\\n### 二叉树的基本概念\\n\\n二叉树是一种非线性的数据结构，它由节点组成，每个节点最多有两个子节点，通常称为左子节点和右子节点。二叉树的特点是每个节点的子节点数量不超过2，且子节点的位置是固定的，即左子节点在右子节点之前。二叉树可以是空的，也可以包含一个或多个节点。在二叉树中，根节点位于最高层级，没有父节点，而其他所有节点都至少有一个父节点\\n\\n### 二叉树的特殊类型\\n\\n- **满二叉树**:每一层的节点数都达到最大值，即除了最后一层外，每层都完全填满，且所有节点都尽可能地向左对齐\\n- **完全二叉树**:除了最后一层外，其他各层的节点数都达到最大值，且最后一层的节点都连续集中在左侧。满二叉树是完全二叉树的一种特例\\n- **平衡二叉树**:也称为$AVL$树，是一种特殊的二叉搜索树。它的特点是任何节点的两个子树的高度差的绝对值不超过1，并且左子树和右子树也都是平衡二叉树\\n- **搜索二叉树**:如果树非空，则树的根节点的值要么是小于其左子树中所有节点的值，要么是大于其右子树中所有节点的值;树的左子树和右子树本身也必须是二叉搜索树\\n\\n### 二叉树的性质\\n\\n- 对于非空二叉树，第i层最多有 $2^{i−1}$个节点。\\n- 深度为h的二叉树最多有 $2^h−1$个节点。\\n- 具有n个节点的满二叉树的高度 $h=log⁡(n+1)$（以2为底）。\\n- 在完全二叉树中，如果按照从上至下从左至右的数组顺序对所有节点进行编号，则第i个节点的双亲节点编号为 $⌊(i−1)/2⌋$，左孩子节点编号为 $2i+1$ ，右孩子节点编号为 $2i+2$\\n\\n### 二叉树的遍历\\n\\n- **前序遍历**：先访问根节点，再遍历左子树，最后遍历右子树。\\n- **中序遍历**：先遍历左子树，再访问根节点，最后遍历右子树。在二叉搜索树中，中序遍历会得到一个升序列。\\n- **后序遍历**：先遍历左子树和右子树，最后访问根节点。\\n- **层次遍历**：按照树的层次从上到下、从左到右进行遍历，通常使用队列来辅助实现\\n\\n## 二叉树的特殊类型\\n\\n### 满二叉树与完全二叉树\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.LinkedList;\\nimport java.util.Objects;\\nimport java.util.Queue;\\n\\n/**\\n * ClassName:CompleteBinaryTree\\n * Package:com.heyqing\\n * Description:\\n *\\n * @Date:2024/10/23\\n * @Author:Heyqing\\n */\\npublic class CompleteBinaryTree {\\n\\n    /**\\n     * 判断完全二叉树\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static boolean judgeBCT(TreeNode root) {\\n        /*\\n        使用层次遍历\\n        碰到第一个无右树的节点后的所有节点必须为叶子节点，否则就不是完全二叉树\\n         */\\n        if (Objects.isNull(root)) return false;\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        queue.offer(root);\\n        boolean noRight = false;\\n        while (!queue.isEmpty()) {\\n            int loop = queue.size();\\n            for (int i = 0; i < loop; i++) {\\n                TreeNode first = queue.poll();\\n                /*\\n                碰到第一个无右树节点后，发现有不是叶子节点的节点 - false\\n                 */\\n                if (noRight && (Objects.nonNull(first.left) || Objects.nonNull(first.right))) {\\n                    return false;\\n                }\\n                /*\\n                有右没左 - false\\n                 */\\n                if (Objects.isNull(first.left) && Objects.nonNull(first.right)) {\\n                    return false;\\n                }\\n                if (Objects.nonNull(first.left)) {\\n                    queue.offer(first.left);\\n                }\\n                if (Objects.nonNull(first.right)) {\\n                    queue.offer(first.right);\\n                } else {\\n                    /*\\n                    第一个无右树的节点\\n                     */\\n                    noRight = true;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\\n\\n### 平衡二叉树\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.Objects;\\n\\n/**\\n * ClassName:BalancedBinaryTree\\n * Package:com.heyqing\\n * Description:\\n * 平衡二叉树\\n *\\n * @Date:2024/10/24\\n * @Author:Heyqing\\n */\\npublic class BalancedBinaryTree {\\n    /*\\n    平衡二叉树 : | left.height - right.height | <= 1\\n     */\\n\\n\\n    /**\\n     * 平衡二叉树判断返回类\\n     */\\n    private static class BalanceInfo {\\n        /**\\n         * 是否为平衡二叉树\\n         */\\n        private boolean isBalance;\\n\\n        /**\\n         * 树高\\n         */\\n        private int height;\\n\\n        public BalanceInfo(boolean isBalance, int height) {\\n            this.isBalance = isBalance;\\n            this.height = height;\\n        }\\n    }\\n\\n    /**\\n     * 判断平衡二叉树\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static boolean isBBT(TreeNode root) {\\n        return achieveFuncByBalance(root).isBalance;\\n    }\\n\\n    /**\\n     * 是否为平衡二叉树 - 实现函数\\n     *\\n     * @param root\\n     * @return\\n     */\\n    private static BalanceInfo achieveFuncByBalance(TreeNode root) {\\n        /*\\n        是否为平衡二叉树需要满足：左子树和右子树为平衡二叉树，自己的左右子树高度差小于等于 1\\n         */\\n        // 触底返回 - 叶子节点是平衡二叉树\\n        if (Objects.isNull(root)) return new BalanceInfo(true, 0);\\n        // 获取当前树的左子树\\n        BalanceInfo left = achieveFuncByBalance(root.left);\\n        // 获取当前树的右子树\\n        BalanceInfo right = achieveFuncByBalance(root.right);\\n        // 当前树高等于 ：子树最大高度 + 1\\n        int height = Math.max(left.height, right.height) + 1;\\n        // 当前树是不是平衡二叉树 ：左子树是平衡二叉树 and 右子树是平衡二叉树 and 自己的左右子树高度差小于 1\\n        boolean isBalance = left.isBalance && right.isBalance && Math.abs(left.height - right.height) <= 1;\\n        // 将当前树返回至顶层\\n        return new BalanceInfo(isBalance, height);\\n    }\\n\\n\\n}\\n```\\n\\n### 搜索二叉树\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.Objects;\\n\\n/**\\n * ClassName:SearchBinaryTree\\n * Package:com.heyqing\\n * Description:\\n * 搜索二叉树\\n *\\n * @Date:2024/10/22\\n * @Author:Heyqing\\n */\\npublic class SearchBinaryTree {\\n\\n    /**\\n     * 判断是否为搜索二叉树\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static boolean judgeBST(TreeNode root) {\\n        /*\\n        搜索二叉树：左子树都比自己小，右子树都比自己大\\n        使用中序遍历 LDR\\n        左树为搜索二叉树，右树为搜索二叉树\\n        左树的最大值小于 当前树\\n        右树的最小数大于 当前树\\n         */\\n        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);\\n    }\\n\\n    private static boolean isValidBST(TreeNode node, long minValue, long maxValue) {\\n        if (Objects.isNull(node)) {\\n            return true;\\n        }\\n        /*\\n        小于最小值或大于最大值 - 不是搜索二叉树\\n         */\\n        if (node.val <= minValue || node.val >= maxValue) {\\n            return false;\\n        }\\n        return isValidBST(node.left, minValue, node.val) && isValidBST(node.right, node.val, maxValue);\\n    }\\n}\\n```\\n\\n## 二叉树的遍历\\n\\n### 前序遍历\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Objects;\\nimport java.util.Stack;\\n\\n/**\\n * ClassName:PreOrder\\n * Package:com.heyqing\\n * Description:\\n * 先序遍历 ：DLR\\n *\\n * @Date:2024/10/21\\n * @Author:Heyqing\\n */\\npublic class PreOrder {\\n\\n\\n    /**\\n     * 先序遍历 - 递归\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static List<Integer> preOrderByRecursion(TreeNode root) {\\n        List<Integer> result = new ArrayList<>();\\n        return achieveFuncByPOR(root, result);\\n    }\\n\\n    /**\\n     * 实现函数 - 先序遍历 - 递归\\n     *\\n     * @param root\\n     * @param result\\n     * @return\\n     */\\n    private static List<Integer> achieveFuncByPOR(TreeNode root, List<Integer> result) {\\n        if (Objects.isNull(root)) return result;\\n        result.add(root.val);\\n        achieveFuncByPOR(root.left, result);\\n        achieveFuncByPOR(root.right, result);\\n        return result;\\n    }\\n\\n    /**\\n     * 先序遍历 - 非递归\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static List<Integer> inOrderByNonRecursion(TreeNode root) {\\n        /*\\n        定义栈先将头压入\\n        然后弹出，获得栈顶元素进行操作，弹出后将孩子节点压入栈中（先右再左）\\n         */\\n        if (Objects.isNull(root)) return null;\\n        List<Integer> result = new ArrayList<>();\\n        Stack<TreeNode> stack = new Stack<>();\\n        stack.push(root);\\n        while (!stack.isEmpty()) {\\n            TreeNode top = stack.pop();\\n            result.add(top.val);\\n            //先右\\n            if (Objects.nonNull(top.right)) {\\n                stack.push(top.right);\\n            }\\n            //后左\\n            if (Objects.nonNull(top.left)) {\\n                stack.push(top.left);\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```\\n\\n### 中序遍历\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Objects;\\nimport java.util.Stack;\\n\\n/**\\n * ClassName:InOrder\\n * Package:com.heyqing\\n * Description:\\n * 中序遍历：LDR\\n *\\n * @Date:2024/10/21\\n * @Author:Heyqing\\n */\\npublic class InOrder {\\n\\n    /**\\n     * 中序遍历 - 递归\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static List<Integer> inOrderByRecursion(TreeNode root) {\\n        List<Integer> listLDR = new ArrayList<>();\\n        return achieveFuncByIOR(root, listLDR);\\n    }\\n\\n    /**\\n     * 中序遍历递归 - 实现函数\\n     *\\n     * @param root\\n     * @param listLDR\\n     * @return\\n     */\\n    private static List<Integer> achieveFuncByIOR(TreeNode root, List<Integer> listLDR) {\\n        if (Objects.isNull(root)) return listLDR;\\n        achieveFuncByIOR(root.left, listLDR);\\n        listLDR.add(root.val);\\n        achieveFuncByIOR(root.right, listLDR);\\n        return listLDR;\\n    }\\n\\n    /**\\n     * 中序遍历 - 非递归\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static List<Integer> inOrderByNonRecursion(TreeNode root) {\\n        /*\\n        使用栈\\n        先将左边界压栈\\n        然后栈中一个 操作 再压入有孩子\\n         */\\n        List<Integer> listLDR = new ArrayList<>();\\n        Stack<TreeNode> stack = new Stack<>();\\n        pushAllLeftNode(stack, root);\\n        while (!stack.isEmpty()) {\\n            TreeNode top = stack.pop();\\n            if (Objects.nonNull(top)) {\\n                listLDR.add(top.val);\\n                pushAllLeftNode(stack, top.right);\\n            }\\n        }\\n        return listLDR;\\n    }\\n\\n    /**\\n     * 将所有左边界压入栈中\\n     *\\n     * @param stack\\n     * @param root\\n     */\\n    private static void pushAllLeftNode(Stack<TreeNode> stack, TreeNode root) {\\n        while (Objects.nonNull(root)) {\\n            stack.push(root);\\n            root = root.left;\\n        }\\n    }\\n}\\n```\\n\\n### 后序遍历\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Objects;\\nimport java.util.Stack;\\n\\n/**\\n * ClassName:PostOrder\\n * Package:com.heyqing\\n * Description:\\n * 后序遍历:LRD\\n *\\n * @Date:2024/10/21\\n * @Author:Heyqing\\n */\\npublic class PostOrder {\\n\\n    /**\\n     * 后序遍历 - 递归\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static List<Integer> postOrderByRecursion(TreeNode root) {\\n        List<Integer> result = new ArrayList<>();\\n        return achieveFuncByPoOR(root, result);\\n    }\\n\\n    /**\\n     * 实现函数 - 后序遍历 - 递归\\n     *\\n     * @param root\\n     * @param result\\n     */\\n    private static List<Integer> achieveFuncByPoOR(TreeNode root, List<Integer> result) {\\n        if (Objects.isNull(root)) return result;\\n        achieveFuncByPoOR(root.left, result);\\n        achieveFuncByPoOR(root.right, result);\\n        result.add(root.val);\\n        return result;\\n    }\\n\\n    /**\\n     * 后序遍历 - 非递归\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static List<Integer> postOrderByNonRecursion(TreeNode root) {\\n        /*\\n        申请两个栈\\n        先将root压入栈中\\n        再将stack1弹出top1，向stack1压入top1的孩子（向左后右），将top1压入stack2，直至stack1 为空\\n        依次弹出stack2\\n         */\\n        List<Integer> result = new ArrayList<>();\\n        Stack<TreeNode> stack1 = new Stack<>();\\n        Stack<TreeNode> stack2 = new Stack<>();\\n        stack1.push(root);\\n        while (!stack1.isEmpty()) {\\n            TreeNode top1 = stack1.pop();\\n            if (Objects.nonNull(top1.left)) {\\n                stack1.push(top1.left);\\n            }\\n            if (Objects.nonNull(top1.right)) {\\n                stack1.push(top1.right);\\n            }\\n            stack2.push(top1);\\n        }\\n        while (!stack2.isEmpty()) {\\n            result.add(stack2.pop().val);\\n        }\\n        return result;\\n    }\\n}\\n```\\n\\n### 层次遍历\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.*;\\n\\n/**\\n * ClassName:LevelOrder\\n * Package:com.heyqing\\n * Description:\\n * 层次遍历\\n *\\n * @Date:2024/10/21\\n * @Author:Heyqing\\n */\\npublic class LevelOrder {\\n\\n    /**\\n     * 层次遍历\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static List<Integer> levelOrder(TreeNode root) {\\n        if (Objects.isNull(root)) return null;\\n        List<Integer> result = new ArrayList<>();\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        queue.offer(root);\\n        while (!queue.isEmpty()) {\\n            TreeNode first = queue.poll();\\n            result.add(first.val);\\n            if (Objects.nonNull(first.left)) {\\n                queue.offer(first.left);\\n            }\\n            if (Objects.nonNull(first.right)) {\\n                queue.offer(first.right);\\n            }\\n        }\\n        return result;\\n    }\\n\\n\\n    /**\\n     * 层次遍历 - 分层\\n     *\\n     * @param root\\n     * @return\\n     */\\n    public static List<List<Integer>> levelOrderLayer(TreeNode root) {\\n        if (Objects.isNull(root)) return null;\\n        List<List<Integer>> result = new ArrayList<>();\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        queue.offer(root);\\n        while (!queue.isEmpty()) {\\n            int loop = queue.size();\\n            List<Integer> temp = new ArrayList<>(loop);\\n            for (int i = 0; i < loop; i++) {\\n                TreeNode first = queue.poll();\\n                temp.add(first.val);\\n                if (Objects.nonNull(first.left)) {\\n                    queue.offer(first.left);\\n                }\\n                if (Objects.nonNull(first.right)) {\\n                    queue.offer(first.right);\\n                }\\n            }\\n            result.add(temp);\\n        }\\n        return result;\\n    }\\n}\\n```\\n\\n## 二叉树的简单题练习 \\n\\n## 最低公共祖先\\n\\n给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\\n\\n[百度百科](https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin)中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（**一个节点也可以是它自己的祖先**）。”\\n\\n## 纸条折痕\\n\\n请把一段纸条竖着放在桌子上，然后从纸条的下边向上方对折1次，压出折痕后展开。此时折痕是凹下去的（下折痕），即折痕突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折2次，压出折痕后展开，此时有三条折痕，从上到下依次是下折痕、下折痕和上折痕。\\n\\n给定一个输入参数N，代表纸条从下边向上方连续对折N次。请从上到下打印所有折痕的方向。\\n\\n## 答案\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.*;\\n\\n/**\\n * ClassName:Question\\n * Package:com.heyqing\\n * Description:\\n *\\n * @Date:2024/10/23\\n * @Author:Heyqing\\n */\\npublic class Question {\\n\\n\\n    /**\\n     * 最低公共祖先 - The Lowest Common Ancestor\\n     *\\n     * @param root\\n     * @param node1\\n     * @param node2\\n     * @param version\\n     * @return\\n     */\\n    public static List<Integer> lca(TreeNode root, TreeNode node1, TreeNode node2, String version) {\\n        /*\\n        val1和val2一定在树上\\n        version1:使用map，记录每个节点的父节点，\\n                然后将node1一致回溯到头节点，再将node2回溯到头，\\n                在node2回溯的过程中set添加失败节点即为共同祖先\\n        version2: 纯算法 *_*\\n         */\\n        // 返回 node.hashcode 和 value\\n        List<Integer> result = new ArrayList<>(2);\\n        if (version.equals(\\\"v1\\\")) return lcaV1(root, node1, node2);\\n        if (version.equals(\\\"v2\\\")) return lcaV2(root, node1, node2);\\n        return result;\\n    }\\n\\n    /**\\n     * 纸条折痕\\n     *\\n     * @param n\\n     * @return\\n     */\\n    public static List<String> PaperFold(int n) {\\n        /*\\n        将一个纸条面向自己对折，从上到下出现一个折痕，这个折痕是向外凸向里凹的，称之为凹折痕，反之则为凸折痕\\n        问一个纸条在理想条件下这样往复对折 n 次 ，从上到下的折痕依次是什么折痕\\n         */\\n        List<String> fold = new ArrayList<>(((1 << n) - 1));\\n        achieveFuncByPaperFold(1, n, true, fold);\\n        return fold;\\n    }\\n\\n\\n    /******************************************************private******************************************************/\\n\\n    /**\\n     * 纸条折痕 - 实现函数\\n     *\\n     * @param i\\n     * @param n\\n     * @param down\\n     * @param fold\\n     */\\n    private static void achieveFuncByPaperFold(int i, int n, boolean down, List<String> fold) {\\n        /*\\n        对折 n 次后，产生的折痕是以 凹折痕为root节点其所有左子树都是以凹折痕这位root，右子树为凸折痕为root\\n        中序遍历即可得到从上到下的折痕顺序\\n         */\\n        if (i > n) return;\\n        achieveFuncByPaperFold(i + 1, n, true, fold);\\n        fold.add(down ? \\\"down\\\" : \\\"up\\\");\\n        achieveFuncByPaperFold(i + 1, n, false, fold);\\n    }\\n\\n    /**\\n     * 最低公共祖先 - v1 - map\\n     *\\n     * @param root\\n     * @param node1\\n     * @param node2\\n     * @return\\n     */\\n    private static List<Integer> lcaV1(TreeNode root, TreeNode node1, TreeNode node2) {\\n        /*\\n        使用map，记录每个节点的父节点，\\n        然后将node1一致回溯到头节点，再将node2回溯到头，\\n        在node2回溯的过程中set添加失败节点即为共同祖先\\n         */\\n        List<Integer> result = new ArrayList<>(2);\\n        Map<TreeNode, TreeNode> fatherMap = new HashMap<>();\\n        achieveFuncByFullFatherMap(root, fatherMap);\\n        Set<TreeNode> node1FatherSet = new HashSet<>();\\n        TreeNode cur = node1;\\n        while (!Objects.equals(cur, fatherMap.get(cur))) {\\n            node1FatherSet.add(cur);\\n            cur = fatherMap.get(cur);\\n        }\\n        // 将头节点加入\\n        node1FatherSet.add(root);\\n        cur = node2;\\n        while (!Objects.equals(cur, fatherMap.get(cur))) {\\n            TreeNode father = fatherMap.get(cur);\\n            if (node1FatherSet.contains(father)) {\\n                //此时的father为最低公共祖先\\n                result.add(father.hashCode());\\n                result.add(father.val);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * 最低公共祖先 - v2\\n     *\\n     * @param root\\n     * @param node1\\n     * @param node2\\n     * @return\\n     */\\n    private static List<Integer> lcaV2(TreeNode root, TreeNode node1, TreeNode node2) {\\n        List<Integer> result = new ArrayList<>(2);\\n        TreeNode father = achieveFuncByLcaV2(root, node1, node2);\\n        result.add(father.hashCode());\\n        result.add(father.val);\\n        return result;\\n    }\\n\\n    /**\\n     * 最低公共祖先 - v2 - 实现函数\\n     *\\n     * @param root\\n     * @param node1\\n     * @param node2\\n     * @return\\n     */\\n    private static TreeNode achieveFuncByLcaV2(TreeNode root, TreeNode node1, TreeNode node2) {\\n        /*\\n        root 可能出现的情况\\n        node1,node2一个是另一个的最低公共祖先，特点就是与node1，node2的兄弟树必没有匹配值 ： 先碰到谁谁就是最低公共祖先\\n        node1,node2一个不是另一个的最低公共祖先，特特点是他们分别在兄弟树上，必汇聚至一点 ：第一个左右子树都右返回值的点\\n         */\\n        // 碰到 null 返回 null，碰到 node1 返回 node1 ，碰到 node2 返回 node2\\n        if (Objects.isNull(root) || Objects.equals(root, node1) || Objects.equals(root, node2)) {\\n            return root;\\n        }\\n        // left，right 就四种情况 null , node1 , node2 ,father\\n        TreeNode left = achieveFuncByLcaV2(root.left, node1, node2);\\n        TreeNode right = achieveFuncByLcaV2(root.right, node1, node2);\\n        // 这里为第四中情况，最多只会出现一次，即当前树的左子树与右子树分别有node1和node2\\n        // 出现过一次以后必不会再出现，因为node1，node2都在当前树下，兄弟节点返回的必为null\\n        if (Objects.nonNull(left) && Objects.nonNull(right)) {\\n            return root;\\n        }\\n        // 有两种种情况会走到这 ： 1、node1,node2一个是另一个的最低公共祖先，2、第四中情况出现过一次后\\n        // 归根结底是因为两个节点都在当前树下，兄弟节点必为 null\\n        return Objects.nonNull(left) ? left : right;\\n    }\\n\\n    /**\\n     * 填充父map\\n     *\\n     * @param root\\n     * @param fatherMap\\n     */\\n    private static void achieveFuncByFullFatherMap(TreeNode root, Map<TreeNode, TreeNode> fatherMap) {\\n        if (Objects.isNull(root)) return;\\n        fatherMap.put(root.left, root);\\n        fatherMap.put(root.right, root);\\n        achieveFuncByFullFatherMap(root.left, fatherMap);\\n        achieveFuncByFullFatherMap(root.right, fatherMap);\\n    }\\n}\\n```\\n\\n\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/4be07f5c952b434ce4eafab60e1dd61f.jpg\",\"articleTitle\":\"“二叉树探索：从基础到应用，揭开数据结构的奥秘”\",\"categoryName\":\"算法\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:38:28', NULL);
INSERT INTO `t_operation_log` VALUES (1755, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"链表是一种灵活且高效的线性数据结构，它由一系列节点组成，每个节点包含数据和指向下一个节点的指针。与数组不同，链表的元素不需要连续存储，因此在进行插入和删除操作时，链表具有更高的效率。根据节点之间的连接方式，链表可以分为单向链表、双向链表和循环链表。单向链表的节点只指向下一个节点，双向链表的节点则既指向前一个节点也指向后一个节点，而循环链表则将尾节点与头节点相连，形成一个闭环。链表在动态内存管理和实现复杂数据结构（如队列、栈等）时，发挥着重要作用。\",\"articleContent\":\"# 链表\\n\\n## 简介\\n\\n链表是一种基本的数据结构，它由一系列节点（或称为元素）组成，这些节点在内存中不一定是连续的。每个节点通常包含两部分：一部分是存储数据的数据域，另一部分是存储指向下一个节点地址的指针域。链表的特点是可以动态地添加和删除节点，而且不需要像数组那样在创建时就确定其大小。链表的头节点是指向链表第一个节点的指针，而头指针是链表的入口点，用于访问链表中的元素。\\n\\n链表有几种类型，包括：\\n\\n- **单向链表**：每个节点只有一个指针，指向链表中的下一个节点。\\n- **双向链表**：每个节点有两个指针，一个指向下一个节点，另一个指向前一个节点，允许双向遍历。\\n- **循环链表**：最后一个节点的指针指向链表的第一个节点，形成一个环状结构。\\n- **静态链表**：使用数组来模拟链表，每个数组元素存储数据的同时，还存储指向下一个元素的索引。\\n\\n下面以几个简单的题目例子来说明\\n\\n> 本文主要说明单向链表\\n>\\n> 更多代码(含运行示例)可前往：[Code](https://github.com/heyqing/csdn/tree/master/Algorithm/link)\\n\\n**注：链表题目一般不会很难，边界条件一定要选对**\\n\\n## 反转链表\\n\\n给定一个链表，返回该链表的逆序\\n\\n### 尾插法\\n\\n即用一个数组存储正向顺序，再逆向输出并尾插法即可(这里就不代码展示了)\\n\\n### 头插法\\n\\n使用递归思想，每次创建的都是后一个\\n\\n代码展示：\\n\\n```java\\n/**\\n* 反转链表\\n*\\n* @param head\\n* @return\\n*/\\npublic static ListNode reverseLinked(ListNode head) {\\n    return achieveFuncReverse(head, null);\\n}\\n\\n/**\\n* 反转链表实现函数\\n*\\n* @param head\\n* @param last\\n* @return\\n*/\\nprivate static ListNode achieveFuncReverse(ListNode head, ListNode last) {\\n    if (Objects.isNull(head)) return last; // 如果需反转链表为空返回\\n    // 将当前head值放入新node，将上一步的node放入next\\n    ListNode cur = new ListNode(head.val, last); \\n    //递归调用创建上一个\\n    return achieveFuncReverse(head.next, cur);\\n}\\n```\\n\\n## 回文链表\\n\\n给定一个链表判断当前链表是否为回文链表\\n\\n回文链表： 正向读等于反向读的链表，1-> 2 -> 3 -> 4 -> 3 -> 2 -> 1, 1 -> 2 -> 3 -> 3 -> 2 -> 1\\n\\n### 辅助空间 - 栈 - 全压栈\\n\\n使用栈将链表中的所有值压入栈中，再从头遍历链表，每遍历一个栈中弹出一个，若全部相等则为回文链表，反之则不然\\n\\n___代码后面统一展示___\\n\\n### 辅助空间 - 栈 - 压一半\\n\\n只将链表中的一半数据压入栈中，然后与另一半进行比较，相当于将链表进行对折\\n\\n如何只压一半，或者说压到哪里就说明已经压了一半了，这里就要介绍一种方法——**快慢指针**\\n\\n使用快慢指针找链表中点，即快指针一次走两步，慢指针一次走一步，当快指针走到最后时慢指针刚刚到达链表中间\\n\\n### 快慢指针 - 反转链表 - 不使用辅助空间\\n\\n第三种方法只使用有限的变量而不去借助栈等辅助空间\\n\\n使用快慢指针，当慢指针到达中点时，将当前慢指针指向空，慢指针后面的逆序，然后一边从头，一边从尾依次遍历比较\\n\\n举例说明一下，元链表为\\n\\n```mermaid\\ngraph LR\\na((1)) --> b((2))\\nb --> c((3))\\nc --> d((4))\\nd --> e((3))\\ne --> f((2))\\nf --> g((1))\\n```\\n\\n转换之后的为\\n\\n```mermaid\\ngraph LR\\na((1)) --> b((2))\\nb --> c((3))\\nc --> d((4))\\nf --> e((3))\\ng((1)) --> f((2))\\ne --> d\\nd --> h((null))\\n```\\n\\n然后从两边同步遍历，过程中若有一步不同则不是回文，若遍历到最后有一处为null，则说明过程中处处相等，即回文\\n\\n### 所有代码展示\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.Objects;\\nimport java.util.Stack;\\n\\nimport static com.heyqing.LinkTools.*;\\n\\n/**\\n * ClassName:IsPalindrome\\n * Package:com.heyqing\\n * Description:\\n * 回文链表\\n *\\n * @Date:2024/10/19\\n * @Author:Heyqing\\n */\\npublic class IsPalindrome {\\n\\n    /**\\n     * 栈 - 全压\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean isPalindromeV1(ListNode head) {\\n        Stack<Integer> stack = new Stack<>();\\n        ListNode p = head;\\n        while (Objects.nonNull(p)) {\\n            stack.push(p.val);\\n            p = p.next;\\n        }\\n        while (Objects.nonNull(head)) {\\n            if (stack.pop() - head.val != 0) return false;\\n            head = head.next;\\n        }\\n        return true;\\n    }\\n\\n\\n    /**\\n     * 栈 - 压一半\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean isPalindromeV2(ListNode head) {\\n        Stack<Integer> stack = new Stack<>();\\n        /*\\n        快慢指针\\n         */\\n        if (Objects.isNull(head) || Objects.isNull(head.next) || Objects.isNull(head.next.next)) {\\n            return judgeLinkedLengthLess3(head);\\n        }\\n        ListNode quick = head.next.next;\\n        ListNode slow = head.next;\\n        stack.push(head.val);\\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\\n            quick = quick.next.next;\\n            stack.push(slow.val);\\n            slow = slow.next;\\n        }\\n        if (Objects.nonNull(quick)) slow = slow.next;\\n        while (Objects.nonNull(slow)) {\\n            if (stack.pop() - slow.val != 0) return false;\\n            slow = slow.next;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * 快慢指针 - 反转后一半\\n     * <p>\\n     * 不使用额外空间（有限的几个变量）\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean isPalindromeV3(ListNode head) {\\n        if (Objects.isNull(head) || Objects.isNull(head.next) || Objects.isNull(head.next.next)) {\\n            return judgeLinkedLengthLess3(head);\\n        }\\n        ListNode quick = head;\\n        ListNode slow = head;\\n        ListNode reverse = null;\\n        while (Objects.nonNull(quick.next) && Objects.nonNull(quick.next.next)) {\\n            slow = slow.next;\\n            quick = quick.next.next;\\n        }\\n        /*\\n         快指针指向慢指针\\n         慢指针指向空\\n         使用reverse反转\\n         */\\n        quick = slow.next;\\n        slow.next = null;\\n        while (Objects.nonNull(quick)) {\\n            //记录下一个\\n            reverse = quick.next;\\n            //反转 指向上一个\\n            quick.next = slow;\\n            //记录当前位置，下一个的上一个\\n            slow = quick;\\n            //跳转至下一个\\n            quick = reverse;\\n        }\\n        quick = head;\\n        while (Objects.nonNull(slow) && Objects.nonNull(quick)) {\\n            if (slow.val != quick.val) return false;\\n            slow = slow.next;\\n            quick = quick.next;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * 长度小于 3 的链表\\n     *\\n     * @param head\\n     * @return\\n     */\\n    private static boolean judgeLinkedLengthLess3(ListNode head) {\\n        if (Objects.isNull(head) || Objects.isNull(head.next)) {\\n            return true;\\n        }\\n        if (Objects.isNull(head.next.next)) {\\n            return head.val == head.next.val;\\n        } else {\\n            return head.val == head.next.next.val;\\n        }\\n    }\\n}\\n```\\n\\n## 划分链表\\n\\n给定一个链表，和一个划分数值 partition，结果将小于partition的node置于左边，等于的放中间，大于的放右边\\n\\n与荷兰国旗问题一致，有关荷兰国旗问题，在 [十大经典排序](https://blog.csdn.net/heyiqingsong/article/details/143024462) 中的**快速**排序**代码**中有所提及\\n\\n```mermaid\\ngraph LR\\na(partition = 5)\\nb((5)) --> c((4))\\nc --> d((7))\\nd --> e((2))\\ne --> f((5))\\nf --> g((8))\\n```\\n\\n划分后的链表为\\n\\n```mermaid\\ngraph LR\\nb((4)) --> c((2))\\nc --> d((5))\\nd --> e((5))\\ne --> f((8))\\nf --> g((7))\\n```\\n\\n小于、大于区域的node顺序不做要求\\n\\n### 辅助空间 - 数组\\n\\n将node存入数组，对数组进行荷兰国旗式的划分，再将node依次串起来\\n\\n### 有限变量 - 不使用辅助空间\\n\\n只是用7个变量实现划分，且保证稳定性\\n\\n定义node变量 小于首sh，小于尾st，等于首eh，等于尾et，大于首mh，大于尾mt，下一节点next\\n\\n从头遍历链表若小于partition，若sh为空将sh指向当前节点，将st的下一节点指向当前节点，然后将st等图当前节点，依次进行，等于大于同理，最后将两条链表串起来\\n\\n举例说明，依次获得三条链表\\n\\n```mermaid\\ngraph LR\\na[...]\\nb[...]\\nc[...]\\nsh --> a\\na --> st\\neh --> b\\nb -->et\\nmh --> c\\nc --> mt\\n```\\n\\n然后将三条链表串起来即可\\n\\n```mermaid\\ngraph LR\\na[...]\\nb[...]\\nc[...]\\nsh --> a\\na --> st\\neh --> b\\nb -->et\\nmh --> c\\nc --> mt\\nst --> eh\\net --> mh\\n```\\n\\n### 所有代码展示\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Objects;\\n\\n/**\\n * ClassName:PartitionLinked\\n * Package:com.heyqing\\n * Description:\\n * 划分链表\\n *\\n * @Date:2024/10/19\\n * @Author:Heyqing\\n */\\npublic class PartitionLinked {\\n\\n    /**\\n     * 划分链表 - 数组\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static ListNode partitionLinkedV1(ListNode head, int target) {\\n        if (Objects.isNull(head)) return null;\\n        List<ListNode> listNodes = new ArrayList<>();\\n        while (Objects.nonNull(head)) {\\n            listNodes.add(head);\\n            head = head.next;\\n        }\\n        //划分\\n        int size = listNodes.size(), min = -1, max = size;\\n        for (int i = 0; i < max; i++) {\\n            if (listNodes.get(i).val < target) {\\n                //小于\\n                swap(listNodes, i, min + 1);\\n                min++;\\n            } else if (listNodes.get(i).val > target) {\\n                //大于\\n                swap(listNodes, i, max - 1);\\n                i--;\\n                max--;\\n            }\\n        }\\n        //串起来\\n        ListNode result = new ListNode();\\n        ListNode p = result;\\n        for (int i = 0; i < size; i++) {\\n            p.next = listNodes.get(i);\\n            p = p.next;\\n        }\\n        p.next = null;\\n        return result.next;\\n    }\\n\\n    /**\\n     * 划分链表 - 有限变量\\n     * <p>\\n     * 保证稳定性\\n     *\\n     * @param head\\n     * @param target\\n     * @return\\n     */\\n    public static ListNode partitionLinkedV2(ListNode head, int target) {\\n        //定义小于 等于 大于 的首位指针\\n        ListNode sh = null, st = null, eh = null, et = null, mh = null, mt = null, next = null;\\n        while (Objects.nonNull(head)) {\\n            next = head.next;\\n            head.next = null;\\n            if (head.val < target) {\\n                //小于\\n                if (Objects.isNull(sh)) {\\n                    sh = head;\\n                } else {\\n                    st.next = head;\\n                }\\n                st = head;\\n            } else if (head.val == target) {\\n                //等于\\n                if (Objects.isNull(eh)) {\\n                    eh = head;\\n                } else {\\n                    et.next = head;\\n                }\\n                et = head;\\n            } else {\\n                //大于\\n                if (Objects.isNull(mh)) {\\n                    mh = head;\\n                } else {\\n                    mt.next = head;\\n                }\\n                mt = head;\\n            }\\n            head = next;\\n        }\\n        if (Objects.nonNull(st)) {\\n            st.next = eh;\\n            et = Objects.isNull(et) ? st : et;\\n        }\\n        if (Objects.nonNull(et)) {\\n            et.next = mh;\\n        }\\n        return Objects.nonNull(sh) ? sh : (Objects.nonNull(eh) ? eh : mh);\\n    }\\n\\n    private static void swap(List<ListNode> listNodes, int i, int j) {\\n        ListNode temp = listNodes.get(i);\\n        listNodes.set(i, listNodes.get(j));\\n        listNodes.set(j, temp);\\n    }\\n\\n}\\n```\\n\\n## 判断成环链表\\n\\n给定一个链表判断链表中是否有环\\n\\n环形链表展示\\n\\n```mermaid\\ngraph LR\\na --> b\\nb --> c\\nc --> d\\nd --> f\\nf --> g\\ng --> h\\nh --> i\\ni --> j\\nj --> f\\n```\\n\\n### 辅助空间 - 集合\\n\\n使用set集合存储节点hashCode或地址，若添加成功继续，否则成环，第一个失败的为入环节点\\n\\n若遍历至空则说明不成环\\n\\n### 快慢指针 - 不使用辅助空间\\n\\n快指针一次走两步，慢指针一次一步，若快指针为空则不成环，否则快慢指针必相遇，相遇即成环\\n\\n相遇后快指针指向头，慢指针不动，然后快慢指针一次都走一步，再相遇时的节点为入环节点\\n\\n___代码在相交链表中一同展示（下一问题）___\\n\\n## 相交链表\\n\\n给定两个链表，有可能成环有可能不成环，判断这两个链表是否相交\\n\\n**两个都不成环**：只有一种情况\\n\\n```mermaid\\ngraph LR\\na --> b\\nb --> c\\nc --> d\\nd --> e\\nf --> g\\ng --> h\\nh --> d\\n```\\n\\n这种情况下相同特征为相交节点后的节点相同（hashCode或地址），也就是说最后一个节点的hashCode或地址必相同 ——相同即相交，不相同即不相交\\n\\n**一个成环一个不成环**：必不相交\\n\\n**两个都成环**:有三种情况\\n\\n- 不相交 - 各自成环 - 入环节点不同\\n\\n  ```mermaid\\n  graph LR\\n   a --> b\\n   b --> c\\n   c --> d\\n   d --> f\\n   f --> e\\n   e --> d\\n   1 -->2\\n   2 -->3\\n   3 -->4\\n   4 -->5\\n   5 -->6\\n   6 -->4\\n  ```\\n\\n- 相交 - 入环节点相同\\n\\n  ```mermaid\\n  graph LR\\n  a --> b\\n  b --> c\\n  c --> d\\n  d --> A\\n  A --> B\\n  B --> C\\n  C --> D\\n  D --> B\\n  1 --> 2\\n  2 --> 3\\n  3 --> 4\\n  4 --> A\\n  ```\\n\\n- 相交 - 入环节点不同\\n\\n  ```mermaid\\n  graph LR\\n  1 --> 2\\n  2 --> 3\\n  3 --> 4\\n  a --> b\\n  b --> c\\n  c --> d\\n  A --> B\\n  B --> C\\n  C --> D\\n  D --> F\\n  F --> A\\n  4 --> A\\n  d --> D\\n  ```\\n\\n相同入环节点，必相交\\n\\n不同入环节点，两链表各自都移动至入环节点，一个不动 (head1)，另一个移动一圈(head2)，若在移动过程中head2的hashCode或地址等于head1则说明相交，反之则不相交\\n\\n### 代码展示\\n\\n```java\\npackage com.heyqing;\\n\\nimport java.util.*;\\n\\n/**\\n * ClassName:HasCycle\\n * Package:com.heyqing\\n * Description:\\n * 环形链表\\n *\\n * @Date:2024/10/19\\n * @Author:Heyqing\\n */\\npublic class HasCycle {\\n\\n    /**\\n     * 判断成环 -集合\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean hasCycleV1(ListNode head) {\\n        /*\\n        使用hashcode与set\\n         */\\n        Set<Integer> set = new HashSet<>();\\n        while (Objects.nonNull(head)) {\\n            if (!set.add(head.hashCode())) return true;\\n            head = head.next;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 判断成环 -快慢指针\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static boolean hasCycleV2(ListNode head) {\\n        ListNode quick = head;\\n        ListNode slow = head;\\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\\n            quick = quick.next.next;\\n            slow = slow.next;\\n            if (Objects.equals(quick, slow)) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 获取入环节点\\n     *\\n     * @param head\\n     * @return\\n     */\\n    public static List<Integer> getEnterCycleNode(ListNode head) {\\n        /*\\n        获取入环节点有多种解，这里只说明快慢指针的方式\\n        快指针一次两步，慢指针一次一步\\n        相遇后，慢指针不动，快指针指向头部\\n        再次相遇节点为入环节点\\n         */\\n        if (Objects.isNull(head)) return null;\\n        List<Integer> list = new ArrayList<>(3);\\n        ListNode quick = head;\\n        ListNode slow = head;\\n        while (Objects.nonNull(quick) && Objects.nonNull(quick.next)) {\\n            quick = quick.next.next;\\n            slow = slow.next;\\n            if (Objects.equals(quick, slow)) break;\\n        }\\n        quick = head;\\n        int count = 1;\\n        while (Objects.nonNull(quick)) {\\n            count++;\\n            quick = quick.next;\\n            slow = slow.next;\\n            if (Objects.equals(quick, slow)) break;\\n        }\\n        list.add(count);\\n        list.add(quick.val);\\n        list.add(quick.hashCode());\\n        return list;\\n    }\\n\\n    /**\\n     * 判断相交链表\\n     * <p>\\n     * 成环 - 相交 / 不相交\\n     * 不成环 - 相交 / 不相交\\n     *\\n     * @param head1\\n     * @param head2\\n     * @return\\n     */\\n    public static boolean intersectLinked(ListNode head1, ListNode head2) {\\n        //判断有无环\\n        boolean isCycleByHead1 = hasCycleV2(head1);\\n        boolean isCycleByHead2 = hasCycleV2(head2);\\n        if ((isCycleByHead1 && !isCycleByHead2) || (!isCycleByHead1 && isCycleByHead2)) {\\n            //一个成环一个不成环 - 必不相交\\n            return false;\\n        }\\n        //不成环\\n        if (!isCycleByHead1) {\\n            return intersectLinkedByNoCycle(head1, head2);\\n        }\\n        //成环\\n        return intersectLinkedByCycle(head1, head2);\\n    }\\n\\n    /**\\n     * 判断相交 - 成环\\n     *\\n     * @param head1\\n     * @param head2\\n     * @return\\n     */\\n    private static boolean intersectLinkedByCycle(ListNode head1, ListNode head2) {\\n        /*\\n        获取其入环节点\\n        如果其入环节点相等必相交\\n        如果不等分各自成环（2个环），共成环（1个环）\\n        入环后一个不动，一个走一圈，若期间碰到相交反之不相交\\n         */\\n        ListNode cur2 = head2;\\n        List<Integer> enterCycleNodeByHead1 = getEnterCycleNode(head1);\\n        List<Integer> enterCycleNodeByHead2 = getEnterCycleNode(head2);\\n        Integer head1Point = enterCycleNodeByHead1.get(2);\\n        Integer head2Point = enterCycleNodeByHead2.get(2);\\n        //让 cur1不动\\n        while (cur2.hashCode() != head2Point) {\\n            cur2 = cur2.next;\\n        }\\n        cur2 = cur2.next;\\n        while (cur2.hashCode() != head2Point) {\\n            if (cur2.hashCode() == head1Point) return true;\\n            cur2 = cur2.next;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 判断相交 - 无环\\n     *\\n     * @param head1\\n     * @param head2\\n     * @return\\n     */\\n    private static boolean intersectLinkedByNoCycle(ListNode head1, ListNode head2) {\\n        ListNode cur1 = head1, cur2 = head2;\\n        while (Objects.nonNull(cur1.next)) {\\n            cur1 = cur1.next;\\n        }\\n        while (Objects.nonNull(cur2.next)) {\\n            cur2 = cur2.next;\\n        }\\n        /*\\n        如果相交，最后必有相等部分，其中最后一个比相等\\n        若不等就不相交\\n         */\\n        return cur1.hashCode() == cur2.hashCode();\\n    }\\n}\\n```\\n\\n\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/3dbc7381c6dcba70b53c4ff64bcf479b.jpg\",\"articleTitle\":\"链表解析：灵活高效的数据结构背后的秘密\",\"categoryName\":\"算法\",\"id\":148,\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:38:40', NULL);
INSERT INTO `t_operation_log` VALUES (1756, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/861bf9799c783fdd328fe89e333fb805.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:40:34', NULL);
INSERT INTO `t_operation_log` VALUES (1757, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/1063f685bcc12f839544a452c22b9fda.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:41:02', NULL);
INSERT INTO `t_operation_log` VALUES (1758, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/43534d795511f0612f7cc25d7115ab0f.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:41:29', NULL);
INSERT INTO `t_operation_log` VALUES (1759, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ecaf7fe60f0ea84d5a5b099eae7341cb.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:41:50', NULL);
INSERT INTO `t_operation_log` VALUES (1760, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/f728124c15efb6da524c98ff98adfbfe.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:42:23', NULL);
INSERT INTO `t_operation_log` VALUES (1761, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5af9fb9767b54c10c2c47a6b5bf60e57.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:42:36', NULL);
INSERT INTO `t_operation_log` VALUES (1762, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6680808ea68590ed05df5eea92c8382a.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:42:49', NULL);
INSERT INTO `t_operation_log` VALUES (1763, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/943e62cec961f4d7b0381df81c18ad37.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:42:58', NULL);
INSERT INTO `t_operation_log` VALUES (1764, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/782b0e80653c0171f2083957bd840f2d.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:43:10', NULL);
INSERT INTO `t_operation_log` VALUES (1765, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cfd5c2294a942b916cf6c30990ae6b5d.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:43:29', NULL);
INSERT INTO `t_operation_log` VALUES (1766, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ca2fd8bf7de96bbea8d5f154c6cb0dc2.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:44:04', NULL);
INSERT INTO `t_operation_log` VALUES (1767, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/51a66963a48e815ef9b39524c8e10052.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:44:24', NULL);
INSERT INTO `t_operation_log` VALUES (1768, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0e9e686244a80256ea6568cbdebc99a8.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:44:54', NULL);
INSERT INTO `t_operation_log` VALUES (1769, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/b1b7a22c33c96bf495949220d3eb00d4.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:45:22', NULL);
INSERT INTO `t_operation_log` VALUES (1770, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0d2e25dba3aa184aada2a9234232cea5.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:45:52', NULL);
INSERT INTO `t_operation_log` VALUES (1771, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/b5c425d736b6bde32bb66adbb00d6183.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:46:12', NULL);
INSERT INTO `t_operation_log` VALUES (1772, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/f679e69593ce31061994f69bb07d7c3a.jpg\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:46:32', NULL);
INSERT INTO `t_operation_log` VALUES (1773, '文章模块', '上传', '/admin/articles/images', 'top.heyqing.heyblog.controller.ArticleController.saveArticleImages', '上传文章图片', 'file', 'POST', '{\"code\":20000,\"data\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/25e77e515c1a22a7f5ea8ab97fc0130d.png\",\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:48:04', NULL);
INSERT INTO `t_operation_log` VALUES (1774, '文章模块', '新增或修改', '/admin/articles', 'top.heyqing.heyblog.controller.ArticleController.saveOrUpdateArticle', '保存和修改文章', '[{\"articleAbstract\":\"Redis 是一个开源的高性能键值对存储系统，广泛用于缓存、消息队列、会话存储等场景。它支持丰富的数据结构，包括字符串、哈希、列表、集合、有序集合等，能够满足各种复杂的数据存储需求。作为一个内存数据库，Redis 的数据操作速度非常快，常用于提高应用程序的响应速度，尤其是在处理大量并发请求时表现出色。除了基础的存储功能，Redis 还提供持久化选项，允许将内存中的数据定期保存到磁盘，以保证数据不会丢失。本文将介绍 Redis 的基本概念、常见使用场景及其优势，帮助你了解如何利用 Redis 提升系统性能与可扩展性。\",\"articleContent\":\"# 1 Redis是什么\\n\\n> 官网：https://redis.io \\n>\\n> 开发者：Antirez\\n\\nRedis诞生于2009年全称是**Re**mote  **D**ictionary **S**erver 远程词典服务器，是一个基于内存的键值型NoSQL数据库。\\n\\nRedis是一个开源的、高性能的**键值对**存储系统，它支持多种数据结构，包括字符串、哈希、列表、集合、有序集合等。Redis通常被用作数据库、缓存和消息中间件。它以**内存存储**为主，因此读写速度极快，同时也支持数据的持久化，以防止数据丢失。Redis是**单线程**的，但得益于高效的I/O多路复用技术，它仍然能够处理大量的并发请求。并且**支持数据持久化**、**支持主从集群、分片集群**、**支持多语言客户端**。\\n\\n而NoSql则是相对于传统关系型数据库而言，有很大差异的一种数据库\\n\\n> NoSQl简介\\n>\\n> **NoSql：**Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为**非关系型数据库**。\\n>\\n> - 结构化与非结构化：传统关系型数据库是结构化数据，每一张表都有严格的约束信息：字段名、字段数据类型、字段约束等等信息，插入的数据必须遵守这些约束，而NoSql则对数据库格式没有严格约束，往往形式松散，自由。\\n> - 关联和非关联：传统数据库的表与表之间往往存在关联，例如外键，而非关系型数据库不存在关联关系，要维护关系要么靠代码中的业务逻辑，要么靠数据之间的耦合。\\n> - 查询方式：传统关系型数据库会基于Sql语句做查询，语法有统一标准，非关系数据库查询语法差异极大，五花八门各种各样。\\n>   - redis：get user:1\\n>   - mongodb：db.users.find({_id:1})\\n>   - elasticsearch:GET http://localhost:9200/users/1\\n> - 事务:传统关系型数据库能满足事务ACID的原则。而非关系型数据库往往不支持事务，或者不能严格保证ACID的特性，只能实现基本的一致性。\\n>\\n> ![rediscompare.png](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/861bf9799c783fdd328fe89e333fb805.png)\\n\\n# 2 Redis的安装\\n\\n通常情况下redis都是安装在Linux服务器上的，基于redis的特点在Linux上才会发挥其最佳效果，官网也推荐使用Linux。\\n\\n## 2.1 安装纯净版\\n\\n### 2.1.1 下载依赖库\\n\\nredis是基于C语言编写的，因此需要gcc环境\\n\\n```shell\\nyum install -y gcc tcl\\n```\\n\\n### 2.1.2 上传安装包并解压\\n\\n官网下载：http://download.redis.io/releases/\\n\\n建议下载第二位为偶数的如7.0.x 或 7.2.x 等等\\n\\n这里我下载的是`7.0.0`版本\\n\\n![redistar.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/1063f685bcc12f839544a452c22b9fda.jpg)\\n\\n上传至要存放的目录中如`\\\\opt`下\\n\\n进入压缩包所在目录\\n\\n```shell\\ntar -xzf redis-7.0.0.tar.gz\\n```\\n\\n进入redis目录，进行安装\\n\\n```shell\\n cd /opt/redis-7.0.0/\\nmake && make install\\n```\\n\\n该目录已经默认配置到环境变量`/usr/local/bin`\\n\\n![redisinstalldefaultpath.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/43534d795511f0612f7cc25d7115ab0f.jpg)\\n因此可以在任意目录下运行这些命令。其中：\\n\\n- `redis-cli`:是redis提供的命令行客户端\\n- `redis-server`:是redis的服务端启动脚本\\n- `redis-sentinel`:是redis的哨兵启动脚本\\n- `redis-benchmark`:性能测试工具\\n- `redis-check-aof`:修复有问题的AOF文件，\\n- `redis-check-aof`:修复有问题的dump.rdb文件\\n\\n### 2.1.3 修改配置文件\\n\\n进入到安装redis的目录，我这里是`/opt/redis-7.0.0/`\\n\\n![redisconfpath.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ecaf7fe60f0ea84d5a5b099eae7341cb.jpg)\\n这里建议先将原conf配置文件拷贝一份\\n\\n```shell\\ncp redis.conf /heyqings/myredis/\\n```\\n\\n`/heyqings/myredis/`为自定义目录\\n\\n![copyconfmypath.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/f728124c15efb6da524c98ff98adfbfe.jpg)\\n*修改配置文件后需重启生效*\\n\\n注意这里修改的是拷贝的文件\\n\\n1. 修改`daemonize no` -> `daemonize yes` （309行左右）：是否为后台启动\\n\\n![confdaemonize.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/5af9fb9767b54c10c2c47a6b5bf60e57.jpg)\\n2. 修改`protected-mode yes`->`protected-mode no`（111行左右）：是否开启保护模式\\n\\n![confprotectedmode.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/6680808ea68590ed05df5eea92c8382a.jpg)\\n3. 修改`bind 127.0.0.1`->直接注释（或改为本机IP）（87行左右）：允许访问的地址\\n\\n![confbind.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/943e62cec961f4d7b0381df81c18ad37.jpg)\\n4. 添加密码->requirepass设置你的密（1033行左右）\\n\\n![confrequirepass.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/782b0e80653c0171f2083957bd840f2d.jpg)\\n### 2.1.4 启动redis\\n\\n因redis安装默认安装在`/usr/local/bin`所以我们可以在任何地方使用redis命令\\n\\n启动redis服务并告诉其配置文件路径\\n\\n```shell\\nredis-server /heyqings/myredis/redis.conf\\n```\\n\\n没有消息就是好消息，若无错误报出则证明启动成功，可通过\\n\\n```shell\\nps -ef | grep redis | grep -v grep\\n```\\n\\n查看，结果为\\n\\n![startsuccessflag.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/cfd5c2294a942b916cf6c30990ae6b5d.jpg)\\n则证明启动成功\\n\\n**设置开机自启**\\n\\n首先需要新建一个服务文件\\n\\n```shell\\nvim /etc/systemd/system/redis.service\\n```\\n\\n其中内容如下\\n\\n```shell\\n[Unit]\\nDescription=redis-server\\nAfter=network.target\\n\\n[Service]\\nType=forking\\nExecStart=/usr/local/bin/redis-server /heyqings/myredis/redis.conf\\nPrivateTmp=true\\n\\n[Install]\\nWantedBy=multi-user.target\\n```\\n\\n然后重载系统服务\\n\\n```shell\\nsystemctl daemon-reload\\n\\n```\\n\\n开机自启\\n\\n```shell\\nsystemctl enable redis\\n\\n```\\n\\n现在我们可以用系统命令操作redis\\n\\n```shell\\n# 启动\\nsystemctl start redis\\n# 停止\\nsystemctl stop redis\\n# 重启\\nsystemctl restart redis\\n# 查看状态\\nsystemctl status redis\\n\\n```\\n\\n### 2.1.5 停止redis\\n\\n利用redis-cli来执行 `shutdown `命令，即可停止 Redis 服务\\n\\n```shell\\nredis-cli -u 123456 shutdown\\n\\n```\\n\\n`-u`后为密码也可用`-a`\\n\\n### 2.1.6 连接测试\\n\\nLinux服务器上可通过\\n\\n```shell\\nredis-cli -a 123456 -p 6379\\n\\n```\\n\\n进行连接`-a`后为密码，`-p`后为端口号，默认为6379\\n\\n![cliconnectsuccess.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/ca2fd8bf7de96bbea8d5f154c6cb0dc2.jpg)\\n## 2.2 docker安装redis\\n\\n### 2.2.1 拉取镜像\\n\\n```shell\\ndocker pull redis:7.0.0\\n\\n```\\n\\n![dockerpull.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/51a66963a48e815ef9b39524c8e10052.jpg)\\n拉取成功可通过`docker images`查看\\n\\n### 2.2.2 创建配置文件\\n\\n创建`redis.conf`我这里创建在`/heyqings/docker/redis/conf`目录下\\n\\n```shell\\ncd /heyqings/docker/redis/conf\\nvim redis.conf\\n\\n```\\n\\n里面内容为：\\n\\n```shell\\n# Redis服务器配置 \\n \\n# 绑定IP地址\\n#解除本地限制 注释bind 127.0.0.1  \\n#bind 127.0.0.1  \\n \\n# 服务器端口号  \\nport 6379 \\n \\n#配置密码，不要可以删掉\\nrequirepass 123456\\n  \\n \\n \\n#这个配置不要会和docker -d 命令 冲突\\n# 服务器运行模式，Redis以守护进程方式运行,默认为no，改为yes意为以守护进程方式启动，可后台运行，除非kill进程，改为yes会使配置文件方式启动redis失败，如果后面redis启动失败，就将这个注释掉\\ndaemonize no\\n \\n#当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定(自定义)\\n#pidfile /heyqings/docker/redis/run/redis6379.pid  \\n \\n#默认为no，redis持久化，可以改为yes\\nappendonly yes\\n \\n \\n#当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\\ntimeout 60\\n# 服务器系统默认配置参数影响 Redis 的应用\\nmaxclients 10000\\ntcp-keepalive 300\\n \\n#指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合（分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改）\\nsave 900 1\\nsave 300 10\\nsave 60 10000\\n \\n# 按需求调整 Redis 线程数\\ntcp-backlog 511\\n \\n\\n# 设置数据库数量，这里设置为16个数据库  \\ndatabases 16\\n \\n \\n# 启用 AOF, AOF常规配置\\nappendonly yes\\nappendfsync everysec\\nno-appendfsync-on-rewrite no\\nauto-aof-rewrite-percentage 100\\nauto-aof-rewrite-min-size 64mb\\n \\n# 慢查询阈值\\nslowlog-log-slower-than 10000\\nslowlog-max-len 128\\n \\n# 是否记录系统日志，默认为yes  \\nsyslog-enabled yes  \\n \\n#指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose\\nloglevel notice\\n  \\n# 日志输出文件，默认为stdout，也可以指定文件路径  \\nlogfile stdout\\n \\n# 日志文件\\n#logfile /var/log/redis/redis-server.log\\n \\n \\n# 系统内存调优参数   \\n# 按需求设置\\nhash-max-ziplist-entries 512\\nhash-max-ziplist-value 64\\nlist-max-ziplist-entries 512\\nlist-max-ziplist-value 64\\nset-max-intset-entries 512\\nzset-max-ziplist-entries 128\\nzset-max-ziplist-value 64\\n\\n```\\n\\n### 2.2.3 运行redis\\n\\n```shell\\ndocker run \\\\\\n-p 6378:6379 \\\\\\n--name domeredis \\\\\\n-v /heyqings/docker/redis/conf/redis.conf:/etc/redis/redis.conf \\\\\\n-v /heyqings/docker/redis/data:/var/lib/redis \\\\\\n-v /heyqings/docker/redis/logs:/logs \\\\\\n-d redis:7.0.0 redis-server /etc/redis/redis.conf\\n\\n```\\n\\n命令解释\\n\\n```bash\\n-p 端口号映射 主机端口：容器端口\\n-v 数据卷挂载\\n-d 后台运行\\n--name 容器名称\\n\\n```\\n\\n![dockerrunredis.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0e9e686244a80256ea6568cbdebc99a8.jpg)\\n查看是否启动\\n\\n`docker ps`若出现则成功\\n\\n![dockerpsredis.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/b1b7a22c33c96bf495949220d3eb00d4.jpg)\\n开机自启\\n\\n```shell\\ndocker update --restart=always domeredis\\n\\n```\\n\\n### 2.2.4 测试连接\\n\\n```shell\\ndocker exec -it domeredis bash\\n\\n```\\n\\n![dockertestconnect.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/0d2e25dba3aa184aada2a9234232cea5.jpg)\\n## 2.3 下载客户端\\n\\n**RedisDesktopManager**官网：https://redis.io/insight/\\n\\n下载并安装后进行连接\\n\\n点击【Connect to Redis Server】填写信息\\n\\n![rdmdockerconnect.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/b5c425d736b6bde32bb66adbb00d6183.jpg)\\n这里我填写的是docker容器中的redis，纯净版同理\\n\\n然后点击【Test Connection】出现\\n\\n![rdmdockerconnectsuccess.jpg](http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/f679e69593ce31061994f69bb07d7c3a.jpg)\\n依次点击【OK】即可\\n\\n# 3 Redis十大数据类型\\n\\n操作命令指南：https://redis.io/docs/latest/commands/\\n\\n## 3.0 前置-key的相关操作\\n\\n- `keys *`:查看当前库的所有key\\n- `exists key`:判断某个key是否存在\\n- `type key`:查看key的类型\\n- `del key`:删除key\\n- `unlink key`:非阻塞删除，仅仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作中\\n- `ttl key`:查看还有多少秒过期，-1：永不过期，-2：已过期\\n- `expire key`:秒钟，为key设置过期时间\\n- `move key dbindex`:将当前的key移动到给定数据库\\n- `select dbindex`:切换数据库\\n- `dbsize`:查看数据库key的数量\\n- `flushdb`:清空当前库\\n- `flushall`:通杀全部库\\n\\n***命令不区分大小写，key区分***\\n\\n通用操作\\n\\n```shell\\nSET key value [NX | XX] [GET] [EX seconds | PX milliseconds |\\n  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]\\n\\n```\\n\\nNX:不存在时创建\\n\\nXX:存在时创建\\n\\nGET:返回旧值插入新值\\n\\nEX:过期时间 秒\\n\\nPX:过期时间 毫秒\\n\\nEXAT:过期时间 unix时间 秒\\n\\nPXAT:过期时间 unix时间 毫秒\\n\\nKEEPTTL:保持过期时间\\n\\n## 3.1 String 字符串\\n\\n最基础数据类型，一般情况下key都为字符串类型\\n\\nString的常见命令有：\\n\\n- SET：添加或者修改已经存在的一个String类型的键值对\\n- GET：根据key获取String类型的value\\n- MSET：批量添加多个String类型的键值对\\n- MGET：根据多个key获取多个String类型的value\\n- INCR：让一个整型的key自增1\\n- INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2\\n- INCRBYFLOAT：让一个浮点类型的数字自增并指定步长\\n- SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行\\n- SETEX：添加一个String类型的键值对，并且指定有效期\\n\\n## 3.2 List 列表\\n\\n底层为双向链表\\n\\n- 有序\\n- 元素可以重复\\n- 插入和删除快\\n- 查询速度一般\\n\\nList的常见命令有：\\n\\n- LPUSH key element ... ：向列表左侧插入一个或多个元素\\n- LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil\\n- RPUSH key element ... ：向列表右侧插入一个或多个元素\\n- RPOP key：移除并返回列表右侧的第一个元素\\n- LRANGE key star end：返回一段角标范围内的所有元素\\n- LREM key number element:删除number个element\\n- BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil\\n\\n## 3.3 Set 集合\\n\\n无序，无重复集合\\n\\n- 无序\\n- 元素不可重复\\n- 查找快\\n- 支持交集、并集、差集等功能\\n\\nSet的常见命令有：\\n\\n- SADD key member ... ：向set中添加一个或多个元素\\n- SREM key member ... : 移除set中的指定元素\\n- SCARD key： 返回set中元素的个数\\n- SISMEMBER key member：判断一个元素是否存在于set中\\n- SMEMBERS：获取set中的所有元素\\n- SINTER key1 key2 ... ：求key1与key2的交集\\n- SINTERCARD numkeys key [key …] [LIMIT limit]:redis7新命令，返回结果的基数（返回由所有给定集合的交际产生的集合的基数）\\n\\n## 3.4 SortedSet 有序集合\\n\\n有序，无重复集合，关联double类型的分数(score),分数可重复\\n\\n- 可排序\\n- 元素不重复\\n- 查询速度快\\n\\nSortedSet的常见命令有：\\n\\n- ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值\\n- ZREM key member：删除sorted set中的一个指定元素\\n- ZSCORE key member : 获取sorted set中的指定元素的score值\\n- ZRANK key member：获取sorted set 中的指定元素的排名\\n- ZCARD key：获取sorted set中的元素个数\\n- ZCOUNT key min max：统计score值在给定范围内的所有元素的个数\\n- ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值\\n- ZRANGE key min max：按照score排序后，获取指定排名范围内的元素\\n- ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素\\n- ZDIFF、ZINTER、ZUNION：求差集、交集、并集\\n\\n注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：\\n\\n- **升序**获取sorted set 中的指定元素的排名：ZRANK key member\\n- **降序**获取sorted set 中的指定元素的排名：ZREVRANK key memeber\\n\\n## 3.5 Hash 哈希表\\n\\nfield(String):value\\n\\n用java解释就是`Map<String,Map<Object,Object>>`\\n\\nHash的常见命令有：\\n\\n- HSET key field value：添加或者修改hash类型key的field的值\\n- HGET key field：获取一个hash类型key的field的值\\n- HMSET：批量添加多个hash类型key的field的值\\n- HMGET：批量获取多个hash类型key的field的值\\n- HGETALL：获取一个hash类型的key中的所有的field和value\\n- HKEYS：获取一个hash类型的key中的所有的field\\n- HINCRBY:让一个hash类型key的字段值自增并指定步长\\n- HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行\\n\\n## 3.6 Bitfield 位域\\n\\n通过bitfield命令可以一次性操作多个**多个比特位域**（连续的多个比特位），执行操作并返回一个相应数组，了解即可\\n\\n位域修改，溢出控制\\n\\n直接修改底层\\n\\n## 3.7 Bitmap 位图\\n\\n由0和1状态表现得二进制bit数组\\n\\n主要用于状态记录等等\\n\\n主要命令有：\\n\\n- setbit key offset val:给指定key的值的第offset赋值val\\n- getbit key offset:获取指定key的offset位\\n- bitlen key：返回占用的字节数\\n- bitcount key start end:返回指定key中【start，end】中1的数量\\n- bitop operation destkey key:对不同的二进制存储数据进行位运算（and、or、not、xor）\\n\\n## 3.8 Geospatial 地理空间\\n\\n存储地理位置信息，并对信息进行操作\\n\\n- 添加地理位置坐标\\n- 获取地理位置的坐标\\n- 计算两个位置之间的距离\\n- 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合\\n\\n常用命令：\\n\\n- geoadd:多个经纬度、位置名称添加到指定的key中\\n- geopos:从键里面返回所有给定的位置元素\\n- geodist:返回两个位置之间的距离\\n- georadius:以给定经纬度为中心，返回与中心距离不超过给定最大距离的所有位置元素\\n- georadiusbymember:与georadius类似\\n- geohash:返回一个或多个位置元素的geohash表示\\n\\n## 3.9 Hyperloglog 基数统计\\n\\n输入元素数量或体积非常大时，计算基数所需要的空间总是固定且很小的。\\n\\n***去重复基数统计***\\n\\n基数：去重复的数据集合（只记录个数不存储数据）\\n\\n适用场景一般为统计UV（Unique VIsitor）、统计网站关键词搜索…\\n\\n常用命令：pfadd\\\\pfcount\\\\pfdebug\\\\pfmerge\\\\pfselftest\\n\\n## 3.10 Stream 流\\n\\n类似mq中间件，主要用于消息队列\\n\\n特殊符号：\\n\\n- +，- ：最大最小可能出现的id\\n- $：只消费新的消息\\n- \\\\> ：用于xreadgroup命令，表示迄今还没有发送给组中使用者的信息，会更新新消费者组的最后id\\n- *：用于xadd命令，让系统自动生成id\\n\\n常用命令：xadd\\\\xrevrange\\\\xdel…\\n\\n更多命令参考：https://redis.io/docs/latest/commands/?group=stream\\n\\n# 4 Redis持久化\\n\\n## 4.1 RDB\\n\\nRDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是保存在当前运行目录。\\n\\nRDB持久化在四种情况下会执行：\\n\\n- 执行save命令：由redis主线程来执行rdb，会阻塞所有命令，只有在数据迁移时可能用到\\n- 执行bgsave命令：开启独立进程完成RDB，主进程可以持续处理用户请求，不受影响\\n- Redis停机时：Redis停机时会执行一次save命令，实现RDB持久化。\\n- 触发RDB条件时：Redis内部有触发RDB的机制，可以在redis.conf文件中找到如：save 900 1\\n\\n## 4.2 AOF\\n\\nAOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。\\n\\nAOF默认是关闭的，需要修改redis.conf配置文件来开启AOF：\\n\\n```conf\\n# 是否开启AOF功能，默认是no\\nappendonly yes\\n# AOF文件的名称\\nappendfilename \\\"appendonly.aof\\\"\\n\\n```\\n\\nAOF的命令记录的频率也可以通过redis.conf文件来配：\\n\\n```conf\\n# 表示每执行一次写命令，立即记录到AOF文件\\nappendfsync always \\n# 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案\\nappendfsync everysec \\n# 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘\\nappendfsync no\\n\\n```\\n\\nappendfsync三种命令的对比：\\n\\n|  配置项  |   刷盘时机   |           优点           |            缺点            |\\n| :------: | :----------: | :----------------------: | :------------------------: |\\n|  always  |   同步刷盘   | 可靠性高，数据几乎不丢失 |         性能影响大         |\\n| everysec |   每秒刷盘   |         性能适中         |      最多丢失1秒数据       |\\n|    no    | 操作系统控制 |         性能最好         | 可靠性差，可能丢失大量数据 |\\n\\n**AOF重写机制**\\n\\n因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。\\n\\nRedis也会在触发阈值时自动去重写AOF文件。阈值也可以在redis.conf中配置：\\n\\n```conf\\n# AOF文件比上次文件 增长超过多少百分比则触发重写\\nauto-aof-rewrite-percentage 100\\n# AOF文件体积最小多大以上才触发重写 \\nauto-aof-rewrite-min-size 64mb \\n\\n```\\n\\n## 4.3 RDB与AOF对比\\n\\nRDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会**结合**两者来使用。\\n\\n|                |                     RDB                      |                          AOF                           |\\n| :------------: | :------------------------------------------: | :----------------------------------------------------: |\\n|   持久化方式   |             定时对整个内存做快照             |                    记录每一次写操作                    |\\n|   数据完整性   |           不完整，两次备份之间丢失           |                相对完整，取决与刷盘策略                |\\n|    文件大小    |              有压缩，文件体积小              |                  记录命令，文件体积大                  |\\n|  宕机恢复速度  |                     很快                     |                           慢                           |\\n| 数据恢复优先级 |          低，因为数据完整性不如AOF           |                  高，因为数据完整性高                  |\\n|  系统资源占用  |            高，大量CPU和内存消耗             | 低，主要是磁盘IO资源但AOF重写时会占用大量CPU和内存资源 |\\n|    使用场景    | 可以容忍数分钟的数据丢失，追求更快的启动速度 |                  对数据安全性要求较高                  |\\n\\n# 5 Redis事务\\n\\nRedis事务提供了一种将多个命令请求打包然后**一次性、顺序性**执行的机制。事务功能是通过MULTI、EXEC、DISCARD和WATCH这几个命令实现的。事务中的所有命令都会按照顺序执行，并且在事务执行期间，Redis服务器不会被其他客户端的请求打断。然而，与传统的关系型数据库事务不同，Redis事务并不能保证严格意义上的原子性，即使在事务中某个命令执行失败，也不会停止执行其他命令，也___不会回滚已经执行的命令___。\\n\\n## 5.1 基础命令\\n\\n- **开始事务**：使用`MULTI`命令开始一个事务，执行后Redis返回`OK`表示进入了事务模式。\\n- **命令入队**：在`MULTI`之后和`EXEC`之前的所有命令，都会被放入事务队列中，但不会立即执行。\\n- **执行事务**：使用`EXEC`命令提交事务，此时Redis会以FIFO（先进先出）的方式执行队列中的所有命令。\\n- **取消事务**：使用`DISCARD`命令可以取消事务，放弃执行已经在事务队列中的命令。\\n- **监控键值**：通过`WATCH`命令可以监控一个或多个键值，如果在事务执行前这些键值发生变化，则会自动回滚事务。\\n\\n## 5.2 Redis事务的特性\\n\\n- **原子性**：事务作为一个整体被执行，要么全部执行，要么全部不执行。\\n- **顺序性**：事务内部的命令会按照它们在队列中的顺序执行。\\n- **排他性**：在事务执行期间，Redis服务器不会被其他客户端的请求打断。\\n- **非隔离性**：Redis事务不支持像传统数据库那样的隔离级别，事务中的命令有可能被其他命令插队执行。\\n- **不支持回滚**：如果事务中存在错误，Redis不会回滚已经执行的命令。\\n\\n# 6 Redis管道\\n\\nRedis管道（Pipeline）是Redis客户端**发送多个命令**请求的一种机制。通过将一系列的单独命令请求打包成一组，可以一次性地从服务器返回结果，从而提高执行效率和性能。在客户端层面，管道操作就像是在一个事务中一样，所有命令都先积累起来，然后在某个时间点一起发送给服务器。服务器端会缓存这些命令，并在内部处理后一次性响应结果给客户端。这种方式减少了网络通信的开销，因为客户端只需要与服务器进行一次交互就可以获取多个命令的结果。\\n\\n# 7 Redis发布与订阅\\n\\nRedis发布与订阅模式（Pub/Sub）是一种消息通信模式，允许消息的发送者（publisher）发送消息到一个频道（channel），而消息的接收者（subscriber）可以订阅这个频道来接收消息。这种模式在实时通信、事件驱动的应用中非常有用。\\n\\n> 个人不推荐使用，了解即可\\n\\n发布订阅的操作命令\\n\\n- `SUBSCRIBE`：订阅一个或多个频道。\\n- `UNSUBSCRIB`：取消订阅某个频道。\\n- `PSUBSCRIBE`：模式订阅，可以订阅多个匹配模式的频道。\\n- `PUBLISH`：向一个或多个频道发送消息。\\n\\n# 8 Redis复制\\n\\nRedis主从复制是指将Redis服务器的数据从一个节点（主节点）复制到其他节点（从节点）的过程。主节点负责处理写操作，而复制操作则是单向的，只能由主节点到从节点。一个主节点可以有多个从节点，但一个从节点只能有一个主节点。主从复制的主要作用包括数据冗余、读写分离和故障恢复。\\n\\n## 8.1 主从复制\\n\\n**配从不配主**：从机配置去找主机，主机不动\\n\\n从机配置：\\n\\n```conf\\nmasterauth <master-password>\\nreplicaof master-ip master-port\\n\\n```\\n\\n常用命令：\\n\\n- `info replication`:可以查看复制节点的主从关系和配置信息\\n- `replicaof master-ip master-port`:配置在conf中\\n- `slaveof master-ip master-port`:切换主库\\n- `slaveof no one`:停止连接\\n\\n操作步骤：\\n\\n- 开启`daemonize yes`\\n- 注释掉`bing 127.0.0.1`\\n- 设置`protected-mode no`\\n- 指定端口\\n- 指定当前工作目录\\n- `pid`文件名字\\n- `log`文件名字\\n- `requirepass`\\n- `dump.rdb`名字\\n- `aof`文件，`appendfilename`\\n- 从机访问主机的通行密码`masterauth`\\n\\n注意：\\n\\n从机只读，主机可读可写（一般只做写）\\n\\n从机开机迟让可复制主机所有信息\\n\\n主机挂掉，从机原地待命，不会争夺主机\\n\\n主机重新启动，主从关系依然在\\n\\n配置文件中的永久有效，手动命令的单次有效\\n\\n# Redis Springboot整合\\n\\npom文件导入\\n\\n```xml\\n<dependency>\\n\\t<groupId>org.springframework.boot</groupId>\\n\\t<artifactId>spring-boot-starter-data-redis</artifactId>\\n</dependency>\\n\\n```\\n\\nproperties配置\\n\\n```properties\\nspring.redis.host=192.168.200.128\\nspring.redis.port=6379\\nspring.redis.password=123456\\nspring.redis.database=0\\n\\n```\\n\\n\",\"articleCover\":\"http://heyblog.oss-cn-chengdu.aliyuncs.com/heyqing/hey_blog/articles/25e77e515c1a22a7f5ea8ab97fc0130d.png\",\"articleTitle\":\"Redis速成指南：高效缓存与数据存储的魔力\",\"categoryName\":\"数据库\",\"isFeatured\":0,\"isTop\":0,\"status\":1,\"tagNames\":[\"redis\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:48:24', NULL);
INSERT INTO `t_operation_log` VALUES (1775, '用户信息模块', '修改', '/users/subscribe', 'top.heyqing.heyblog.controller.UserInfoController.updateUserSubscribe', '修改用户的订阅状态', '[{\"isSubscribe\":1,\"userId\":1024}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:51:21', NULL);
INSERT INTO `t_operation_log` VALUES (1776, '用户信息模块', '修改', '/users/info', 'top.heyqing.heyblog.controller.UserInfoController.updateUserInfo', '更新用户信息', '[{\"intro\":\"云散天犹蓝\",\"nickname\":\"何以晴\",\"website\":\"http:\\\\\\\\heyqing.top\"}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 12:51:21', NULL);
INSERT INTO `t_operation_log` VALUES (1777, 'hey-blog信息', '修改', '/admin/website/config', 'top.heyqing.heyblog.controller.HeyBlogInfoController.updateWebsiteConfig', '更新网站配置', '[{\"alipayQRCode\":\"\",\"author\":\"何以晴\",\"authorAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"authorIntro\":\"往事莫沉吟。身间时序好，且登临。\",\"beianNumber\":\"\",\"csdn\":\"https://blog.csdn.net/heyiqingsong\",\"englishName\":\"heyqing\",\"gitee\":\"https://gitee.com/heyqing\",\"github\":\"https://github.com/heyqing\",\"isCommentReview\":0,\"isEmailNotice\":1,\"isReward\":1,\"juejin\":\"\",\"logo\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"multiLanguage\":1,\"name\":\"何以晴\",\"notice\":\"【初晴】正式上线了，感谢大家关注！！！\",\"qq\":\"\",\"qqLogin\":1,\"stackoverflow\":\"\",\"touristAvatar\":\"\",\"twitter\":\"https://x.com/heyqings\",\"userAvatar\":\"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\"weChat\":\"\",\"websiteCreateTime\":\"2024-12-01\",\"websiteTitle\":\"初晴\",\"weiXinQRCode\":\"\",\"weibo\":\"\",\"zhihu\":\"\"}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 13:08:47', NULL);
INSERT INTO `t_operation_log` VALUES (1778, 'hey-blog信息', '修改', '/admin/about', 'top.heyqing.heyblog.controller.HeyBlogInfoController.updateAbout', '修改关于我信息', '[{\"content\":\"何以晴\"}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 18:23:13', NULL);
INSERT INTO `t_operation_log` VALUES (1779, '评论模块', '新增', '/comments/save', 'top.heyqing.heyblog.controller.CommentController.saveComment', '添加评论', '[{\"commentContent\":\"测试留言\",\"type\":2}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 18:25:25', NULL);
INSERT INTO `t_operation_log` VALUES (1780, '评论模块', '新增', '/comments/save', 'top.heyqing.heyblog.controller.CommentController.saveComment', '添加评论', '[{\"commentContent\":\"棒棒棒\",\"topicId\":149,\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1014, '何以晴', '192.168.200.50', '内网IP|内网IP', '2024-12-03 18:26:03', NULL);

-- ----------------------------
-- Table structure for t_photo
-- ----------------------------
DROP TABLE IF EXISTS `t_photo`;
CREATE TABLE `t_photo`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `album_id` int NOT NULL COMMENT '相册id',
  `photo_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '照片名',
  `photo_desc` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '照片描述',
  `photo_src` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '照片地址',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 67 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '照片' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_photo
-- ----------------------------

-- ----------------------------
-- Table structure for t_photo_album
-- ----------------------------
DROP TABLE IF EXISTS `t_photo_album`;
CREATE TABLE `t_photo_album`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `album_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册名',
  `album_desc` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册描述',
  `album_cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册封面',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '状态值 1公开 2私密',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '相册' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_photo_album
-- ----------------------------

-- ----------------------------
-- Table structure for t_resource
-- ----------------------------
DROP TABLE IF EXISTS `t_resource`;
CREATE TABLE `t_resource`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `resource_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '资源名',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '权限路径',
  `request_method` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '请求方式',
  `parent_id` int NULL DEFAULT NULL COMMENT '父模块id',
  `is_anonymous` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否匿名访问 0否 1是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1189 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_resource
-- ----------------------------
INSERT INTO `t_resource` VALUES (1050, 'HeyBlog信息', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1051, '分类模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1052, '友链模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1053, '定时任务日志模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1054, '定时任务模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1055, '异常处理模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1056, '操作日志模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1057, '文章模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1058, '标签模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1059, '照片模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1060, '用户信息模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1061, '用户账号模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1062, '相册模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1063, '菜单模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1064, '角色模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1065, '评论模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1066, '说说模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1067, '资源模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1068, '获取系统信息', '/', 'GET', 1050, 1, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1069, '查看关于我信息', '/about', 'GET', 1050, 1, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1070, '获取系统后台信息', '/admin', 'GET', 1050, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1071, '修改关于我信息', '/admin/about', 'PUT', 1050, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1072, '获取后台文章', '/admin/articles', 'GET', 1057, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1073, '保存和修改文章', '/admin/articles', 'POST', 1057, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1074, '删除或者恢复文章', '/admin/articles', 'PUT', 1057, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1075, '物理删除文章', '/admin/articles/delete', 'DELETE', 1057, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1076, '导出文章', '/admin/articles/export', 'POST', 1057, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1077, '上传文章图片', '/admin/articles/images', 'POST', 1057, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1078, '导入文章', '/admin/articles/import', 'POST', 1057, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1079, '修改文章是否置顶和推荐', '/admin/articles/topAndFeatured', 'PUT', 1057, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1080, '根据id查看后台文章', '/admin/articles/*', 'GET', 1057, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1081, '查看后台分类列表', '/admin/categories', 'GET', 1051, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1082, '添加或修改分类', '/admin/categories', 'POST', 1051, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1083, '删除分类', '/admin/categories', 'DELETE', 1051, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1084, '搜索文章分类', '/admin/categories/search', 'GET', 1051, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1085, '查询后台评论', '/admin/comments', 'GET', 1065, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1086, '删除评论', '/admin/comments', 'DELETE', 1065, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1087, '审核评论', '/admin/comments/review', 'PUT', 1065, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1088, '上传博客配置图片', '/admin/config/images', 'POST', 1050, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1089, '获取定时任务的日志列表', '/admin/jobLogs', 'GET', 1053, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1090, '删除定时任务的日志', '/admin/jobLogs', 'DELETE', 1053, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1091, '清除定时任务的日志', '/admin/jobLogs/clean', 'DELETE', 1053, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1092, '获取定时任务日志的所有组名', '/admin/jobLogs/jobGroups', 'GET', 1053, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1093, '获取任务列表', '/admin/jobs', 'GET', 1054, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1094, '添加定时任务', '/admin/jobs', 'POST', 1054, 0, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1095, '修改定时任务', '/admin/jobs', 'PUT', 1054, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1096, '删除定时任务', '/admin/jobs', 'DELETE', 1054, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1097, '获取所有job分组', '/admin/jobs/jobGroups', 'GET', 1054, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1098, '执行某个任务', '/admin/jobs/run', 'PUT', 1054, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1099, '更改任务的状态', '/admin/jobs/status', 'PUT', 1054, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1100, '根据id获取任务', '/admin/jobs/*', 'GET', 1054, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1101, '查看后台友链列表', '/admin/links', 'GET', 1052, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1102, '保存或修改友链', '/admin/links', 'POST', 1052, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1103, '删除友链', '/admin/links', 'DELETE', 1052, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1104, '查看菜单列表', '/admin/menus', 'GET', 1063, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1105, '新增或修改菜单', '/admin/menus', 'POST', 1063, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1106, '修改目录是否隐藏', '/admin/menus/isHidden', 'PUT', 1063, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1107, '删除菜单', '/admin/menus/*', 'DELETE', 1063, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1108, '查看操作日志', '/admin/operation/logs', 'GET', 1056, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1109, '删除操作日志', '/admin/operation/logs', 'DELETE', 1056, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1110, '根据相册id获取照片列表', '/admin/photos', 'GET', 1059, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1111, '保存照片', '/admin/photos', 'POST', 1059, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1112, '更新照片信息', '/admin/photos', 'PUT', 1059, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1113, '删除照片', '/admin/photos', 'DELETE', 1059, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1114, '移动照片相册', '/admin/photos/album', 'PUT', 1059, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1115, '查看后台相册列表', '/admin/photos/albums', 'GET', 1062, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1116, '保存或更新相册', '/admin/photos/albums', 'POST', 1062, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1117, '上传相册封面', '/admin/photos/albums/cover', 'POST', 1062, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1118, '获取后台相册列表信息', '/admin/photos/albums/info', 'GET', 1062, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1119, '根据id删除相册', '/admin/photos/albums/*', 'DELETE', 1062, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1120, '根据id获取后台相册信息', '/admin/photos/albums/*/info', 'GET', 1062, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1121, '更新照片删除状态', '/admin/photos/delete', 'PUT', 1059, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1122, '查看资源列表', '/admin/resources', 'GET', 1067, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1123, '新增或修改资源', '/admin/resources', 'POST', 1067, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1124, '删除资源', '/admin/resources/*', 'DELETE', 1067, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1125, '保存或更新角色', '/admin/role', 'POST', 1064, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1126, '查看角色菜单选项', '/admin/role/menus', 'GET', 1063, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1127, '查看角色资源选项', '/admin/role/resources', 'GET', 1067, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1128, '查询角色列表', '/admin/roles', 'GET', 1064, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1129, '删除角色', '/admin/roles', 'DELETE', 1064, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1130, '查询后台标签列表', '/admin/tags', 'GET', 1058, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1131, '添加或修改标签', '/admin/tags', 'POST', 1058, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1132, '删除标签', '/admin/tags', 'DELETE', 1058, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1133, '搜索文章标签', '/admin/tags/search', 'GET', 1058, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1134, '查看后台说说', '/admin/talks', 'GET', 1066, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1135, '保存或修改说说', '/admin/talks', 'POST', 1066, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1136, '删除说说', '/admin/talks', 'DELETE', 1066, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1137, '上传说说图片', '/admin/talks/images', 'POST', 1066, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1138, '根据id查看后台说说', '/admin/talks/*', 'GET', 1066, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:14');
INSERT INTO `t_resource` VALUES (1139, '查看当前用户菜单', '/admin/user/menus', 'GET', 1063, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1140, '查询后台用户列表', '/admin/users', 'GET', 1061, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1141, '获取用户区域分布', '/admin/users/area', 'GET', 1061, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1142, '修改用户禁用状态', '/admin/users/disable', 'PUT', 1060, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1143, '查看在线用户', '/admin/users/online', 'GET', 1060, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1144, '修改管理员密码', '/admin/users/password', 'PUT', 1061, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1145, '查询用户角色选项', '/admin/users/role', 'GET', 1064, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1146, '修改用户角色', '/admin/users/role', 'PUT', 1060, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1147, '下线用户', '/admin/users/*/online', 'DELETE', 1060, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1148, '获取网站配置', '/admin/website/config', 'GET', 1050, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1149, '更新网站配置', '/admin/website/config', 'PUT', 1050, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1150, '根据相册id查看照片列表', '/albums/*/photos', 'GET', 1059, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1151, '获取所有文章归档', '/archives/all', 'GET', 1057, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1152, '获取所有文章', '/articles/all', 'GET', 1057, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1153, '根据分类id获取文章', '/articles/categoryId', 'GET', 1057, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1154, '搜索文章', '/articles/search', 'GET', 1057, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1155, '根据标签id获取文章', '/articles/tagId', 'GET', 1057, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1156, '获取置顶和推荐文章', '/articles/topAndFeatured', 'GET', 1057, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1157, '根据id获取文章', '/articles/*', 'GET', 1057, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1158, '/处理BizException', '/bizException', 'GET', 1055, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1159, '/处理BizException', '/bizException', 'HEAD', 1055, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1160, '/处理BizException', '/bizException', 'POST', 1055, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1161, '/处理BizException', '/bizException', 'PUT', 1055, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1162, '/处理BizException', '/bizException', 'DELETE', 1055, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1163, '/处理BizException', '/bizException', 'OPTIONS', 1055, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1164, '/处理BizException', '/bizException', 'PATCH', 1055, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1165, '获取所有分类', '/categories/all', 'GET', 1051, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1166, '获取评论', '/comments', 'GET', 1065, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1167, '添加评论', '/comments/save', 'POST', 1065, 0, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1168, '获取前七个评论', '/comments/topSeven', 'GET', 1065, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1169, '查看友链列表', '/links', 'GET', 1052, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1170, '获取相册列表', '/photos/albums', 'GET', 1062, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1171, 'report', '/report', 'POST', 1050, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1172, '获取所有标签', '/tags/all', 'GET', 1058, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1173, '获取前十个标签', '/tags/topTen', 'GET', 1058, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1174, '查看说说列表', '/talks', 'GET', 1066, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1175, '根据id查看说说', '/talks/*', 'GET', 1066, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1176, '更新用户头像', '/users/avatar', 'POST', 1060, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1177, '发送邮箱验证码', '/users/code', 'GET', 1061, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1178, '绑定用户邮箱', '/users/email', 'PUT', 1060, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1179, '更新用户信息', '/users/info', 'PUT', 1060, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1180, '根据id获取用户信息', '/users/info/*', 'GET', 1060, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1181, '用户登出', '/users/logout', 'POST', 1061, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1182, 'qq登录', '/users/oauth/qq', 'POST', 1061, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1183, '修改密码', '/users/password', 'PUT', 1061, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1184, '用户注册', '/users/register', 'POST', 1061, 1, '2024-12-03 10:41:07', '2024-12-03 10:42:25');
INSERT INTO `t_resource` VALUES (1185, '修改用户的订阅状态', '/users/subscribe', 'PUT', 1060, 1, '2024-12-03 10:41:07', '2024-12-03 10:41:28');
INSERT INTO `t_resource` VALUES (1186, '异常日志模块', NULL, NULL, NULL, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1187, '获取异常日志', '/admin/exception/logs', 'GET', 1186, 0, '2024-12-03 10:41:07', NULL);
INSERT INTO `t_resource` VALUES (1188, '删除异常日志', '/admin/exception/logs', 'DELETE', 1186, 0, '2024-12-03 10:41:07', NULL);

-- ----------------------------
-- Table structure for t_role
-- ----------------------------
DROP TABLE IF EXISTS `t_role`;
CREATE TABLE `t_role`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `role_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色名',
  `is_disable` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否禁用  0否 1是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_role
-- ----------------------------
INSERT INTO `t_role` VALUES (1, 'admin', 0, '2024-12-03 10:43:23', '2024-12-03 10:43:35');
INSERT INTO `t_role` VALUES (2, 'user', 0, '2024-12-03 10:43:23', '2024-12-03 10:43:35');
INSERT INTO `t_role` VALUES (14, 'test', 0, '2024-12-03 10:43:23', '2024-12-03 10:43:35');

-- ----------------------------
-- Table structure for t_role_menu
-- ----------------------------
DROP TABLE IF EXISTS `t_role_menu`;
CREATE TABLE `t_role_menu`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `role_id` int NULL DEFAULT NULL COMMENT '角色id',
  `menu_id` int NULL DEFAULT NULL COMMENT '菜单id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2886 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_role_menu
-- ----------------------------
INSERT INTO `t_role_menu` VALUES (2784, 1, 1);
INSERT INTO `t_role_menu` VALUES (2785, 1, 2);
INSERT INTO `t_role_menu` VALUES (2786, 1, 6);
INSERT INTO `t_role_menu` VALUES (2787, 1, 7);
INSERT INTO `t_role_menu` VALUES (2788, 1, 8);
INSERT INTO `t_role_menu` VALUES (2789, 1, 9);
INSERT INTO `t_role_menu` VALUES (2790, 1, 10);
INSERT INTO `t_role_menu` VALUES (2791, 1, 3);
INSERT INTO `t_role_menu` VALUES (2792, 1, 11);
INSERT INTO `t_role_menu` VALUES (2793, 1, 221);
INSERT INTO `t_role_menu` VALUES (2794, 1, 222);
INSERT INTO `t_role_menu` VALUES (2795, 1, 223);
INSERT INTO `t_role_menu` VALUES (2796, 1, 224);
INSERT INTO `t_role_menu` VALUES (2797, 1, 202);
INSERT INTO `t_role_menu` VALUES (2798, 1, 13);
INSERT INTO `t_role_menu` VALUES (2799, 1, 201);
INSERT INTO `t_role_menu` VALUES (2800, 1, 213);
INSERT INTO `t_role_menu` VALUES (2801, 1, 14);
INSERT INTO `t_role_menu` VALUES (2802, 1, 15);
INSERT INTO `t_role_menu` VALUES (2803, 1, 16);
INSERT INTO `t_role_menu` VALUES (2804, 1, 4);
INSERT INTO `t_role_menu` VALUES (2805, 1, 214);
INSERT INTO `t_role_menu` VALUES (2806, 1, 209);
INSERT INTO `t_role_menu` VALUES (2807, 1, 17);
INSERT INTO `t_role_menu` VALUES (2808, 1, 18);
INSERT INTO `t_role_menu` VALUES (2809, 1, 205);
INSERT INTO `t_role_menu` VALUES (2810, 1, 206);
INSERT INTO `t_role_menu` VALUES (2811, 1, 208);
INSERT INTO `t_role_menu` VALUES (2812, 1, 210);
INSERT INTO `t_role_menu` VALUES (2813, 1, 19);
INSERT INTO `t_role_menu` VALUES (2814, 1, 20);
INSERT INTO `t_role_menu` VALUES (2815, 1, 225);
INSERT INTO `t_role_menu` VALUES (2816, 1, 220);
INSERT INTO `t_role_menu` VALUES (2817, 1, 5);
INSERT INTO `t_role_menu` VALUES (2852, 14, 1);
INSERT INTO `t_role_menu` VALUES (2853, 14, 2);
INSERT INTO `t_role_menu` VALUES (2854, 14, 6);
INSERT INTO `t_role_menu` VALUES (2855, 14, 7);
INSERT INTO `t_role_menu` VALUES (2856, 14, 8);
INSERT INTO `t_role_menu` VALUES (2857, 14, 9);
INSERT INTO `t_role_menu` VALUES (2858, 14, 10);
INSERT INTO `t_role_menu` VALUES (2859, 14, 3);
INSERT INTO `t_role_menu` VALUES (2860, 14, 11);
INSERT INTO `t_role_menu` VALUES (2861, 14, 221);
INSERT INTO `t_role_menu` VALUES (2862, 14, 222);
INSERT INTO `t_role_menu` VALUES (2863, 14, 223);
INSERT INTO `t_role_menu` VALUES (2864, 14, 224);
INSERT INTO `t_role_menu` VALUES (2865, 14, 202);
INSERT INTO `t_role_menu` VALUES (2866, 14, 13);
INSERT INTO `t_role_menu` VALUES (2867, 14, 201);
INSERT INTO `t_role_menu` VALUES (2868, 14, 213);
INSERT INTO `t_role_menu` VALUES (2869, 14, 14);
INSERT INTO `t_role_menu` VALUES (2870, 14, 15);
INSERT INTO `t_role_menu` VALUES (2871, 14, 16);
INSERT INTO `t_role_menu` VALUES (2872, 14, 4);
INSERT INTO `t_role_menu` VALUES (2873, 14, 214);
INSERT INTO `t_role_menu` VALUES (2874, 14, 209);
INSERT INTO `t_role_menu` VALUES (2875, 14, 17);
INSERT INTO `t_role_menu` VALUES (2876, 14, 18);
INSERT INTO `t_role_menu` VALUES (2877, 14, 205);
INSERT INTO `t_role_menu` VALUES (2878, 14, 206);
INSERT INTO `t_role_menu` VALUES (2879, 14, 208);
INSERT INTO `t_role_menu` VALUES (2880, 14, 210);
INSERT INTO `t_role_menu` VALUES (2881, 14, 19);
INSERT INTO `t_role_menu` VALUES (2882, 14, 20);
INSERT INTO `t_role_menu` VALUES (2883, 14, 225);
INSERT INTO `t_role_menu` VALUES (2884, 14, 220);
INSERT INTO `t_role_menu` VALUES (2885, 14, 5);

-- ----------------------------
-- Table structure for t_role_resource
-- ----------------------------
DROP TABLE IF EXISTS `t_role_resource`;
CREATE TABLE `t_role_resource`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `role_id` int NULL DEFAULT NULL COMMENT '角色id',
  `resource_id` int NULL DEFAULT NULL COMMENT '权限id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5547 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_role_resource
-- ----------------------------
INSERT INTO `t_role_resource` VALUES (5406, 2, 1146);
INSERT INTO `t_role_resource` VALUES (5407, 2, 1167);
INSERT INTO `t_role_resource` VALUES (5408, 1, 1050);
INSERT INTO `t_role_resource` VALUES (5409, 1, 1070);
INSERT INTO `t_role_resource` VALUES (5410, 1, 1071);
INSERT INTO `t_role_resource` VALUES (5411, 1, 1088);
INSERT INTO `t_role_resource` VALUES (5412, 1, 1148);
INSERT INTO `t_role_resource` VALUES (5413, 1, 1149);
INSERT INTO `t_role_resource` VALUES (5414, 1, 1051);
INSERT INTO `t_role_resource` VALUES (5415, 1, 1081);
INSERT INTO `t_role_resource` VALUES (5416, 1, 1082);
INSERT INTO `t_role_resource` VALUES (5417, 1, 1083);
INSERT INTO `t_role_resource` VALUES (5418, 1, 1084);
INSERT INTO `t_role_resource` VALUES (5419, 1, 1052);
INSERT INTO `t_role_resource` VALUES (5420, 1, 1101);
INSERT INTO `t_role_resource` VALUES (5421, 1, 1102);
INSERT INTO `t_role_resource` VALUES (5422, 1, 1103);
INSERT INTO `t_role_resource` VALUES (5423, 1, 1053);
INSERT INTO `t_role_resource` VALUES (5424, 1, 1089);
INSERT INTO `t_role_resource` VALUES (5425, 1, 1090);
INSERT INTO `t_role_resource` VALUES (5426, 1, 1091);
INSERT INTO `t_role_resource` VALUES (5427, 1, 1092);
INSERT INTO `t_role_resource` VALUES (5428, 1, 1054);
INSERT INTO `t_role_resource` VALUES (5429, 1, 1093);
INSERT INTO `t_role_resource` VALUES (5430, 1, 1094);
INSERT INTO `t_role_resource` VALUES (5431, 1, 1095);
INSERT INTO `t_role_resource` VALUES (5432, 1, 1096);
INSERT INTO `t_role_resource` VALUES (5433, 1, 1097);
INSERT INTO `t_role_resource` VALUES (5434, 1, 1098);
INSERT INTO `t_role_resource` VALUES (5435, 1, 1099);
INSERT INTO `t_role_resource` VALUES (5436, 1, 1100);
INSERT INTO `t_role_resource` VALUES (5437, 1, 1055);
INSERT INTO `t_role_resource` VALUES (5438, 1, 1158);
INSERT INTO `t_role_resource` VALUES (5439, 1, 1159);
INSERT INTO `t_role_resource` VALUES (5440, 1, 1160);
INSERT INTO `t_role_resource` VALUES (5441, 1, 1161);
INSERT INTO `t_role_resource` VALUES (5442, 1, 1162);
INSERT INTO `t_role_resource` VALUES (5443, 1, 1163);
INSERT INTO `t_role_resource` VALUES (5444, 1, 1164);
INSERT INTO `t_role_resource` VALUES (5445, 1, 1056);
INSERT INTO `t_role_resource` VALUES (5446, 1, 1108);
INSERT INTO `t_role_resource` VALUES (5447, 1, 1109);
INSERT INTO `t_role_resource` VALUES (5448, 1, 1057);
INSERT INTO `t_role_resource` VALUES (5449, 1, 1072);
INSERT INTO `t_role_resource` VALUES (5450, 1, 1073);
INSERT INTO `t_role_resource` VALUES (5451, 1, 1074);
INSERT INTO `t_role_resource` VALUES (5452, 1, 1075);
INSERT INTO `t_role_resource` VALUES (5453, 1, 1076);
INSERT INTO `t_role_resource` VALUES (5454, 1, 1077);
INSERT INTO `t_role_resource` VALUES (5455, 1, 1078);
INSERT INTO `t_role_resource` VALUES (5456, 1, 1079);
INSERT INTO `t_role_resource` VALUES (5457, 1, 1080);
INSERT INTO `t_role_resource` VALUES (5458, 1, 1058);
INSERT INTO `t_role_resource` VALUES (5459, 1, 1130);
INSERT INTO `t_role_resource` VALUES (5460, 1, 1131);
INSERT INTO `t_role_resource` VALUES (5461, 1, 1132);
INSERT INTO `t_role_resource` VALUES (5462, 1, 1133);
INSERT INTO `t_role_resource` VALUES (5463, 1, 1059);
INSERT INTO `t_role_resource` VALUES (5464, 1, 1110);
INSERT INTO `t_role_resource` VALUES (5465, 1, 1111);
INSERT INTO `t_role_resource` VALUES (5466, 1, 1112);
INSERT INTO `t_role_resource` VALUES (5467, 1, 1113);
INSERT INTO `t_role_resource` VALUES (5468, 1, 1114);
INSERT INTO `t_role_resource` VALUES (5469, 1, 1121);
INSERT INTO `t_role_resource` VALUES (5470, 1, 1060);
INSERT INTO `t_role_resource` VALUES (5471, 1, 1142);
INSERT INTO `t_role_resource` VALUES (5472, 1, 1143);
INSERT INTO `t_role_resource` VALUES (5473, 1, 1146);
INSERT INTO `t_role_resource` VALUES (5474, 1, 1147);
INSERT INTO `t_role_resource` VALUES (5475, 1, 1061);
INSERT INTO `t_role_resource` VALUES (5476, 1, 1140);
INSERT INTO `t_role_resource` VALUES (5477, 1, 1141);
INSERT INTO `t_role_resource` VALUES (5478, 1, 1144);
INSERT INTO `t_role_resource` VALUES (5479, 1, 1062);
INSERT INTO `t_role_resource` VALUES (5480, 1, 1115);
INSERT INTO `t_role_resource` VALUES (5481, 1, 1116);
INSERT INTO `t_role_resource` VALUES (5482, 1, 1117);
INSERT INTO `t_role_resource` VALUES (5483, 1, 1118);
INSERT INTO `t_role_resource` VALUES (5484, 1, 1119);
INSERT INTO `t_role_resource` VALUES (5485, 1, 1120);
INSERT INTO `t_role_resource` VALUES (5486, 1, 1063);
INSERT INTO `t_role_resource` VALUES (5487, 1, 1104);
INSERT INTO `t_role_resource` VALUES (5488, 1, 1105);
INSERT INTO `t_role_resource` VALUES (5489, 1, 1106);
INSERT INTO `t_role_resource` VALUES (5490, 1, 1107);
INSERT INTO `t_role_resource` VALUES (5491, 1, 1126);
INSERT INTO `t_role_resource` VALUES (5492, 1, 1139);
INSERT INTO `t_role_resource` VALUES (5493, 1, 1064);
INSERT INTO `t_role_resource` VALUES (5494, 1, 1125);
INSERT INTO `t_role_resource` VALUES (5495, 1, 1128);
INSERT INTO `t_role_resource` VALUES (5496, 1, 1129);
INSERT INTO `t_role_resource` VALUES (5497, 1, 1145);
INSERT INTO `t_role_resource` VALUES (5498, 1, 1065);
INSERT INTO `t_role_resource` VALUES (5499, 1, 1085);
INSERT INTO `t_role_resource` VALUES (5500, 1, 1086);
INSERT INTO `t_role_resource` VALUES (5501, 1, 1087);
INSERT INTO `t_role_resource` VALUES (5502, 1, 1167);
INSERT INTO `t_role_resource` VALUES (5503, 1, 1066);
INSERT INTO `t_role_resource` VALUES (5504, 1, 1134);
INSERT INTO `t_role_resource` VALUES (5505, 1, 1135);
INSERT INTO `t_role_resource` VALUES (5506, 1, 1136);
INSERT INTO `t_role_resource` VALUES (5507, 1, 1137);
INSERT INTO `t_role_resource` VALUES (5508, 1, 1067);
INSERT INTO `t_role_resource` VALUES (5509, 1, 1122);
INSERT INTO `t_role_resource` VALUES (5510, 1, 1123);
INSERT INTO `t_role_resource` VALUES (5511, 1, 1124);
INSERT INTO `t_role_resource` VALUES (5512, 1, 1127);
INSERT INTO `t_role_resource` VALUES (5513, 1, 1186);
INSERT INTO `t_role_resource` VALUES (5514, 1, 1187);
INSERT INTO `t_role_resource` VALUES (5515, 1, 1188);
INSERT INTO `t_role_resource` VALUES (5516, 14, 1070);
INSERT INTO `t_role_resource` VALUES (5517, 14, 1148);
INSERT INTO `t_role_resource` VALUES (5518, 14, 1081);
INSERT INTO `t_role_resource` VALUES (5519, 14, 1084);
INSERT INTO `t_role_resource` VALUES (5520, 14, 1101);
INSERT INTO `t_role_resource` VALUES (5521, 14, 1089);
INSERT INTO `t_role_resource` VALUES (5522, 14, 1092);
INSERT INTO `t_role_resource` VALUES (5523, 14, 1093);
INSERT INTO `t_role_resource` VALUES (5524, 14, 1097);
INSERT INTO `t_role_resource` VALUES (5525, 14, 1100);
INSERT INTO `t_role_resource` VALUES (5526, 14, 1108);
INSERT INTO `t_role_resource` VALUES (5527, 14, 1072);
INSERT INTO `t_role_resource` VALUES (5528, 14, 1080);
INSERT INTO `t_role_resource` VALUES (5529, 14, 1130);
INSERT INTO `t_role_resource` VALUES (5530, 14, 1133);
INSERT INTO `t_role_resource` VALUES (5531, 14, 1110);
INSERT INTO `t_role_resource` VALUES (5532, 14, 1143);
INSERT INTO `t_role_resource` VALUES (5533, 14, 1140);
INSERT INTO `t_role_resource` VALUES (5534, 14, 1141);
INSERT INTO `t_role_resource` VALUES (5535, 14, 1115);
INSERT INTO `t_role_resource` VALUES (5536, 14, 1118);
INSERT INTO `t_role_resource` VALUES (5537, 14, 1104);
INSERT INTO `t_role_resource` VALUES (5538, 14, 1126);
INSERT INTO `t_role_resource` VALUES (5539, 14, 1139);
INSERT INTO `t_role_resource` VALUES (5540, 14, 1128);
INSERT INTO `t_role_resource` VALUES (5541, 14, 1145);
INSERT INTO `t_role_resource` VALUES (5542, 14, 1085);
INSERT INTO `t_role_resource` VALUES (5543, 14, 1134);
INSERT INTO `t_role_resource` VALUES (5544, 14, 1122);
INSERT INTO `t_role_resource` VALUES (5545, 14, 1127);
INSERT INTO `t_role_resource` VALUES (5546, 14, 1187);

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '标签名',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 58 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES (42, '网络', '2024-12-02 22:41:05', NULL);
INSERT INTO `t_tag` VALUES (43, '工具', '2024-12-02 22:41:05', NULL);
INSERT INTO `t_tag` VALUES (44, 'AI大模型', '2024-12-03 11:19:14', NULL);
INSERT INTO `t_tag` VALUES (45, 'AI图像视觉', '2024-12-03 11:24:54', NULL);
INSERT INTO `t_tag` VALUES (46, '安全', '2024-12-03 11:37:17', NULL);
INSERT INTO `t_tag` VALUES (47, '前端', '2024-12-03 11:37:17', NULL);
INSERT INTO `t_tag` VALUES (48, 'web3', '2024-12-03 11:44:17', NULL);
INSERT INTO `t_tag` VALUES (49, 'git', '2024-12-03 11:51:25', NULL);
INSERT INTO `t_tag` VALUES (50, '基础', '2024-12-03 11:51:25', NULL);
INSERT INTO `t_tag` VALUES (51, 'sql', '2024-12-03 12:07:25', NULL);
INSERT INTO `t_tag` VALUES (52, 'markdown', '2024-12-03 12:11:57', NULL);
INSERT INTO `t_tag` VALUES (53, '二维码', '2024-12-03 12:20:07', NULL);
INSERT INTO `t_tag` VALUES (54, '算法', '2024-12-03 12:28:52', NULL);
INSERT INTO `t_tag` VALUES (55, 'java', '2024-12-03 12:28:52', NULL);
INSERT INTO `t_tag` VALUES (56, '刷题', '2024-12-03 12:33:21', NULL);
INSERT INTO `t_tag` VALUES (57, 'redis', '2024-12-03 12:48:23', NULL);

-- ----------------------------
-- Table structure for t_talk
-- ----------------------------
DROP TABLE IF EXISTS `t_talk`;
CREATE TABLE `t_talk`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '说说id',
  `user_id` int NOT NULL COMMENT '用户id',
  `content` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '说说内容',
  `images` varchar(2500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '图片',
  `is_top` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否置顶',
  `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '状态 1.公开 2.私密',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 68 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_talk
-- ----------------------------

-- ----------------------------
-- Table structure for t_unique_view
-- ----------------------------
DROP TABLE IF EXISTS `t_unique_view`;
CREATE TABLE `t_unique_view`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `views_count` int NOT NULL COMMENT '访问量',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1538 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_unique_view
-- ----------------------------

-- ----------------------------
-- Table structure for t_user_auth
-- ----------------------------
DROP TABLE IF EXISTS `t_user_auth`;
CREATE TABLE `t_user_auth`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_info_id` int NOT NULL COMMENT '用户信息id',
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户名',
  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '密码',
  `login_type` tinyint(1) NOT NULL COMMENT '登录类型',
  `ip_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '用户登录ip',
  `ip_source` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT 'ip来源',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `last_login_time` datetime NULL DEFAULT NULL COMMENT '上次登录时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `username`(`username` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1015 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_user_auth
-- ----------------------------
INSERT INTO `t_user_auth` VALUES (1014, 1024, 'heyqings@163.com', '$2a$10$YmMOnXPXE8xWTzzw0Ji8oemz4AtWN05hdXO9HUn2tV1pHgIE9H.NS', 1, '123.139.175.219', '中国|陕西省|汉中市|联通', '2024-12-01 22:35:46', '2024-12-04 20:38:14', '2024-12-04 20:38:13');

-- ----------------------------
-- Table structure for t_user_info
-- ----------------------------
DROP TABLE IF EXISTS `t_user_info`;
CREATE TABLE `t_user_info`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '用户ID',
  `email` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '邮箱号',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户昵称',
  `avatar` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT '' COMMENT '用户头像',
  `intro` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '用户简介',
  `website` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '个人网站',
  `is_subscribe` tinyint(1) NULL DEFAULT NULL COMMENT '是否订阅',
  `is_disable` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否禁用',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1025 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_user_info
-- ----------------------------
INSERT INTO `t_user_info` VALUES (1024, 'heyqings@163.com', '何以晴', 'https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg', '云散天犹蓝', 'http:\\\\heyqing.top', 1, 0, '2024-12-01 22:35:46', '2024-12-03 12:51:21');

-- ----------------------------
-- Table structure for t_user_role
-- ----------------------------
DROP TABLE IF EXISTS `t_user_role`;
CREATE TABLE `t_user_role`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NULL DEFAULT NULL COMMENT '用户id',
  `role_id` int NULL DEFAULT NULL COMMENT '角色id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1033 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_user_role
-- ----------------------------
INSERT INTO `t_user_role` VALUES (1032, 1024, 1);

-- ----------------------------
-- Table structure for t_website_config
-- ----------------------------
DROP TABLE IF EXISTS `t_website_config`;
CREATE TABLE `t_website_config`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `config` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '配置信息',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_website_config
-- ----------------------------
INSERT INTO `t_website_config` VALUES (2, '{\n    \"alipayQRCode\": \"\",\n    \"author\": \"何以晴\",\n    \"authorAvatar\": \"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\n    \"authorIntro\": \"这个人很懒...\",\n    \"beianNumber\": \"\",\n    \"csdn\": \"https://blog.csdn.net/heyiqingsong\",\n    \"englishName\": \"heyqing\",\n    \"gitee\": \"https://gitee.com/heyqing\",\n    \"github\": \"https://github.com/heyqing\",\n    \"isCommentReview\": 0,\n    \"isEmailNotice\": 1,\n    \"isReward\": 1,\n    \"juejin\": \"\",\n    \"logo\": \"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\n    \"multiLanguage\": 1,\n    \"name\": \"何以晴\",\n    \"notice\": \"。。。\",\n    \"qq\": \"\",\n    \"qqLogin\": 1,\n    \"stackoverflow\": \"\",\n    \"touristAvatar\": \"\",\n    \"twitter\": \"\",\n    \"userAvatar\": \"https://heyblog.oss-cn-chengdu.aliyuncs.com/myweb/avatar.jpg\",\n    \"weChat\": \"\",\n    \"websiteCreateTime\": \"2024-12-01\",\n    \"weiXinQRCode\": \"\",\n    \"weibo\": \"\",\n    \"zhihu\": \"\"\n}', '2024-12-01 21:57:28', '2024-12-01 21:57:29');

SET FOREIGN_KEY_CHECKS = 1;
